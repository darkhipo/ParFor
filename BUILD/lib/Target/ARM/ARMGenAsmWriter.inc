//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void ARMAsmPrinter::printInstruction(const MachineInstr *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    134217739U,	// ADCSSri
    134217739U,	// ADCSSrr
    134217739U,	// ADCSSrs
    268976145U,	// ADCri
    268992529U,	// ADCrr
    403701777U,	// ADCrs
    270057493U,	// ADDSri
    270057493U,	// ADDSrr
    404275221U,	// ADDSrs
    268976154U,	// ADDri
    268992538U,	// ADDrr
    403701786U,	// ADDrs
    538968094U,	// ADJCALLSTACKDOWN
    539492382U,	// ADJCALLSTACKUP
    270057503U,	// ANDSri
    270057503U,	// ANDSrr
    404275231U,	// ANDSrs
    268976159U,	// ANDri
    268992543U,	// ANDrr
    403701791U,	// ANDrs
    540016670U,	// ATOMIC_CMP_SWAP_I16
    540540958U,	// ATOMIC_CMP_SWAP_I32
    541065246U,	// ATOMIC_CMP_SWAP_I8
    541589534U,	// ATOMIC_LOAD_ADD_I16
    542113822U,	// ATOMIC_LOAD_ADD_I32
    542638110U,	// ATOMIC_LOAD_ADD_I8
    543162398U,	// ATOMIC_LOAD_AND_I16
    543686686U,	// ATOMIC_LOAD_AND_I32
    544210974U,	// ATOMIC_LOAD_AND_I8
    544735262U,	// ATOMIC_LOAD_NAND_I16
    545259550U,	// ATOMIC_LOAD_NAND_I32
    545783838U,	// ATOMIC_LOAD_NAND_I8
    546308126U,	// ATOMIC_LOAD_OR_I16
    546832414U,	// ATOMIC_LOAD_OR_I32
    547356702U,	// ATOMIC_LOAD_OR_I8
    547880990U,	// ATOMIC_LOAD_SUB_I16
    548405278U,	// ATOMIC_LOAD_SUB_I32
    548929566U,	// ATOMIC_LOAD_SUB_I8
    549453854U,	// ATOMIC_LOAD_XOR_I16
    549978142U,	// ATOMIC_LOAD_XOR_I32
    550502430U,	// ATOMIC_LOAD_XOR_I8
    551026718U,	// ATOMIC_SWAP_I16
    551551006U,	// ATOMIC_SWAP_I32
    552075294U,	// ATOMIC_SWAP_I8
    149946403U,	// B
    553189406U,	// BCCZi64
    553205790U,	// BCCi64
    270057510U,	// BFC
    672710698U,	// BFI
    268976174U,	// BICri
    268992558U,	// BICrr
    403701806U,	// BICrs
    806928434U,	// BKPT
    939524151U,	// BL
    149946427U,	// BLX
    149946427U,	// BLXr9
    806977600U,	// BL_pred
    939524151U,	// BLr9
    806977600U,	// BLr9_pred
    149946435U,	// BMOVPCRX
    149946435U,	// BMOVPCRXr9
    149946456U,	// BRIND
    134217820U,	// BR_JTadd
    1090519141U,	// BR_JTm
    151519342U,	// BR_JTr
    149946487U,	// BX
    806928519U,	// BXJ
    1225785483U,	// BX_RET
    149946487U,	// BXr9
    806928526U,	// Bcc
    1360642192U,	// CDP
    1495269524U,	// CDP2
    155U,	// CLREX
    1612234913U,	// CLZ
    1612234917U,	// CMNzri
    1612234917U,	// CMNzrr
    672710821U,	// CMNzrs
    1612234921U,	// CMPri
    1612234921U,	// CMPrr
    672710825U,	// CMPrs
    1612234921U,	// CMPzri
    1612234921U,	// CMPzrr
    672710825U,	// CMPzrs
    1744830494U,	// CONSTPOOL_ENTRY
    1879048365U,	// CPS
    806928561U,	// DBG
    153616565U,	// DMB_MCR
    194U,	// DMBsy
    2013266118U,	// DMBvar
    154140853U,	// DSB_MCR
    203U,	// DSBsy
    2013266127U,	// DSBvar
    268976340U,	// EORri
    268992724U,	// EORrr
    403701972U,	// EORrs
    1631174872U,	// FCONSTD
    1631699160U,	// FCONSTS
    1229455581U,	// FMSTAT
    226U,	// ISBsy
    156238054U,	// Int_eh_sjlj_longjmp
    2170028272U,	// Int_eh_sjlj_setjmp
    2170552560U,	// Int_eh_sjlj_setjmp_nofp
    421134581U,	// LDC2L_OFFSET
    689570037U,	// LDC2L_OPTION
    421134581U,	// LDC2L_POST
    421134581U,	// LDC2L_PRE
    421134587U,	// LDC2_OFFSET
    689570043U,	// LDC2_OPTION
    421134587U,	// LDC2_POST
    421134587U,	// LDC2_PRE
    421134592U,	// LDCL_OFFSET
    689570048U,	// LDCL_OPTION
    421134592U,	// LDCL_POST
    421134592U,	// LDCL_PRE
    421134597U,	// LDC_OFFSET
    689570053U,	// LDC_OPTION
    421134597U,	// LDC_POST
    421134597U,	// LDC_PRE
    2305442057U,	// LDM
    2417656073U,	// LDM_RET
    2417656073U,	// LDM_UPD
    672710925U,	// LDR
    672710929U,	// LDRB
    404275478U,	// LDRBT
    404275473U,	// LDRB_POST
    404275473U,	// LDRB_PRE
    404275484U,	// LDRD
    1343799580U,	// LDRD_POST
    1343799580U,	// LDRD_PRE
    1612235041U,	// LDREX
    1612235047U,	// LDREXB
    270057774U,	// LDREXD
    1612235061U,	// LDREXH
    672710972U,	// LDRH
    404275521U,	// LDRHT
    404275516U,	// LDRH_POST
    404275516U,	// LDRH_PRE
    672710983U,	// LDRSB
    404275533U,	// LDRSBT
    404275527U,	// LDRSB_POST
    404275527U,	// LDRSB_PRE
    672710996U,	// LDRSH
    404275546U,	// LDRSHT
    404275540U,	// LDRSH_POST
    404275540U,	// LDRSH_PRE
    404275553U,	// LDRT
    404275469U,	// LDR_POST
    404275469U,	// LDR_PRE
    672710925U,	// LDRcp
    1612235110U,	// LEApcrel
    270057830U,	// LEApcrelJT
    1360642410U,	// MCR
    1476428142U,	// MCR2
    421118325U,	// MCRR
    1476428154U,	// MCRR2
    695206274U,	// MLA
    672711046U,	// MLS
    270057866U,	// MOVCCi
    270057866U,	// MOVCCr
    404275594U,	// MOVCCs
    1232601482U,	// MOVPCLR
    149946478U,	// MOVPCRX
    270057870U,	// MOVTi16
    1635959178U,	// MOVi
    1612235155U,	// MOVi16
    1612235146U,	// MOVi2pieces
    1612235155U,	// MOVi32imm
    1635778954U,	// MOVr
    1635778954U,	// MOVr_TC
    1635778954U,	// MOVrx
    695402890U,	// MOVs
    1612235160U,	// MOVsra_flag
    1612235160U,	// MOVsrl_flag
    1360642461U,	// MRC
    1476428193U,	// MRC2
    421118376U,	// MRRC
    1476428205U,	// MRRC2
    806928821U,	// MRS
    806928821U,	// MRSsys
    1636352441U,	// MSR
    1636516281U,	// MSRi
    1636876729U,	// MSRsys
    1637040569U,	// MSRsysi
    268992957U,	// MUL
    1635959233U,	// MVNi
    1635779009U,	// MVNr
    695402945U,	// MVNs
    1223688645U,	// NOP
    268976585U,	// ORRri
    268992969U,	// ORRrr
    403702217U,	// ORRrs
    2576875981U,	// PICADD
    2711617997U,	// PICLDR
    2712142285U,	// PICLDRB
    2712666573U,	// PICLDRH
    2713190861U,	// PICLDRSB
    2713715149U,	// PICLDRSH
    2714239437U,	// PICSTR
    2714763725U,	// PICSTRB
    2715288013U,	// PICSTRH
    672711119U,	// PKHBT
    672711125U,	// PKHTB
    134447579U,	// PLDWi
    1089470946U,	// PLDWr
    134447592U,	// PLDi
    1089470958U,	// PLDr
    134447603U,	// PLIi
    1089470969U,	// PLIr
    270057982U,	// QADD
    270057987U,	// QADD16
    270057994U,	// QADD8
    270058000U,	// QASX
    270058005U,	// QDADD
    270058011U,	// QDSUB
    270058017U,	// QSAX
    270058022U,	// QSUB
    270058027U,	// QSUB16
    270058034U,	// QSUB8
    1612235320U,	// RBIT
    1612235325U,	// REV
    1612235329U,	// REV16
    1612235335U,	// REVSH
    2283307597U,	// RFE
    2283307597U,	// RFEW
    270058065U,	// RSBSri
    404275793U,	// RSBSrs
    268976726U,	// RSBri
    268993110U,	// RSBrr
    403702358U,	// RSBrs
    134218330U,	// RSCSri
    134218330U,	// RSCSrs
    268976736U,	// RSCri
    268993120U,	// RSCrr
    403702368U,	// RSCrs
    270058084U,	// SADD16
    270058091U,	// SADD8
    270058097U,	// SASX
    134218358U,	// SBCSSri
    134218358U,	// SBCSSrr
    134218358U,	// SBCSSrs
    268976764U,	// SBCri
    268993148U,	// SBCrr
    403702396U,	// SBCrs
    672711296U,	// SBFX
    270058117U,	// SEL
    649U,	// SETENDBE
    659U,	// SETENDLE
    1223688861U,	// SEV
    270058145U,	// SHADD16
    270058153U,	// SHADD8
    270058160U,	// SHASX
    270058166U,	// SHSAX
    270058172U,	// SHSUB16
    270058180U,	// SHSUB8
    806929099U,	// SMC
    672711375U,	// SMLABB
    672711382U,	// SMLABT
    672711389U,	// SMLAD
    672711395U,	// SMLADX
    695206634U,	// SMLAL
    672711408U,	// SMLALBB
    672711416U,	// SMLALBT
    672711424U,	// SMLALD
    672711431U,	// SMLALDX
    672711439U,	// SMLALTB
    672711447U,	// SMLALTT
    672711455U,	// SMLATB
    672711462U,	// SMLATT
    672711469U,	// SMLAWB
    672711476U,	// SMLAWT
    672711483U,	// SMLSD
    672711489U,	// SMLSDX
    672711496U,	// SMLSLD
    672711503U,	// SMLSLDX
    672711511U,	// SMMLA
    672711517U,	// SMMLAR
    672711524U,	// SMMLS
    672711530U,	// SMMLSR
    270058353U,	// SMMUL
    270058359U,	// SMMULR
    270058366U,	// SMUAD
    270058372U,	// SMUADX
    270058379U,	// SMULBB
    270058386U,	// SMULBT
    695206809U,	// SMULL
    270058399U,	// SMULTB
    270058406U,	// SMULTT
    270058413U,	// SMULWB
    270058420U,	// SMULWT
    270058427U,	// SMUSD
    270058433U,	// SMUSDX
    2313192392U,	// SRS
    2313716680U,	// SRSW
    672711628U,	// SSAT
    270058449U,	// SSAT16
    270058456U,	// SSAX
    270058461U,	// SSUB16
    270058468U,	// SSUB8
    421135338U,	// STC2L_OFFSET
    689570794U,	// STC2L_OPTION
    421135338U,	// STC2L_POST
    421135338U,	// STC2L_PRE
    421135344U,	// STC2_OFFSET
    689570800U,	// STC2_OPTION
    421135344U,	// STC2_POST
    421135344U,	// STC2_PRE
    421135349U,	// STCL_OFFSET
    689570805U,	// STCL_OPTION
    421135349U,	// STCL_POST
    421135349U,	// STCL_PRE
    421135354U,	// STC_OFFSET
    689570810U,	// STC_OPTION
    421135354U,	// STC_POST
    421135354U,	// STC_PRE
    2305442814U,	// STM
    2417656830U,	// STM_UPD
    672711682U,	// STR
    672711686U,	// STRB
    404227083U,	// STRBT
    404227078U,	// STRB_POST
    404227078U,	// STRB_PRE
    404276241U,	// STRD
    1343751185U,	// STRD_POST
    1343751185U,	// STRD_PRE
    270058518U,	// STREX
    270058524U,	// STREXB
    672711715U,	// STREXD
    270058538U,	// STREXH
    672711729U,	// STRH
    404227126U,	// STRHT
    404227121U,	// STRH_POST
    404227121U,	// STRH_PRE
    404227132U,	// STRT
    404227074U,	// STR_POST
    404227074U,	// STR_PRE
    270058561U,	// SUBSri
    270058561U,	// SUBSrr
    404276289U,	// SUBSrs
    268977222U,	// SUBri
    268993606U,	// SUBrr
    403702854U,	// SUBrs
    806929482U,	// SVC
    270058574U,	// SWP
    270058578U,	// SWPB
    270058583U,	// SXTAB16rr
    672711767U,	// SXTAB16rr_rot
    270058591U,	// SXTABrr
    672711775U,	// SXTABrr_rot
    270058597U,	// SXTAHrr
    672711781U,	// SXTAHrr_rot
    1612235883U,	// SXTB16r
    270058603U,	// SXTB16r_rot
    1612235890U,	// SXTBr
    270058610U,	// SXTBr_rot
    1612235895U,	// SXTHr
    270058615U,	// SXTHr_rot
    166723619U,	// TAILJMPd
    166723619U,	// TAILJMPdND
    166724732U,	// TAILJMPdNDt
    166724732U,	// TAILJMPdt
    166723672U,	// TAILJMPr
    166723672U,	// TAILJMPrND
    149947521U,	// TCRETURNdi
    149947521U,	// TCRETURNdiND
    149947521U,	// TCRETURNri
    149947521U,	// TCRETURNriND
    1612235917U,	// TEQri
    1612235917U,	// TEQrr
    672711821U,	// TEQrs
    1169U,	// TPsoft
    569902244U,	// TRAP
    1612235958U,	// TSTri
    1612235958U,	// TSTrr
    672711862U,	// TSTrs
    270058682U,	// UADD16
    270058689U,	// UADD8
    270058695U,	// UASX
    672711884U,	// UBFX
    270058705U,	// UHADD16
    270058713U,	// UHADD8
    270058720U,	// UHASX
    270058726U,	// UHSAX
    270058732U,	// UHSUB16
    270058740U,	// UHSUB8
    672711931U,	// UMAAL
    695207169U,	// UMLAL
    695207175U,	// UMULL
    270058765U,	// UQADD16
    270058773U,	// UQADD8
    270058780U,	// UQASX
    270058786U,	// UQSAX
    270058792U,	// UQSUB16
    270058800U,	// UQSUB8
    270058807U,	// USAD8
    672711997U,	// USADA8
    672712004U,	// USAT
    270058825U,	// USAT16
    270058832U,	// USAX
    270058837U,	// USUB16
    270058844U,	// USUB8
    270058850U,	// UXTAB16rr
    672712034U,	// UXTAB16rr_rot
    270058858U,	// UXTABrr
    672712042U,	// UXTABrr_rot
    270058864U,	// UXTAHrr
    672712048U,	// UXTAHrr_rot
    1612236150U,	// UXTB16r
    270058870U,	// UXTB16r_rot
    1612236157U,	// UXTBr
    270058877U,	// UXTBr_rot
    1612236162U,	// UXTHr
    270058882U,	// UXTHr_rot
    704677255U,	// VABALsv2i64
    705201543U,	// VABALsv4i32
    705725831U,	// VABALsv8i16
    706250119U,	// VABALuv2i64
    706774407U,	// VABALuv4i32
    707298695U,	// VABALuv8i16
    705725837U,	// VABAsv16i8
    704677261U,	// VABAsv2i32
    705201549U,	// VABAsv4i16
    704677261U,	// VABAsv4i32
    705201549U,	// VABAsv8i16
    705725837U,	// VABAsv8i8
    707298701U,	// VABAuv16i8
    706250125U,	// VABAuv2i32
    706774413U,	// VABAuv4i16
    706250125U,	// VABAuv4i32
    706774413U,	// VABAuv8i16
    707298701U,	// VABAuv8i8
    301991314U,	// VABDLsv2i64
    302515602U,	// VABDLsv4i32
    303039890U,	// VABDLsv8i16
    303564178U,	// VABDLuv2i64
    304088466U,	// VABDLuv4i32
    304612754U,	// VABDLuv8i16
    289523096U,	// VABDfd
    289523096U,	// VABDfq
    303039896U,	// VABDsv16i8
    301991320U,	// VABDsv2i32
    302515608U,	// VABDsv4i16
    301991320U,	// VABDsv4i32
    302515608U,	// VABDsv8i16
    303039896U,	// VABDsv8i8
    304612760U,	// VABDuv16i8
    303564184U,	// VABDuv2i32
    304088472U,	// VABDuv4i16
    303564184U,	// VABDuv4i32
    304088472U,	// VABDuv8i16
    304612760U,	// VABDuv8i8
    1631176093U,	// VABSD
    1631700381U,	// VABSS
    1631700381U,	// VABSfd
    1631700381U,	// VABSfd_sfp
    1631700381U,	// VABSfq
    1645217181U,	// VABSv16i8
    1644168605U,	// VABSv2i32
    1644692893U,	// VABSv4i16
    1644168605U,	// VABSv4i32
    1644692893U,	// VABSv8i16
    1645217181U,	// VABSv8i8
    289523106U,	// VACGEd
    289523106U,	// VACGEq
    289523112U,	// VACGTd
    289523112U,	// VACGTq
    288998830U,	// VADDD
    305137075U,	// VADDHNv2i32
    305661363U,	// VADDHNv4i16
    306185651U,	// VADDHNv8i8
    301991354U,	// VADDLsv2i64
    302515642U,	// VADDLsv4i32
    303039930U,	// VADDLsv8i16
    303564218U,	// VADDLuv2i64
    304088506U,	// VADDLuv4i32
    304612794U,	// VADDLuv8i16
    289523118U,	// VADDS
    301991360U,	// VADDWsv2i64
    302515648U,	// VADDWsv4i32
    303039936U,	// VADDWsv8i16
    303564224U,	// VADDWuv2i64
    304088512U,	// VADDWuv4i32
    304612800U,	// VADDWuv8i16
    289523118U,	// VADDfd
    289523118U,	// VADDfd_sfp
    289523118U,	// VADDfq
    306709934U,	// VADDv16i8
    305137070U,	// VADDv1i64
    305661358U,	// VADDv2i32
    305137070U,	// VADDv2i64
    306185646U,	// VADDv4i16
    305661358U,	// VADDv4i32
    306185646U,	// VADDv8i16
    306709934U,	// VADDv8i8
    270058950U,	// VANDd
    270058950U,	// VANDq
    270058955U,	// VBICd
    270058955U,	// VBICq
    672712144U,	// VBIFd
    672712144U,	// VBIFq
    672712149U,	// VBITd
    672712149U,	// VBITq
    672712154U,	// VBSLd
    672712154U,	// VBSLq
    289523167U,	// VCEQfd
    289523167U,	// VCEQfq
    306709983U,	// VCEQv16i8
    305661407U,	// VCEQv2i32
    306185695U,	// VCEQv4i16
    305661407U,	// VCEQv4i32
    306185695U,	// VCEQv8i16
    306709983U,	// VCEQv8i8
    1648887263U,	// VCEQzv16i8
    1631700447U,	// VCEQzv2f32
    1647838687U,	// VCEQzv2i32
    1631700447U,	// VCEQzv4f32
    1648362975U,	// VCEQzv4i16
    1647838687U,	// VCEQzv4i32
    1648362975U,	// VCEQzv8i16
    1648887263U,	// VCEQzv8i8
    289523172U,	// VCGEfd
    289523172U,	// VCGEfq
    303039972U,	// VCGEsv16i8
    301991396U,	// VCGEsv2i32
    302515684U,	// VCGEsv4i16
    301991396U,	// VCGEsv4i32
    302515684U,	// VCGEsv8i16
    303039972U,	// VCGEsv8i8
    304612836U,	// VCGEuv16i8
    303564260U,	// VCGEuv2i32
    304088548U,	// VCGEuv4i16
    303564260U,	// VCGEuv4i32
    304088548U,	// VCGEuv8i16
    304612836U,	// VCGEuv8i8
    1645217252U,	// VCGEzv16i8
    1631700452U,	// VCGEzv2f32
    1644168676U,	// VCGEzv2i32
    1631700452U,	// VCGEzv4f32
    1644692964U,	// VCGEzv4i16
    1644168676U,	// VCGEzv4i32
    1644692964U,	// VCGEzv8i16
    1645217252U,	// VCGEzv8i8
    289523177U,	// VCGTfd
    289523177U,	// VCGTfq
    303039977U,	// VCGTsv16i8
    301991401U,	// VCGTsv2i32
    302515689U,	// VCGTsv4i16
    301991401U,	// VCGTsv4i32
    302515689U,	// VCGTsv8i16
    303039977U,	// VCGTsv8i8
    304612841U,	// VCGTuv16i8
    303564265U,	// VCGTuv2i32
    304088553U,	// VCGTuv4i16
    303564265U,	// VCGTuv4i32
    304088553U,	// VCGTuv8i16
    304612841U,	// VCGTuv8i8
    1645217257U,	// VCGTzv16i8
    1631700457U,	// VCGTzv2f32
    1644168681U,	// VCGTzv2i32
    1631700457U,	// VCGTzv4f32
    1644692969U,	// VCGTzv4i16
    1644168681U,	// VCGTzv4i32
    1644692969U,	// VCGTzv8i16
    1645217257U,	// VCGTzv8i8
    1645217262U,	// VCLEzv16i8
    1631700462U,	// VCLEzv2f32
    1644168686U,	// VCLEzv2i32
    1631700462U,	// VCLEzv4f32
    1644692974U,	// VCLEzv4i16
    1644168686U,	// VCLEzv4i32
    1644692974U,	// VCLEzv8i16
    1645217262U,	// VCLEzv8i8
    1645217267U,	// VCLSv16i8
    1644168691U,	// VCLSv2i32
    1644692979U,	// VCLSv4i16
    1644168691U,	// VCLSv4i32
    1644692979U,	// VCLSv8i16
    1645217267U,	// VCLSv8i8
    1645217272U,	// VCLTzv16i8
    1631700472U,	// VCLTzv2f32
    1644168696U,	// VCLTzv2i32
    1631700472U,	// VCLTzv4f32
    1644692984U,	// VCLTzv4i16
    1644168696U,	// VCLTzv4i32
    1644692984U,	// VCLTzv8i16
    1645217272U,	// VCLTzv8i8
    1648887293U,	// VCLZv16i8
    1647838717U,	// VCLZv2i32
    1648363005U,	// VCLZv4i16
    1647838717U,	// VCLZv4i32
    1648363005U,	// VCLZv8i16
    1648887293U,	// VCLZv8i8
    1631176194U,	// VCMPD
    1631176199U,	// VCMPED
    1631700487U,	// VCMPES
    826000903U,	// VCMPEZD
    826525191U,	// VCMPEZS
    1631700482U,	// VCMPS
    826000898U,	// VCMPZD
    826525186U,	// VCMPZS
    1649460749U,	// VCNTd
    1649460749U,	// VCNTq
    1649935890U,	// VCVTBHS
    1650460178U,	// VCVTBSH
    1650984472U,	// VCVTDS
    1651508760U,	// VCVTSD
    1649935901U,	// VCVTTHS
    1650460189U,	// VCVTTSH
    1652295192U,	// VCVTf2sd
    1652295192U,	// VCVTf2sd_sfp
    1652295192U,	// VCVTf2sq
    1652819480U,	// VCVTf2ud
    1652819480U,	// VCVTf2ud_sfp
    1652819480U,	// VCVTf2uq
    309970456U,	// VCVTf2xsd
    309970456U,	// VCVTf2xsq
    310494744U,	// VCVTf2xud
    310494744U,	// VCVTf2xuq
    1653343768U,	// VCVTs2fd
    1653343768U,	// VCVTs2fd_sfp
    1653343768U,	// VCVTs2fq
    1653868056U,	// VCVTu2fd
    1653868056U,	// VCVTu2fd_sfp
    1653868056U,	// VCVTu2fq
    311019032U,	// VCVTxs2fd
    311019032U,	// VCVTxs2fq
    311543320U,	// VCVTxu2fd
    311543320U,	// VCVTxu2fq
    288998947U,	// VDIVD
    289523235U,	// VDIVS
    1654179368U,	// VDUP16d
    1654179368U,	// VDUP16q
    1654703656U,	// VDUP32d
    1654703656U,	// VDUP32q
    1649460776U,	// VDUP8d
    1649460776U,	// VDUP8q
    312002088U,	// VDUPLN16d
    312002088U,	// VDUPLN16q
    312526376U,	// VDUPLN32d
    312526376U,	// VDUPLN32q
    307283496U,	// VDUPLN8d
    307283496U,	// VDUPLN8q
    312526376U,	// VDUPLNfd
    312526376U,	// VDUPLNfq
    1654703656U,	// VDUPfd
    1654703656U,	// VDUPfdf
    1654703656U,	// VDUPfq
    1654703656U,	// VDUPfqf
    270059053U,	// VEORd
    270059053U,	// VEORq
    714655282U,	// VEXTd16
    715179570U,	// VEXTd32
    709936690U,	// VEXTd8
    715179570U,	// VEXTdf
    714655282U,	// VEXTq16
    715179570U,	// VEXTq32
    709936690U,	// VEXTq8
    715179570U,	// VEXTqf
    312525016U,	// VGETLNi32
    302514392U,	// VGETLNs16
    303038680U,	// VGETLNs8
    304087256U,	// VGETLNu16
    304611544U,	// VGETLNu8
    303040055U,	// VHADDsv16i8
    301991479U,	// VHADDsv2i32
    302515767U,	// VHADDsv4i16
    301991479U,	// VHADDsv4i32
    302515767U,	// VHADDsv8i16
    303040055U,	// VHADDsv8i8
    304612919U,	// VHADDuv16i8
    303564343U,	// VHADDuv2i32
    304088631U,	// VHADDuv4i16
    303564343U,	// VHADDuv4i32
    304088631U,	// VHADDuv8i16
    304612919U,	// VHADDuv8i8
    303040061U,	// VHSUBsv16i8
    301991485U,	// VHSUBsv2i32
    302515773U,	// VHSUBsv4i16
    301991485U,	// VHSUBsv4i32
    302515773U,	// VHSUBsv8i16
    303040061U,	// VHSUBsv8i8
    304612925U,	// VHSUBuv16i8
    303564349U,	// VHSUBuv2i32
    304088637U,	// VHSUBuv4i16
    303564349U,	// VHSUBuv4i32
    304088637U,	// VHSUBuv8i16
    304612925U,	// VHSUBuv8i8
    313050691U,	// VLD1d16
    1386792515U,	// VLD1d16Q
    2863187523U,	// VLD1d16Q_UPD
    447268419U,	// VLD1d16T
    2997405251U,	// VLD1d16T_UPD
    447268419U,	// VLD1d16_UPD
    313574979U,	// VLD1d32
    1387316803U,	// VLD1d32Q
    2863711811U,	// VLD1d32Q_UPD
    447792707U,	// VLD1d32T
    2997929539U,	// VLD1d32T_UPD
    447792707U,	// VLD1d32_UPD
    314099267U,	// VLD1d64
    1387841091U,	// VLD1d64Q
    0U,	// VLD1d64QPseudo
    0U,	// VLD1d64QPseudo_UPD
    2864236099U,	// VLD1d64Q_UPD
    448316995U,	// VLD1d64T
    0U,	// VLD1d64TPseudo
    0U,	// VLD1d64TPseudo_UPD
    2998453827U,	// VLD1d64T_UPD
    448316995U,	// VLD1d64_UPD
    314623555U,	// VLD1d8
    1388365379U,	// VLD1d8Q
    2864760387U,	// VLD1d8Q_UPD
    448841283U,	// VLD1d8T
    2998978115U,	// VLD1d8T_UPD
    448841283U,	// VLD1d8_UPD
    315377219U,	// VLD1q
    715703875U,	// VLD1q16
    0U,	// VLD1q16Pseudo
    0U,	// VLD1q16Pseudo_UPD
    446449219U,	// VLD1q16_UPD
    716228163U,	// VLD1q32
    0U,	// VLD1q32Pseudo
    0U,	// VLD1q32Pseudo_UPD
    446973507U,	// VLD1q32_UPD
    716752451U,	// VLD1q64
    0U,	// VLD1q64Pseudo
    0U,	// VLD1q64Pseudo_UPD
    449594947U,	// VLD1q64_UPD
    717276739U,	// VLD1q8
    0U,	// VLD1q8Pseudo
    0U,	// VLD1q8Pseudo_UPD
    441730627U,	// VLD1q8_UPD
    2997405256U,	// VLD2LNd16
    3131622984U,	// VLD2LNd16_UPD
    2997929544U,	// VLD2LNd32
    3132147272U,	// VLD2LNd32_UPD
    2998978120U,	// VLD2LNd8
    3133195848U,	// VLD2LNd8_UPD
    2997405256U,	// VLD2LNq16
    3131622984U,	// VLD2LNq16_UPD
    2997405256U,	// VLD2LNq16odd
    2997929544U,	// VLD2LNq32
    3132147272U,	// VLD2LNq32_UPD
    2997929544U,	// VLD2LNq32odd
    715703880U,	// VLD2b16
    1386792520U,	// VLD2b16_UPD
    716228168U,	// VLD2b32
    1387316808U,	// VLD2b32_UPD
    717276744U,	// VLD2b8
    1388365384U,	// VLD2b8_UPD
    715703880U,	// VLD2d16
    0U,	// VLD2d16Pseudo
    0U,	// VLD2d16Pseudo_UPD
    1386792520U,	// VLD2d16_UPD
    716228168U,	// VLD2d32
    0U,	// VLD2d32Pseudo
    0U,	// VLD2d32Pseudo_UPD
    1387316808U,	// VLD2d32_UPD
    717276744U,	// VLD2d8
    0U,	// VLD2d8Pseudo
    0U,	// VLD2d8Pseudo_UPD
    1388365384U,	// VLD2d8_UPD
    1386792520U,	// VLD2q16
    0U,	// VLD2q16Pseudo
    0U,	// VLD2q16Pseudo_UPD
    2863187528U,	// VLD2q16_UPD
    1387316808U,	// VLD2q32
    0U,	// VLD2q32Pseudo
    0U,	// VLD2q32Pseudo_UPD
    2863711816U,	// VLD2q32_UPD
    1388365384U,	// VLD2q8
    0U,	// VLD2q8Pseudo
    0U,	// VLD2q8Pseudo_UPD
    2864760392U,	// VLD2q8_UPD
    3131622989U,	// VLD3LNd16
    3265840717U,	// VLD3LNd16_UPD
    3132147277U,	// VLD3LNd32
    3266365005U,	// VLD3LNd32_UPD
    3133195853U,	// VLD3LNd8
    3267413581U,	// VLD3LNd8_UPD
    3131622989U,	// VLD3LNq16
    3265840717U,	// VLD3LNq16_UPD
    3131622989U,	// VLD3LNq16odd
    3132147277U,	// VLD3LNq32
    3266365005U,	// VLD3LNq32_UPD
    3132147277U,	// VLD3LNq32odd
    447268429U,	// VLD3d16
    0U,	// VLD3d16Pseudo
    0U,	// VLD3d16Pseudo_UPD
    2997405261U,	// VLD3d16_UPD
    447792717U,	// VLD3d32
    0U,	// VLD3d32Pseudo
    0U,	// VLD3d32Pseudo_UPD
    2997929549U,	// VLD3d32_UPD
    448841293U,	// VLD3d8
    0U,	// VLD3d8Pseudo
    0U,	// VLD3d8Pseudo_UPD
    2998978125U,	// VLD3d8_UPD
    447268429U,	// VLD3q16
    0U,	// VLD3q16Pseudo_UPD
    2997405261U,	// VLD3q16_UPD
    0U,	// VLD3q16oddPseudo_UPD
    447792717U,	// VLD3q32
    0U,	// VLD3q32Pseudo_UPD
    2997929549U,	// VLD3q32_UPD
    0U,	// VLD3q32oddPseudo_UPD
    448841293U,	// VLD3q8
    0U,	// VLD3q8Pseudo_UPD
    2998978125U,	// VLD3q8_UPD
    0U,	// VLD3q8oddPseudo_UPD
    3265840722U,	// VLD4LNd16
    3400058450U,	// VLD4LNd16_UPD
    3266365010U,	// VLD4LNd32
    3400582738U,	// VLD4LNd32_UPD
    3267413586U,	// VLD4LNd8
    3401631314U,	// VLD4LNd8_UPD
    3265840722U,	// VLD4LNq16
    3400058450U,	// VLD4LNq16_UPD
    3265840722U,	// VLD4LNq16odd
    3266365010U,	// VLD4LNq32
    3400582738U,	// VLD4LNq32_UPD
    3266365010U,	// VLD4LNq32odd
    1386792530U,	// VLD4d16
    0U,	// VLD4d16Pseudo
    0U,	// VLD4d16Pseudo_UPD
    2863187538U,	// VLD4d16_UPD
    1387316818U,	// VLD4d32
    0U,	// VLD4d32Pseudo
    0U,	// VLD4d32Pseudo_UPD
    2863711826U,	// VLD4d32_UPD
    1388365394U,	// VLD4d8
    0U,	// VLD4d8Pseudo
    0U,	// VLD4d8Pseudo_UPD
    2864760402U,	// VLD4d8_UPD
    1386792530U,	// VLD4q16
    0U,	// VLD4q16Pseudo_UPD
    2863187538U,	// VLD4q16_UPD
    0U,	// VLD4q16oddPseudo_UPD
    1387316818U,	// VLD4q32
    0U,	// VLD4q32Pseudo_UPD
    2863711826U,	// VLD4q32_UPD
    0U,	// VLD4q32oddPseudo_UPD
    1388365394U,	// VLD4q8
    0U,	// VLD4q8Pseudo_UPD
    2864760402U,	// VLD4q8_UPD
    0U,	// VLD4q8oddPseudo_UPD
    2305443415U,	// VLDMD
    2417657431U,	// VLDMD_UPD
    2417657431U,	// VLDMQ
    2305443415U,	// VLDMS
    2417657431U,	// VLDMS_UPD
    315147868U,	// VLDRD
    312526428U,	// VLDRS
    289523297U,	// VMAXfd
    289523297U,	// VMAXfd_sfp
    289523297U,	// VMAXfq
    303040097U,	// VMAXsv16i8
    301991521U,	// VMAXsv2i32
    302515809U,	// VMAXsv4i16
    301991521U,	// VMAXsv4i32
    302515809U,	// VMAXsv8i16
    303040097U,	// VMAXsv8i8
    304612961U,	// VMAXuv16i8
    303564385U,	// VMAXuv2i32
    304088673U,	// VMAXuv4i16
    303564385U,	// VMAXuv4i32
    304088673U,	// VMAXuv8i16
    304612961U,	// VMAXuv8i8
    289523302U,	// VMINfd
    289523302U,	// VMINfd_sfp
    289523302U,	// VMINfq
    303040102U,	// VMINsv16i8
    301991526U,	// VMINsv2i32
    302515814U,	// VMINsv4i16
    301991526U,	// VMINsv4i32
    302515814U,	// VMINsv8i16
    303040102U,	// VMINsv8i8
    304612966U,	// VMINuv16i8
    303564390U,	// VMINuv2i32
    304088678U,	// VMINuv4i16
    303564390U,	// VMINuv4i32
    304088678U,	// VMINuv8i16
    304612966U,	// VMINuv8i8
    691652203U,	// VMLAD
    436242032U,	// VMLALslsv2i32
    436766320U,	// VMLALslsv4i16
    437814896U,	// VMLALsluv2i32
    438339184U,	// VMLALsluv4i16
    704677488U,	// VMLALsv2i64
    705201776U,	// VMLALsv4i32
    705726064U,	// VMLALsv8i16
    706250352U,	// VMLALuv2i64
    706774640U,	// VMLALuv4i32
    707298928U,	// VMLALuv8i16
    692176491U,	// VMLAS
    692176491U,	// VMLAfd
    692176491U,	// VMLAfq
    423741035U,	// VMLAslfd
    423741035U,	// VMLAslfq
    439912043U,	// VMLAslv2i32
    440436331U,	// VMLAslv4i16
    439912043U,	// VMLAslv4i32
    440436331U,	// VMLAslv8i16
    709396075U,	// VMLAv16i8
    708347499U,	// VMLAv2i32
    708871787U,	// VMLAv4i16
    708347499U,	// VMLAv4i32
    708871787U,	// VMLAv8i16
    709396075U,	// VMLAv8i8
    691652214U,	// VMLSD
    436242043U,	// VMLSLslsv2i32
    436766331U,	// VMLSLslsv4i16
    437814907U,	// VMLSLsluv2i32
    438339195U,	// VMLSLsluv4i16
    704677499U,	// VMLSLsv2i64
    705201787U,	// VMLSLsv4i32
    705726075U,	// VMLSLsv8i16
    706250363U,	// VMLSLuv2i64
    706774651U,	// VMLSLuv4i32
    707298939U,	// VMLSLuv8i16
    692176502U,	// VMLSS
    692176502U,	// VMLSfd
    692176502U,	// VMLSfq
    423741046U,	// VMLSslfd
    423741046U,	// VMLSslfq
    439912054U,	// VMLSslv2i32
    440436342U,	// VMLSslv4i16
    439912054U,	// VMLSslv4i32
    440436342U,	// VMLSslv8i16
    709396086U,	// VMLSv16i8
    708347510U,	// VMLSv2i32
    708871798U,	// VMLSv4i16
    708347510U,	// VMLSv4i32
    708871798U,	// VMLSv8i16
    709396086U,	// VMLSv8i8
    1631174872U,	// VMOVD
    270057688U,	// VMOVDRR
    288997592U,	// VMOVDcc
    1612234968U,	// VMOVDneon
    1644168833U,	// VMOVLsv2i64
    1644693121U,	// VMOVLsv4i32
    1645217409U,	// VMOVLsv8i16
    1645741697U,	// VMOVLuv2i64
    1646265985U,	// VMOVLuv4i32
    1646790273U,	// VMOVLuv8i16
    1647314567U,	// VMOVNv2i32
    1647838855U,	// VMOVNv4i16
    1648363143U,	// VMOVNv8i8
    1612234968U,	// VMOVQ
    584056862U,	// VMOVQQ
    584056862U,	// VMOVQQQQ
    270057688U,	// VMOVRRD
    672710872U,	// VMOVRRS
    1612234968U,	// VMOVRS
    1631699160U,	// VMOVS
    1612234968U,	// VMOVSR
    672710872U,	// VMOVSRR
    289521880U,	// VMOVScc
    1649180888U,	// VMOVv16i8
    1647608024U,	// VMOVv1i64
    1648132312U,	// VMOVv2i32
    1647608024U,	// VMOVv2i64
    1648656600U,	// VMOVv4i16
    1648132312U,	// VMOVv4i32
    1648656600U,	// VMOVv8i16
    1649180888U,	// VMOVv8i8
    806928605U,	// VMRS
    853018253U,	// VMSR
    288999058U,	// VMULD
    316671639U,	// VMULLp
    704644759U,	// VMULLslsv2i32
    705169047U,	// VMULLslsv4i16
    706217623U,	// VMULLsluv2i32
    706741911U,	// VMULLsluv4i16
    301991575U,	// VMULLsv2i64
    302515863U,	// VMULLsv4i32
    303040151U,	// VMULLsv8i16
    303564439U,	// VMULLuv2i64
    304088727U,	// VMULLuv4i32
    304613015U,	// VMULLuv8i16
    289523346U,	// VMULS
    289523346U,	// VMULfd
    289523346U,	// VMULfd_sfp
    289523346U,	// VMULfq
    316671634U,	// VMULpd
    316671634U,	// VMULpq
    692176530U,	// VMULslfd
    692176530U,	// VMULslfq
    708314770U,	// VMULslv2i32
    708839058U,	// VMULslv4i16
    708314770U,	// VMULslv4i32
    708839058U,	// VMULslv8i16
    306710162U,	// VMULv16i8
    305661586U,	// VMULv2i32
    306185874U,	// VMULv4i16
    305661586U,	// VMULv4i32
    306185874U,	// VMULv8i16
    306710162U,	// VMULv8i8
    1612236445U,	// VMVNd
    1612236445U,	// VMVNq
    1648133789U,	// VMVNv2i32
    1648658077U,	// VMVNv4i16
    1648133789U,	// VMVNv4i32
    1648658077U,	// VMVNv8i16
    1631176354U,	// VNEGD
    288999074U,	// VNEGDcc
    1631700642U,	// VNEGS
    289523362U,	// VNEGScc
    1631700642U,	// VNEGf32q
    1631700642U,	// VNEGfd
    1631700642U,	// VNEGfd_sfp
    1644693154U,	// VNEGs16d
    1644693154U,	// VNEGs16q
    1644168866U,	// VNEGs32d
    1644168866U,	// VNEGs32q
    1645217442U,	// VNEGs8d
    1645217442U,	// VNEGs8q
    691652263U,	// VNMLAD
    692176551U,	// VNMLAS
    691652269U,	// VNMLSD
    692176557U,	// VNMLSS
    288999091U,	// VNMULD
    289523379U,	// VNMULS
    270059193U,	// VORNd
    270059193U,	// VORNq
    270059198U,	// VORRd
    270059198U,	// VORRq
    303072963U,	// VPADALsv16i8
    302024387U,	// VPADALsv2i32
    302548675U,	// VPADALsv4i16
    302024387U,	// VPADALsv4i32
    302548675U,	// VPADALsv8i16
    303072963U,	// VPADALsv8i8
    304645827U,	// VPADALuv16i8
    303597251U,	// VPADALuv2i32
    304121539U,	// VPADALuv4i16
    303597251U,	// VPADALuv4i32
    304121539U,	// VPADALuv8i16
    304645827U,	// VPADALuv8i8
    1645217482U,	// VPADDLsv16i8
    1644168906U,	// VPADDLsv2i32
    1644693194U,	// VPADDLsv4i16
    1644168906U,	// VPADDLsv4i32
    1644693194U,	// VPADDLsv8i16
    1645217482U,	// VPADDLsv8i8
    1646790346U,	// VPADDLuv16i8
    1645741770U,	// VPADDLuv2i32
    1646266058U,	// VPADDLuv4i16
    1645741770U,	// VPADDLuv4i32
    1646266058U,	// VPADDLuv8i16
    1646790346U,	// VPADDLuv8i8
    289523409U,	// VPADDf
    306185937U,	// VPADDi16
    305661649U,	// VPADDi32
    306710225U,	// VPADDi8
    289523415U,	// VPMAXf
    302515927U,	// VPMAXs16
    301991639U,	// VPMAXs32
    303040215U,	// VPMAXs8
    304088791U,	// VPMAXu16
    303564503U,	// VPMAXu32
    304613079U,	// VPMAXu8
    289523421U,	// VPMINf
    302515933U,	// VPMINs16
    301991645U,	// VPMINs32
    303040221U,	// VPMINs8
    304088797U,	// VPMINu16
    303564509U,	// VPMINu32
    304613085U,	// VPMINu8
    1645217507U,	// VQABSv16i8
    1644168931U,	// VQABSv2i32
    1644693219U,	// VQABSv4i16
    1644168931U,	// VQABSv4i32
    1644693219U,	// VQABSv8i16
    1645217507U,	// VQABSv8i8
    303040233U,	// VQADDsv16i8
    317196009U,	// VQADDsv1i64
    301991657U,	// VQADDsv2i32
    317196009U,	// VQADDsv2i64
    302515945U,	// VQADDsv4i16
    301991657U,	// VQADDsv4i32
    302515945U,	// VQADDsv8i16
    303040233U,	// VQADDsv8i8
    304613097U,	// VQADDuv16i8
    317720297U,	// VQADDuv1i64
    303564521U,	// VQADDuv2i32
    317720297U,	// VQADDuv2i64
    304088809U,	// VQADDuv4i16
    303564521U,	// VQADDuv4i32
    304088809U,	// VQADDuv8i16
    304613097U,	// VQADDuv8i8
    436242159U,	// VQDMLALslv2i32
    436766447U,	// VQDMLALslv4i16
    704677615U,	// VQDMLALv2i64
    705201903U,	// VQDMLALv4i32
    436242167U,	// VQDMLSLslv2i32
    436766455U,	// VQDMLSLslv4i16
    704677623U,	// VQDMLSLv2i64
    705201911U,	// VQDMLSLv4i32
    704644863U,	// VQDMULHslv2i32
    705169151U,	// VQDMULHslv4i16
    704644863U,	// VQDMULHslv4i32
    705169151U,	// VQDMULHslv8i16
    301991679U,	// VQDMULHv2i32
    302515967U,	// VQDMULHv4i16
    301991679U,	// VQDMULHv4i32
    302515967U,	// VQDMULHv8i16
    704644871U,	// VQDMULLslv2i32
    705169159U,	// VQDMULLslv4i16
    301991687U,	// VQDMULLv2i64
    302515975U,	// VQDMULLv4i32
    1659373327U,	// VQMOVNsuv2i32
    1644168975U,	// VQMOVNsuv4i16
    1644693263U,	// VQMOVNsuv8i8
    1659373335U,	// VQMOVNsv2i32
    1644168983U,	// VQMOVNsv4i16
    1644693271U,	// VQMOVNsv8i8
    1659897623U,	// VQMOVNuv2i32
    1645741847U,	// VQMOVNuv4i16
    1646266135U,	// VQMOVNuv8i8
    1645217566U,	// VQNEGv16i8
    1644168990U,	// VQNEGv2i32
    1644693278U,	// VQNEGv4i16
    1644168990U,	// VQNEGv4i32
    1644693278U,	// VQNEGv8i16
    1645217566U,	// VQNEGv8i8
    704644900U,	// VQRDMULHslv2i32
    705169188U,	// VQRDMULHslv4i16
    704644900U,	// VQRDMULHslv4i32
    705169188U,	// VQRDMULHslv8i16
    301991716U,	// VQRDMULHv2i32
    302516004U,	// VQRDMULHv4i16
    301991716U,	// VQRDMULHv4i32
    302516004U,	// VQRDMULHv8i16
    303040301U,	// VQRSHLsv16i8
    317196077U,	// VQRSHLsv1i64
    301991725U,	// VQRSHLsv2i32
    317196077U,	// VQRSHLsv2i64
    302516013U,	// VQRSHLsv4i16
    301991725U,	// VQRSHLsv4i32
    302516013U,	// VQRSHLsv8i16
    303040301U,	// VQRSHLsv8i8
    304613165U,	// VQRSHLuv16i8
    317720365U,	// VQRSHLuv1i64
    303564589U,	// VQRSHLuv2i32
    317720365U,	// VQRSHLuv2i64
    304088877U,	// VQRSHLuv4i16
    303564589U,	// VQRSHLuv4i32
    304088877U,	// VQRSHLuv8i16
    304613165U,	// VQRSHLuv8i8
    317196084U,	// VQRSHRNsv2i32
    301991732U,	// VQRSHRNsv4i16
    302516020U,	// VQRSHRNsv8i8
    317720372U,	// VQRSHRNuv2i32
    303564596U,	// VQRSHRNuv4i16
    304088884U,	// VQRSHRNuv8i8
    317196092U,	// VQRSHRUNv2i32
    301991740U,	// VQRSHRUNv4i16
    302516028U,	// VQRSHRUNv8i8
    303040325U,	// VQSHLsiv16i8
    317196101U,	// VQSHLsiv1i64
    301991749U,	// VQSHLsiv2i32
    317196101U,	// VQSHLsiv2i64
    302516037U,	// VQSHLsiv4i16
    301991749U,	// VQSHLsiv4i32
    302516037U,	// VQSHLsiv8i16
    303040325U,	// VQSHLsiv8i8
    303040331U,	// VQSHLsuv16i8
    317196107U,	// VQSHLsuv1i64
    301991755U,	// VQSHLsuv2i32
    317196107U,	// VQSHLsuv2i64
    302516043U,	// VQSHLsuv4i16
    301991755U,	// VQSHLsuv4i32
    302516043U,	// VQSHLsuv8i16
    303040331U,	// VQSHLsuv8i8
    303040325U,	// VQSHLsv16i8
    317196101U,	// VQSHLsv1i64
    301991749U,	// VQSHLsv2i32
    317196101U,	// VQSHLsv2i64
    302516037U,	// VQSHLsv4i16
    301991749U,	// VQSHLsv4i32
    302516037U,	// VQSHLsv8i16
    303040325U,	// VQSHLsv8i8
    304613189U,	// VQSHLuiv16i8
    317720389U,	// VQSHLuiv1i64
    303564613U,	// VQSHLuiv2i32
    317720389U,	// VQSHLuiv2i64
    304088901U,	// VQSHLuiv4i16
    303564613U,	// VQSHLuiv4i32
    304088901U,	// VQSHLuiv8i16
    304613189U,	// VQSHLuiv8i8
    304613189U,	// VQSHLuv16i8
    317720389U,	// VQSHLuv1i64
    303564613U,	// VQSHLuv2i32
    317720389U,	// VQSHLuv2i64
    304088901U,	// VQSHLuv4i16
    303564613U,	// VQSHLuv4i32
    304088901U,	// VQSHLuv8i16
    304613189U,	// VQSHLuv8i8
    317196114U,	// VQSHRNsv2i32
    301991762U,	// VQSHRNsv4i16
    302516050U,	// VQSHRNsv8i8
    317720402U,	// VQSHRNuv2i32
    303564626U,	// VQSHRNuv4i16
    304088914U,	// VQSHRNuv8i8
    317196121U,	// VQSHRUNv2i32
    301991769U,	// VQSHRUNv4i16
    302516057U,	// VQSHRUNv8i8
    303040353U,	// VQSUBsv16i8
    317196129U,	// VQSUBsv1i64
    301991777U,	// VQSUBsv2i32
    317196129U,	// VQSUBsv2i64
    302516065U,	// VQSUBsv4i16
    301991777U,	// VQSUBsv4i32
    302516065U,	// VQSUBsv8i16
    303040353U,	// VQSUBsv8i8
    304613217U,	// VQSUBuv16i8
    317720417U,	// VQSUBuv1i64
    303564641U,	// VQSUBuv2i32
    317720417U,	// VQSUBuv2i64
    304088929U,	// VQSUBuv4i16
    303564641U,	// VQSUBuv4i32
    304088929U,	// VQSUBuv8i16
    304613217U,	// VQSUBuv8i8
    305137511U,	// VRADDHNv2i32
    305661799U,	// VRADDHNv4i16
    306186087U,	// VRADDHNv8i8
    1645741935U,	// VRECPEd
    1631700847U,	// VRECPEfd
    1631700847U,	// VRECPEfq
    1645741935U,	// VRECPEq
    289523574U,	// VRECPSfd
    289523574U,	// VRECPSfq
    1649461117U,	// VREV16d8
    1649461117U,	// VREV16q8
    1654179716U,	// VREV32d16
    1649461124U,	// VREV32d8
    1654179716U,	// VREV32q16
    1649461124U,	// VREV32q8
    1654179723U,	// VREV64d16
    1654704011U,	// VREV64d32
    1649461131U,	// VREV64d8
    1654704011U,	// VREV64df
    1654179723U,	// VREV64q16
    1654704011U,	// VREV64q32
    1649461131U,	// VREV64q8
    1654704011U,	// VREV64qf
    303040402U,	// VRHADDsv16i8
    301991826U,	// VRHADDsv2i32
    302516114U,	// VRHADDsv4i16
    301991826U,	// VRHADDsv4i32
    302516114U,	// VRHADDsv8i16
    303040402U,	// VRHADDsv8i8
    304613266U,	// VRHADDuv16i8
    303564690U,	// VRHADDuv2i32
    304088978U,	// VRHADDuv4i16
    303564690U,	// VRHADDuv4i32
    304088978U,	// VRHADDuv8i16
    304613266U,	// VRHADDuv8i8
    303040409U,	// VRSHLsv16i8
    317196185U,	// VRSHLsv1i64
    301991833U,	// VRSHLsv2i32
    317196185U,	// VRSHLsv2i64
    302516121U,	// VRSHLsv4i16
    301991833U,	// VRSHLsv4i32
    302516121U,	// VRSHLsv8i16
    303040409U,	// VRSHLsv8i8
    304613273U,	// VRSHLuv16i8
    317720473U,	// VRSHLuv1i64
    303564697U,	// VRSHLuv2i32
    317720473U,	// VRSHLuv2i64
    304088985U,	// VRSHLuv4i16
    303564697U,	// VRSHLuv4i32
    304088985U,	// VRSHLuv8i16
    304613273U,	// VRSHLuv8i8
    305137567U,	// VRSHRNv2i32
    305661855U,	// VRSHRNv4i16
    306186143U,	// VRSHRNv8i8
    303040422U,	// VRSHRsv16i8
    317196198U,	// VRSHRsv1i64
    301991846U,	// VRSHRsv2i32
    317196198U,	// VRSHRsv2i64
    302516134U,	// VRSHRsv4i16
    301991846U,	// VRSHRsv4i32
    302516134U,	// VRSHRsv8i16
    303040422U,	// VRSHRsv8i8
    304613286U,	// VRSHRuv16i8
    317720486U,	// VRSHRuv1i64
    303564710U,	// VRSHRuv2i32
    317720486U,	// VRSHRuv2i64
    304088998U,	// VRSHRuv4i16
    303564710U,	// VRSHRuv4i32
    304088998U,	// VRSHRuv8i16
    304613286U,	// VRSHRuv8i8
    1645741996U,	// VRSQRTEd
    1631700908U,	// VRSQRTEfd
    1631700908U,	// VRSQRTEfq
    1645741996U,	// VRSQRTEq
    289523636U,	// VRSQRTSfd
    289523636U,	// VRSQRTSfq
    705726396U,	// VRSRAsv16i8
    719882172U,	// VRSRAsv1i64
    704677820U,	// VRSRAsv2i32
    719882172U,	// VRSRAsv2i64
    705202108U,	// VRSRAsv4i16
    704677820U,	// VRSRAsv4i32
    705202108U,	// VRSRAsv8i16
    705726396U,	// VRSRAsv8i8
    707299260U,	// VRSRAuv16i8
    720406460U,	// VRSRAuv1i64
    706250684U,	// VRSRAuv2i32
    720406460U,	// VRSRAuv2i64
    706774972U,	// VRSRAuv4i16
    706250684U,	// VRSRAuv4i32
    706774972U,	// VRSRAuv8i16
    707299260U,	// VRSRAuv8i8
    305137602U,	// VRSUBHNv2i32
    305661890U,	// VRSUBHNv4i16
    306186178U,	// VRSUBHNv8i8
    714653912U,	// VSETLNi16
    715178200U,	// VSETLNi32
    709935320U,	// VSETLNi8
    306186186U,	// VSHLLi16
    305661898U,	// VSHLLi32
    306710474U,	// VSHLLi8
    301991882U,	// VSHLLsv2i64
    302516170U,	// VSHLLsv4i32
    303040458U,	// VSHLLsv8i16
    303564746U,	// VSHLLuv2i64
    304089034U,	// VSHLLuv4i32
    304613322U,	// VSHLLuv8i16
    306710480U,	// VSHLiv16i8
    305137616U,	// VSHLiv1i64
    305661904U,	// VSHLiv2i32
    305137616U,	// VSHLiv2i64
    306186192U,	// VSHLiv4i16
    305661904U,	// VSHLiv4i32
    306186192U,	// VSHLiv8i16
    306710480U,	// VSHLiv8i8
    303040464U,	// VSHLsv16i8
    317196240U,	// VSHLsv1i64
    301991888U,	// VSHLsv2i32
    317196240U,	// VSHLsv2i64
    302516176U,	// VSHLsv4i16
    301991888U,	// VSHLsv4i32
    302516176U,	// VSHLsv8i16
    303040464U,	// VSHLsv8i8
    304613328U,	// VSHLuv16i8
    317720528U,	// VSHLuv1i64
    303564752U,	// VSHLuv2i32
    317720528U,	// VSHLuv2i64
    304089040U,	// VSHLuv4i16
    303564752U,	// VSHLuv4i32
    304089040U,	// VSHLuv8i16
    304613328U,	// VSHLuv8i8
    305137621U,	// VSHRNv2i32
    305661909U,	// VSHRNv4i16
    306186197U,	// VSHRNv8i8
    303040475U,	// VSHRsv16i8
    317196251U,	// VSHRsv1i64
    301991899U,	// VSHRsv2i32
    317196251U,	// VSHRsv2i64
    302516187U,	// VSHRsv4i16
    301991899U,	// VSHRsv4i32
    302516187U,	// VSHRsv8i16
    303040475U,	// VSHRsv8i8
    304613339U,	// VSHRuv16i8
    317720539U,	// VSHRuv1i64
    303564763U,	// VSHRuv2i32
    317720539U,	// VSHRuv2i64
    304089051U,	// VSHRuv4i16
    303564763U,	// VSHRuv4i32
    304089051U,	// VSHRuv8i16
    304613339U,	// VSHRuv8i8
    318244376U,	// VSHTOD
    318768664U,	// VSHTOS
    1661732376U,	// VSITOD
    1653343768U,	// VSITOS
    709937120U,	// VSLIv16i8
    717801440U,	// VSLIv1i64
    715180000U,	// VSLIv2i32
    717801440U,	// VSLIv2i64
    714655712U,	// VSLIv4i16
    715180000U,	// VSLIv4i32
    714655712U,	// VSLIv8i16
    709937120U,	// VSLIv8i8
    319407640U,	// VSLTOD
    311019032U,	// VSLTOS
    1631176677U,	// VSQRTD
    1631700965U,	// VSQRTS
    705726443U,	// VSRAsv16i8
    719882219U,	// VSRAsv1i64
    704677867U,	// VSRAsv2i32
    719882219U,	// VSRAsv2i64
    705202155U,	// VSRAsv4i16
    704677867U,	// VSRAsv4i32
    705202155U,	// VSRAsv8i16
    705726443U,	// VSRAsv8i8
    707299307U,	// VSRAuv16i8
    720406507U,	// VSRAuv1i64
    706250731U,	// VSRAuv2i32
    720406507U,	// VSRAuv2i64
    706775019U,	// VSRAuv4i16
    706250731U,	// VSRAuv4i32
    706775019U,	// VSRAuv8i16
    707299307U,	// VSRAuv8i8
    709937136U,	// VSRIv16i8
    717801456U,	// VSRIv1i64
    715180016U,	// VSRIv2i32
    717801456U,	// VSRIv2i64
    714655728U,	// VSRIv4i16
    715180016U,	// VSRIv4i32
    714655728U,	// VSRIv8i16
    709937136U,	// VSRIv8i8
    313034741U,	// VST1d16
    1386776565U,	// VST1d16Q
    2863450101U,	// VST1d16Q_UPD
    447252469U,	// VST1d16T
    2997667829U,	// VST1d16T_UPD
    447530997U,	// VST1d16_UPD
    313559029U,	// VST1d32
    1387300853U,	// VST1d32Q
    2863974389U,	// VST1d32Q_UPD
    447776757U,	// VST1d32T
    2998192117U,	// VST1d32T_UPD
    448055285U,	// VST1d32_UPD
    314083317U,	// VST1d64
    1387825141U,	// VST1d64Q
    0U,	// VST1d64QPseudo
    0U,	// VST1d64QPseudo_UPD
    2864498677U,	// VST1d64Q_UPD
    448301045U,	// VST1d64T
    0U,	// VST1d64TPseudo
    0U,	// VST1d64TPseudo_UPD
    2998716405U,	// VST1d64T_UPD
    448579573U,	// VST1d64_UPD
    314607605U,	// VST1d8
    1388349429U,	// VST1d8Q
    2865022965U,	// VST1d8Q_UPD
    448825333U,	// VST1d8T
    2999240693U,	// VST1d8T_UPD
    449103861U,	// VST1d8_UPD
    315426805U,	// VST1q
    715687925U,	// VST1q16
    0U,	// VST1q16Pseudo
    0U,	// VST1q16Pseudo_UPD
    446515189U,	// VST1q16_UPD
    716212213U,	// VST1q32
    0U,	// VST1q32Pseudo
    0U,	// VST1q32Pseudo_UPD
    447039477U,	// VST1q32_UPD
    716736501U,	// VST1q64
    0U,	// VST1q64Pseudo
    0U,	// VST1q64Pseudo_UPD
    449660917U,	// VST1q64_UPD
    717260789U,	// VST1q8
    0U,	// VST1q8Pseudo
    0U,	// VST1q8Pseudo_UPD
    441796597U,	// VST1q8_UPD
    447252474U,	// VST2LNd16
    2997667834U,	// VST2LNd16_UPD
    447776762U,	// VST2LNd32
    2998192122U,	// VST2LNd32_UPD
    448825338U,	// VST2LNd8
    2999240698U,	// VST2LNd8_UPD
    447252474U,	// VST2LNq16
    2997667834U,	// VST2LNq16_UPD
    447252474U,	// VST2LNq16odd
    447776762U,	// VST2LNq32
    2998192122U,	// VST2LNq32_UPD
    447776762U,	// VST2LNq32odd
    715687930U,	// VST2b16
    1387055098U,	// VST2b16_UPD
    716212218U,	// VST2b32
    1387579386U,	// VST2b32_UPD
    717260794U,	// VST2b8
    1388627962U,	// VST2b8_UPD
    715687930U,	// VST2d16
    0U,	// VST2d16Pseudo
    0U,	// VST2d16Pseudo_UPD
    1387055098U,	// VST2d16_UPD
    716212218U,	// VST2d32
    0U,	// VST2d32Pseudo
    0U,	// VST2d32Pseudo_UPD
    1387579386U,	// VST2d32_UPD
    717260794U,	// VST2d8
    0U,	// VST2d8Pseudo
    0U,	// VST2d8Pseudo_UPD
    1388627962U,	// VST2d8_UPD
    1386776570U,	// VST2q16
    0U,	// VST2q16Pseudo
    0U,	// VST2q16Pseudo_UPD
    2863450106U,	// VST2q16_UPD
    1387300858U,	// VST2q32
    0U,	// VST2q32Pseudo
    0U,	// VST2q32Pseudo_UPD
    2863974394U,	// VST2q32_UPD
    1388349434U,	// VST2q8
    0U,	// VST2q8Pseudo
    0U,	// VST2q8Pseudo_UPD
    2865022970U,	// VST2q8_UPD
    1386776575U,	// VST3LNd16
    2863450111U,	// VST3LNd16_UPD
    1387300863U,	// VST3LNd32
    2863974399U,	// VST3LNd32_UPD
    1388349439U,	// VST3LNd8
    2865022975U,	// VST3LNd8_UPD
    1386776575U,	// VST3LNq16
    2863450111U,	// VST3LNq16_UPD
    1386776575U,	// VST3LNq16odd
    1387300863U,	// VST3LNq32
    2863974399U,	// VST3LNq32_UPD
    1387300863U,	// VST3LNq32odd
    447252479U,	// VST3d16
    0U,	// VST3d16Pseudo
    0U,	// VST3d16Pseudo_UPD
    2997667839U,	// VST3d16_UPD
    447776767U,	// VST3d32
    0U,	// VST3d32Pseudo
    0U,	// VST3d32Pseudo_UPD
    2998192127U,	// VST3d32_UPD
    448825343U,	// VST3d8
    0U,	// VST3d8Pseudo
    0U,	// VST3d8Pseudo_UPD
    2999240703U,	// VST3d8_UPD
    447252479U,	// VST3q16
    0U,	// VST3q16Pseudo_UPD
    2997667839U,	// VST3q16_UPD
    0U,	// VST3q16oddPseudo_UPD
    447776767U,	// VST3q32
    0U,	// VST3q32Pseudo_UPD
    2998192127U,	// VST3q32_UPD
    0U,	// VST3q32oddPseudo_UPD
    448825343U,	// VST3q8
    0U,	// VST3q8Pseudo_UPD
    2999240703U,	// VST3q8_UPD
    0U,	// VST3q8oddPseudo_UPD
    2997389316U,	// VST4LNd16
    3131885572U,	// VST4LNd16_UPD
    2997913604U,	// VST4LNd32
    3132409860U,	// VST4LNd32_UPD
    2998962180U,	// VST4LNd8
    3133458436U,	// VST4LNd8_UPD
    2997389316U,	// VST4LNq16
    3131885572U,	// VST4LNq16_UPD
    2997389316U,	// VST4LNq16odd
    2997913604U,	// VST4LNq32
    3132409860U,	// VST4LNq32_UPD
    2997913604U,	// VST4LNq32odd
    1386776580U,	// VST4d16
    0U,	// VST4d16Pseudo
    0U,	// VST4d16Pseudo_UPD
    2863450116U,	// VST4d16_UPD
    1387300868U,	// VST4d32
    0U,	// VST4d32Pseudo
    0U,	// VST4d32Pseudo_UPD
    2863974404U,	// VST4d32_UPD
    1388349444U,	// VST4d8
    0U,	// VST4d8Pseudo
    0U,	// VST4d8Pseudo_UPD
    2865022980U,	// VST4d8_UPD
    1386776580U,	// VST4q16
    0U,	// VST4q16Pseudo_UPD
    2863450116U,	// VST4q16_UPD
    0U,	// VST4q16oddPseudo_UPD
    1387300868U,	// VST4q32
    0U,	// VST4q32Pseudo_UPD
    2863974404U,	// VST4q32_UPD
    0U,	// VST4q32oddPseudo_UPD
    1388349444U,	// VST4q8
    0U,	// VST4q8Pseudo_UPD
    2865022980U,	// VST4q8_UPD
    0U,	// VST4q8oddPseudo_UPD
    2305443849U,	// VSTMD
    2417657865U,	// VSTMD_UPD
    2417657865U,	// VSTMQ
    2305443849U,	// VSTMS
    2417657865U,	// VSTMS_UPD
    315148302U,	// VSTRD
    312526862U,	// VSTRS
    288999443U,	// VSUBD
    305137688U,	// VSUBHNv2i32
    305661976U,	// VSUBHNv4i16
    306186264U,	// VSUBHNv8i8
    301991967U,	// VSUBLsv2i64
    302516255U,	// VSUBLsv4i32
    303040543U,	// VSUBLsv8i16
    303564831U,	// VSUBLuv2i64
    304089119U,	// VSUBLuv4i32
    304613407U,	// VSUBLuv8i16
    289523731U,	// VSUBS
    301991973U,	// VSUBWsv2i64
    302516261U,	// VSUBWsv4i32
    303040549U,	// VSUBWsv8i16
    303564837U,	// VSUBWuv2i64
    304089125U,	// VSUBWuv4i32
    304613413U,	// VSUBWuv8i16
    289523731U,	// VSUBfd
    289523731U,	// VSUBfd_sfp
    289523731U,	// VSUBfq
    306710547U,	// VSUBv16i8
    305137683U,	// VSUBv1i64
    305661971U,	// VSUBv2i32
    305137683U,	// VSUBv2i64
    306186259U,	// VSUBv4i16
    305661971U,	// VSUBv4i32
    306186259U,	// VSUBv8i16
    306710547U,	// VSUBv8i8
    1612236843U,	// VSWPd
    1612236843U,	// VSWPq
    307284016U,	// VTBL1
    709937200U,	// VTBL2
    441501744U,	// VTBL3
    1381025840U,	// VTBL4
    709937205U,	// VTBX1
    441501749U,	// VTBX2
    1381025845U,	// VTBX3
    2991638581U,	// VTBX4
    319817240U,	// VTOSHD
    320341528U,	// VTOSHS
    1663305786U,	// VTOSIRD
    1652295738U,	// VTOSIRS
    1663305240U,	// VTOSIZD
    1652295192U,	// VTOSIZS
    320980504U,	// VTOSLD
    309970456U,	// VTOSLS
    321390104U,	// VTOUHD
    321914392U,	// VTOUHS
    1664878650U,	// VTOUIRD
    1652820026U,	// VTOUIRS
    1664878104U,	// VTOUIZD
    1652819480U,	// VTOUIZS
    322553368U,	// VTOULD
    310494744U,	// VTOULS
    714655808U,	// VTRNd16
    715180096U,	// VTRNd32
    709937216U,	// VTRNd8
    714655808U,	// VTRNq16
    715180096U,	// VTRNq32
    709937216U,	// VTRNq8
    307284037U,	// VTSTv16i8
    312526917U,	// VTSTv2i32
    312002629U,	// VTSTv4i16
    312526917U,	// VTSTv4i32
    312002629U,	// VTSTv8i16
    307284037U,	// VTSTv8i8
    322962968U,	// VUHTOD
    323487256U,	// VUHTOS
    1666450968U,	// VUITOD
    1653868056U,	// VUITOS
    324126232U,	// VULTOD
    311543320U,	// VULTOS
    714655818U,	// VUZPd16
    715180106U,	// VUZPd32
    709937226U,	// VUZPd8
    714655818U,	// VUZPq16
    715180106U,	// VUZPq32
    709937226U,	// VUZPq8
    714655823U,	// VZIPd16
    715180111U,	// VZIPd32
    709937231U,	// VZIPd8
    714655823U,	// VZIPq16
    715180111U,	// VZIPq32
    709937231U,	// VZIPq8
    1223690324U,	// WFE
    1223690328U,	// WFI
    1223690332U,	// YIELD
    3491282961U,	// t2ADCSri
    3545874449U,	// t2ADCSrr
    3680092177U,	// t2ADCSrs
    3491282961U,	// t2ADCri
    3545874449U,	// t2ADCrr
    3680092177U,	// t2ADCrs
    324648981U,	// t2ADDSri
    324648981U,	// t2ADDSrr
    727302165U,	// t2ADDSrs
    3545874458U,	// t2ADDrSPi
    270059618U,	// t2ADDrSPi12
    3680092186U,	// t2ADDrSPs
    3545874458U,	// t2ADDri
    270059618U,	// t2ADDri12
    3545874458U,	// t2ADDrr
    3680092186U,	// t2ADDrs
    324651111U,	// t2ANDSri
    324651111U,	// t2ANDSrr
    727304295U,	// t2ANDSrs
    3491282975U,	// t2ANDri
    3545874463U,	// t2ANDrr
    3680092191U,	// t2ANDrs
    3545876588U,	// t2ASRri
    3545876588U,	// t2ASRrr
    149947516U,	// t2B
    270057510U,	// t2BFC
    672710698U,	// t2BFI
    3491282990U,	// t2BICri
    3545874478U,	// t2BICrr
    3680092206U,	// t2BICrs
    190840942U,	// t2BR_JT
    806928519U,	// t2BXJ
    861667470U,	// t2Bcc
    1223688347U,	// t2CLREX
    1612234913U,	// t2CLZ
    1666826405U,	// t2CMNzri
    1666826405U,	// t2CMNzrr
    324649125U,	// t2CMNzrs
    1666826409U,	// t2CMPri
    1666826409U,	// t2CMPrr
    324649129U,	// t2CMPrs
    1666826409U,	// t2CMPzri
    1666826409U,	// t2CMPzrr
    324649129U,	// t2CMPzrs
    1879048365U,	// t2CPS
    806928561U,	// t2DBG
    1265107138U,	// t2DMBish
    1265631426U,	// t2DMBishst
    1266155714U,	// t2DMBnsh
    1266680002U,	// t2DMBnshst
    1267204290U,	// t2DMBosh
    1267728578U,	// t2DMBoshst
    1268252866U,	// t2DMBst
    194U,	// t2DMBsy
    1265107147U,	// t2DSBish
    1265631435U,	// t2DSBishst
    1266155723U,	// t2DSBnsh
    1266680011U,	// t2DSBnshst
    1267204299U,	// t2DSBosh
    1267728587U,	// t2DSBoshst
    1268252875U,	// t2DSBst
    203U,	// t2DSBsy
    3491283156U,	// t2EORri
    3545874644U,	// t2EORrr
    3680092372U,	// t2EORrs
    1223688418U,	// t2ISBsy
    3758098544U,	// t2IT
    2208303219U,	// t2Int_eh_sjlj_setjmp
    2208303219U,	// t2Int_eh_sjlj_setjmp_nofp
    2305655049U,	// t2LDM
    2477261065U,	// t2LDM_RET
    2477261065U,	// t2LDM_UPD
    270057750U,	// t2LDRBT
    672710929U,	// t2LDRB_POST
    672710929U,	// t2LDRB_PRE
    324649233U,	// t2LDRBi12
    270057745U,	// t2LDRBi8
    1666826513U,	// t2LDRBpci
    727302417U,	// t2LDRBs
    672710940U,	// t2LDRD_POST
    672710940U,	// t2LDRD_PRE
    672710940U,	// t2LDRDi8
    270057756U,	// t2LDRDpci
    1612235041U,	// t2LDREX
    1612235047U,	// t2LDREXB
    270057774U,	// t2LDREXD
    1612235061U,	// t2LDREXH
    270057793U,	// t2LDRHT
    672710972U,	// t2LDRH_POST
    672710972U,	// t2LDRH_PRE
    324649276U,	// t2LDRHi12
    270057788U,	// t2LDRHi8
    1666826556U,	// t2LDRHpci
    727302460U,	// t2LDRHs
    270057805U,	// t2LDRSBT
    672710983U,	// t2LDRSB_POST
    672710983U,	// t2LDRSB_PRE
    324649287U,	// t2LDRSBi12
    270057799U,	// t2LDRSBi8
    1666826567U,	// t2LDRSBpci
    727302471U,	// t2LDRSBs
    270057818U,	// t2LDRSHT
    672710996U,	// t2LDRSH_POST
    672710996U,	// t2LDRSH_PRE
    324649300U,	// t2LDRSHi12
    270057812U,	// t2LDRSHi8
    1666826580U,	// t2LDRSHpci
    727302484U,	// t2LDRSHs
    270057825U,	// t2LDRT
    672710925U,	// t2LDR_POST
    672710925U,	// t2LDR_PRE
    324649229U,	// t2LDRi12
    270057741U,	// t2LDRi8
    1666826509U,	// t2LDRpci
    598736926U,	// t2LDRpci_pic
    727302413U,	// t2LDRs
    1667088742U,	// t2LEApcrel
    324911462U,	// t2LEApcrelJT
    3545876600U,	// t2LSLri
    3545876600U,	// t2LSLrr
    3545876604U,	// t2LSRri
    3545876604U,	// t2LSRrr
    672711042U,	// t2MLA
    672711046U,	// t2MLS
    727304300U,	// t2MOVCCasr
    324649354U,	// t2MOVCCi
    727304312U,	// t2MOVCClsl
    727304316U,	// t2MOVCClsr
    324649354U,	// t2MOVCCr
    727304320U,	// t2MOVCCror
    270057870U,	// t2MOVTi16
    3948528010U,	// t2MOVi
    1612235155U,	// t2MOVi16
    1612235155U,	// t2MOVi32imm
    3948528010U,	// t2MOVr
    3893938308U,	// t2MOVrx
    1666828424U,	// t2MOVsra_flag
    1666828429U,	// t2MOVsrl_flag
    806928821U,	// t2MRS
    806928821U,	// t2MRSsys
    1636352441U,	// t2MSR
    1636876729U,	// t2MSRsys
    270057917U,	// t2MUL
    3893936577U,	// t2MVNi
    3948528065U,	// t2MVNr
    3545874881U,	// t2MVNs
    1270350277U,	// t2NOP
    3491285138U,	// t2ORNri
    3491285138U,	// t2ORNrr
    3625502866U,	// t2ORNrs
    3491283401U,	// t2ORRri
    3545874889U,	// t2ORRrr
    3680092617U,	// t2ORRrs
    672711119U,	// t2PKHBT
    672711125U,	// t2PKHTB
    1673529494U,	// t2PLDWi12
    1673758870U,	// t2PLDWi8
    1674053782U,	// t2PLDWpci
    1673529494U,	// t2PLDWr
    331352214U,	// t2PLDWs
    1673529499U,	// t2PLDi12
    1673758875U,	// t2PLDi8
    1674053787U,	// t2PLDpci
    1673529499U,	// t2PLDr
    331352219U,	// t2PLDs
    1673529503U,	// t2PLIi12
    1673758879U,	// t2PLIi8
    1674053791U,	// t2PLIpci
    1673529503U,	// t2PLIr
    331352223U,	// t2PLIs
    270057982U,	// t2QADD
    270057987U,	// t2QADD16
    270057994U,	// t2QADD8
    270058000U,	// t2QASX
    270058005U,	// t2QDADD
    270058011U,	// t2QDSUB
    270058017U,	// t2QSAX
    270058022U,	// t2QSUB
    270058027U,	// t2QSUB16
    270058034U,	// t2QSUB8
    1612235320U,	// t2RBIT
    1666826813U,	// t2REV
    1666826817U,	// t2REV16
    1666826823U,	// t2REVSH
    806930595U,	// t2RFEDB
    806930601U,	// t2RFEDBW
    806930607U,	// t2RFEIA
    806930607U,	// t2RFEIAW
    3545876608U,	// t2RORri
    3545876608U,	// t2RORrr
    324649553U,	// t2RSBSri
    672711249U,	// t2RSBSrs
    3545875030U,	// t2RSBri
    3491283542U,	// t2RSBrr
    3625501270U,	// t2RSBrs
    270058084U,	// t2SADD16
    270058091U,	// t2SADD8
    270058097U,	// t2SASX
    3491283580U,	// t2SBCSri
    3545875068U,	// t2SBCSrr
    3680092796U,	// t2SBCSrs
    3491283580U,	// t2SBCri
    3545875068U,	// t2SBCrr
    3680092796U,	// t2SBCrs
    672711296U,	// t2SBFX
    270059701U,	// t2SDIV
    270058117U,	// t2SEL
    1270350493U,	// t2SEV
    270058145U,	// t2SHADD16
    270058153U,	// t2SHADD8
    270058160U,	// t2SHASX
    270058166U,	// t2SHSAX
    270058172U,	// t2SHSUB16
    270058180U,	// t2SHSUB8
    806929099U,	// t2SMC
    672711375U,	// t2SMLABB
    672711382U,	// t2SMLABT
    672711389U,	// t2SMLAD
    672711395U,	// t2SMLADX
    672711402U,	// t2SMLAL
    672711408U,	// t2SMLALBB
    672711416U,	// t2SMLALBT
    672711424U,	// t2SMLALD
    672711431U,	// t2SMLALDX
    672711439U,	// t2SMLALTB
    672711447U,	// t2SMLALTT
    672711455U,	// t2SMLATB
    672711462U,	// t2SMLATT
    672711469U,	// t2SMLAWB
    672711476U,	// t2SMLAWT
    672711483U,	// t2SMLSD
    672711489U,	// t2SMLSDX
    672711496U,	// t2SMLSLD
    672711503U,	// t2SMLSLDX
    672711511U,	// t2SMMLA
    672711517U,	// t2SMMLAR
    672711524U,	// t2SMMLS
    672711530U,	// t2SMMLSR
    270058353U,	// t2SMMUL
    270058359U,	// t2SMMULR
    270058366U,	// t2SMUAD
    270058372U,	// t2SMUADX
    270058379U,	// t2SMULBB
    270058386U,	// t2SMULBT
    672711577U,	// t2SMULL
    270058399U,	// t2SMULTB
    270058406U,	// t2SMULTT
    270058413U,	// t2SMULWB
    270058420U,	// t2SMULWT
    270058427U,	// t2SMUSD
    270058433U,	// t2SMUSDX
    836815034U,	// t2SRSDB
    837339322U,	// t2SRSDBW
    836815040U,	// t2SRSIA
    837339328U,	// t2SRSIAW
    672711628U,	// t2SSAT
    270058449U,	// t2SSAT16
    270058456U,	// t2SSAX
    270058461U,	// t2SSUB16
    270058468U,	// t2SSUB8
    2305655806U,	// t2STM
    2477261822U,	// t2STM_UPD
    270058507U,	// t2STRBT
    672662534U,	// t2STRB_POST
    672662534U,	// t2STRB_PRE
    324649990U,	// t2STRBi12
    270058502U,	// t2STRBi8
    727303174U,	// t2STRBs
    672711697U,	// t2STRD_POST
    672711697U,	// t2STRD_PRE
    672711697U,	// t2STRDi8
    270058518U,	// t2STREX
    270058524U,	// t2STREXB
    672711715U,	// t2STREXD
    270058538U,	// t2STREXH
    270058550U,	// t2STRHT
    672662577U,	// t2STRH_POST
    672662577U,	// t2STRH_PRE
    324650033U,	// t2STRHi12
    270058545U,	// t2STRHi8
    727303217U,	// t2STRHs
    270058556U,	// t2STRT
    672662530U,	// t2STR_POST
    672662530U,	// t2STR_PRE
    324649986U,	// t2STRi12
    270058498U,	// t2STRi8
    727303170U,	// t2STRs
    324650049U,	// t2SUBSri
    324650049U,	// t2SUBSrr
    727303233U,	// t2SUBSrs
    3545875526U,	// t2SUBrSPi
    270059718U,	// t2SUBrSPi12
    3625501766U,	// t2SUBrSPs
    3545875526U,	// t2SUBri
    270059718U,	// t2SUBri12
    3545875526U,	// t2SUBrr
    3680093254U,	// t2SUBrs
    270058583U,	// t2SXTAB16rr
    672711767U,	// t2SXTAB16rr_rot
    270058591U,	// t2SXTABrr
    672711775U,	// t2SXTABrr_rot
    270058597U,	// t2SXTAHrr
    672711781U,	// t2SXTAHrr_rot
    1612235883U,	// t2SXTB16r
    270058603U,	// t2SXTB16r_rot
    1666827378U,	// t2SXTBr
    324650098U,	// t2SXTBr_rot
    1666827383U,	// t2SXTHr
    324650103U,	// t2SXTHr_rot
    4026534091U,	// t2TBB
    1673529552U,	// t2TBBgen
    4026534100U,	// t2TBH
    1673529561U,	// t2TBHgen
    1666827405U,	// t2TEQri
    1666827405U,	// t2TEQrr
    324650125U,	// t2TEQrs
    1169U,	// t2TPsoft
    1666827446U,	// t2TSTri
    1666827446U,	// t2TSTrr
    324650166U,	// t2TSTrs
    270058682U,	// t2UADD16
    270058689U,	// t2UADD8
    270058695U,	// t2UASX
    672711884U,	// t2UBFX
    270059741U,	// t2UDIV
    270058705U,	// t2UHADD16
    270058713U,	// t2UHADD8
    270058720U,	// t2UHASX
    270058726U,	// t2UHSAX
    270058732U,	// t2UHSUB16
    270058740U,	// t2UHSUB8
    672711931U,	// t2UMAAL
    672711937U,	// t2UMLAL
    672711943U,	// t2UMULL
    270058765U,	// t2UQADD16
    270058773U,	// t2UQADD8
    270058780U,	// t2UQASX
    270058786U,	// t2UQSAX
    270058792U,	// t2UQSUB16
    270058800U,	// t2UQSUB8
    270058807U,	// t2USAD8
    672711997U,	// t2USADA8
    672712004U,	// t2USAT
    270058825U,	// t2USAT16
    270058832U,	// t2USAX
    270058837U,	// t2USUB16
    270058844U,	// t2USUB8
    270058850U,	// t2UXTAB16rr
    672712034U,	// t2UXTAB16rr_rot
    270058858U,	// t2UXTABrr
    672712042U,	// t2UXTABrr_rot
    270058864U,	// t2UXTAHrr
    672712048U,	// t2UXTAHrr_rot
    1612236150U,	// t2UXTB16r
    270058870U,	// t2UXTB16r_rot
    1666827645U,	// t2UXTBr
    324650365U,	// t2UXTBr_rot
    1666827650U,	// t2UXTHr
    324650370U,	// t2UXTHr_rot
    1270351956U,	// t2WFE
    1270351960U,	// t2WFI
    1270351964U,	// t2YIELD
    4224778257U,	// tADC
    270057498U,	// tADDhirr
    4224745498U,	// tADDi3
    4224778266U,	// tADDi8
    198705392U,	// tADDrPCi
    134250736U,	// tADDrSP
    134217968U,	// tADDrSPi
    4224745498U,	// tADDrr
    134611184U,	// tADDspi
    134250736U,	// tADDspr
    601882654U,	// tADJCALLSTACKDOWN
    602406942U,	// tADJCALLSTACKUP
    4224778271U,	// tAND
    4224747628U,	// tASRri
    4224780396U,	// tASRrr
    149946403U,	// tB
    4224778286U,	// tBIC
    149948642U,	// tBKPT
    939524151U,	// tBL
    939524155U,	// tBLXi
    939524155U,	// tBLXi_r9
    149946427U,	// tBLXr
    149946427U,	// tBLXr_r9
    939524151U,	// tBLr9
    149946478U,	// tBRIND
    200278126U,	// tBR_JTr
    149946487U,	// tBX
    2280U,	// tBX_RET
    149946456U,	// tBX_RET_vararg
    149946487U,	// tBXr9
    806928526U,	// tBcc
    136200247U,	// tBfar
    134220014U,	// tCBNZ
    134220020U,	// tCBZ
    1612234917U,	// tCMNz
    1612234921U,	// tCMPhir
    1612234921U,	// tCMPi8
    1612234921U,	// tCMPr
    1612234921U,	// tCMPzhir
    1612234921U,	// tCMPzi8
    1612234921U,	// tCMPzr
    1879048365U,	// tCPS
    4224778452U,	// tEOR
    2214070521U,	// tInt_eh_sjlj_longjmp
    2208303219U,	// tInt_eh_sjlj_setjmp
    2305442057U,	// tLDM
    2417656073U,	// tLDM_UPD
    672710925U,	// tLDR
    672710929U,	// tLDRB
    672710929U,	// tLDRBi
    672710972U,	// tLDRH
    672710972U,	// tLDRHi
    270057799U,	// tLDRSB
    270057812U,	// tLDRSH
    1612235021U,	// tLDRcp
    672710925U,	// tLDRi
    1677721869U,	// tLDRpci
    604504094U,	// tLDRpci_pic
    270057741U,	// tLDRspi
    1612235110U,	// tLEApcrel
    270057830U,	// tLEApcrelJT
    4224747640U,	// tLSLri
    4224780408U,	// tLSLrr
    4224747644U,	// tLSRri
    4224780412U,	// tLSRrr
    270057866U,	// tMOVCCi
    270057866U,	// tMOVCCr
    605028382U,	// tMOVCCr_pseudo
    134220030U,	// tMOVSr
    134219891U,	// tMOVgpr2gpr
    134219891U,	// tMOVgpr2tgpr
    4229693834U,	// tMOVi8
    134219891U,	// tMOVr
    134219891U,	// tMOVtgpr2gpr
    4224778685U,	// tMUL
    4229693889U,	// tMVN
    1223688645U,	// tNOP
    4224778697U,	// tORR
    2619343309U,	// tPICADD
    1209960708U,	// tPOP
    1209960708U,	// tPOP_RET
    1209960712U,	// tPUSH
    1612235325U,	// tREV
    1612235329U,	// tREV16
    1612235335U,	// tREVSH
    4224780416U,	// tROR
    4229677654U,	// tRSB
    270057741U,	// tRestore
    4224778876U,	// tSBC
    649U,	// tSETENDBE
    659U,	// tSETENDLE
    1223688861U,	// tSEV
    2417656830U,	// tSTM_UPD
    672711682U,	// tSTR
    672711686U,	// tSTRB
    672711686U,	// tSTRBi
    672711729U,	// tSTRH
    672711729U,	// tSTRHi
    672711682U,	// tSTRi
    270058498U,	// tSTRspi
    4224746566U,	// tSUBi3
    4224779334U,	// tSUBi8
    4224746566U,	// tSUBrr
    134613261U,	// tSUBspi
    806929482U,	// tSVC
    1612235890U,	// tSXTB
    1612235895U,	// tSXTH
    270058498U,	// tSpill
    1169U,	// tTPsoft
    569903378U,	// tTRAP
    1612235958U,	// tTST
    1612236157U,	// tUXTB
    1612236162U,	// tUXTH
    1223690324U,	// tWFE
    1223690328U,	// tWFI
    1223690332U,	// tYIELD
    0U
  };

  const char *AsmStrs = 
    "DBG_VALUE\000adcs\t\000adc\000adds\000add\000\000and\000b\t\000bfc\000b"
    "fi\000bic\000bkpt\000bl\t\000blx\t\000bl\000mov\tlr, pc\n\tmov\tpc, \000"
    "bx\t\000add\tpc, \000ldr\tpc, \000mov\tpc, \000mov\tlr, pc\n\tbx\t\000b"
    "xj\000bx\000b\000cdp\000cdp2\tp\000clrex\000clz\000cmn\000cmp\000cps\000"
    "dbg\000mcr\tp15, 0, \000dmb\000dmb\t\000dsb\000dsb\t\000eor\000vmov\000"
    "vmrs\000isb\000ldr\tsp, [\000add\t\000ldc2l\000ldc2\000ldcl\000ldc\000l"
    "dm\000ldr\000ldrb\000ldrbt\000ldrd\000ldrex\000ldrexb\000ldrexd\000ldre"
    "xh\000ldrh\000ldrht\000ldrsb\000ldrsbt\000ldrsh\000ldrsht\000ldrt\000ad"
    "r\000mcr\000mcr2\tp\000mcrr\000mcrr2\tp\000mla\000mls\000mov\000movt\000"
    "movw\000movs\000mrc\000mrc2\tp\000mrrc\000mrrc2\tp\000mrs\000msr\000mul"
    "\000mvn\000nop\000orr\000\n\000pkhbt\000pkhtb\000pldw\t[\000pldw\t\000p"
    "ld\t[\000pld\t\000pli\t[\000pli\t\000qadd\000qadd16\000qadd8\000qasx\000"
    "qdadd\000qdsub\000qsax\000qsub\000qsub16\000qsub8\000rbit\000rev\000rev"
    "16\000revsh\000rfe\000rsbs\000rsb\000rscs\t\000rsc\000sadd16\000sadd8\000"
    "sasx\000sbcs\t\000sbc\000sbfx\000sel\000setend\tbe\000setend\tle\000sev"
    "\000shadd16\000shadd8\000shasx\000shsax\000shsub16\000shsub8\000smc\000"
    "smlabb\000smlabt\000smlad\000smladx\000smlal\000smlalbb\000smlalbt\000s"
    "mlald\000smlaldx\000smlaltb\000smlaltt\000smlatb\000smlatt\000smlawb\000"
    "smlawt\000smlsd\000smlsdx\000smlsld\000smlsldx\000smmla\000smmlar\000sm"
    "mls\000smmlsr\000smmul\000smmulr\000smuad\000smuadx\000smulbb\000smulbt"
    "\000smull\000smultb\000smultt\000smulwb\000smulwt\000smusd\000smusdx\000"
    "srs\000ssat\000ssat16\000ssax\000ssub16\000ssub8\000stc2l\000stc2\000st"
    "cl\000stc\000stm\000str\000strb\000strbt\000strd\000strex\000strexb\000"
    "strexd\000strexh\000strh\000strht\000strt\000subs\000sub\000svc\000swp\000"
    "swpb\000sxtab16\000sxtab\000sxtah\000sxtb16\000sxtb\000sxth\000b.w\t\000"
    "@TC_RETURN\t\000teq\000bl\t__aeabi_read_tp\000.long 0xe7ffdefe \000tst\000"
    "uadd16\000uadd8\000uasx\000ubfx\000uhadd16\000uhadd8\000uhasx\000uhsax\000"
    "uhsub16\000uhsub8\000umaal\000umlal\000umull\000uqadd16\000uqadd8\000uq"
    "asx\000uqsax\000uqsub16\000uqsub8\000usad8\000usada8\000usat\000usat16\000"
    "usax\000usub16\000usub8\000uxtab16\000uxtab\000uxtah\000uxtb16\000uxtb\000"
    "uxth\000vabal\000vaba\000vabdl\000vabd\000vabs\000vacge\000vacgt\000vad"
    "d\000vaddhn\000vaddl\000vaddw\000vand\000vbic\000vbif\000vbit\000vbsl\000"
    "vceq\000vcge\000vcgt\000vcle\000vcls\000vclt\000vclz\000vcmp\000vcmpe\000"
    "vcnt\000vcvtb\000vcvt\000vcvtt\000vdiv\000vdup\000veor\000vext\000vhadd"
    "\000vhsub\000vld1\000vld2\000vld3\000vld4\000vldm\000vldr\000vmax\000vm"
    "in\000vmla\000vmlal\000vmls\000vmlsl\000vmovl\000vmovn\000vmsr\000vmul\000"
    "vmull\000vmvn\000vneg\000vnmla\000vnmls\000vnmul\000vorn\000vorr\000vpa"
    "dal\000vpaddl\000vpadd\000vpmax\000vpmin\000vqabs\000vqadd\000vqdmlal\000"
    "vqdmlsl\000vqdmulh\000vqdmull\000vqmovun\000vqmovn\000vqneg\000vqrdmulh"
    "\000vqrshl\000vqrshrn\000vqrshrun\000vqshl\000vqshlu\000vqshrn\000vqshr"
    "un\000vqsub\000vraddhn\000vrecpe\000vrecps\000vrev16\000vrev32\000vrev6"
    "4\000vrhadd\000vrshl\000vrshrn\000vrshr\000vrsqrte\000vrsqrts\000vrsra\000"
    "vrsubhn\000vshll\000vshl\000vshrn\000vshr\000vsli\000vsqrt\000vsra\000v"
    "sri\000vst1\000vst2\000vst3\000vst4\000vstm\000vstr\000vsub\000vsubhn\000"
    "vsubl\000vsubw\000vswp\000vtbl\000vtbx\000vcvtr\000vtrn\000vtst\000vuzp"
    "\000vzip\000wfe\000wfi\000yield\000addw\000ands\000asr\000it\000mov\t\000"
    "lsl\000lsr\000ror\000rrx\000asrs\000lsrs\000orn\000pldw\000pld\000pli\000"
    "rfeab\000rfedb\000rfeia\000sdiv\000srsdb\000srsia\000subw\000tbb\t\000t"
    "bb\000tbh\t\000tbh\000udiv\000bkpt\t\000bx\tlr\000cbnz\t\000cbz\t\000ld"
    "r\t\000movs\t\000pop\000push\000sub\t\000.short 0xdefe \000";

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 5 bits for 32 unique commands.
  switch ((Bits >> 27) & 31) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, CLREX, DMBsy, DSBsy, ISBsy, SETENDBE, SETENDLE, TPsoft, t2D...
    return;
    break;
  case 1:
    // ADCSSri, ADCSSrr, ADCSSrs, B, BLX, BLXr9, BMOVPCRX, BMOVPCRXr9, BRIND,...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADCri, ADCrr, ADDSri, ADDSrr, ADDri, ADDrr, ANDSri, ANDSrr, ANDri, AND...
    printPredicateOperand(MI, 3, O); 
    break;
  case 3:
    // ADCrs, ADDSrs, ADDrs, ANDSrs, ANDrs, BICrs, EORrs, LDC2L_OFFSET, LDC2L...
    printPredicateOperand(MI, 5, O); 
    break;
  case 4:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP, ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP...
    PrintSpecial(MI, O, "comment"); 
    break;
  case 5:
    // BFI, CMNzrs, CMPrs, CMPzrs, LDC2L_OPTION, LDC2_OPTION, LDCL_OPTION, LD...
    printPredicateOperand(MI, 4, O); 
    break;
  case 6:
    // BKPT, BL_pred, BLr9_pred, BXJ, Bcc, DBG, MRS, MRSsys, SMC, SVC, VCMPEZ...
    printPredicateOperand(MI, 1, O); 
    break;
  case 7:
    // BL, BLr9, tBL, tBLXi, tBLXi_r9, tBLr9
    printOperand(MI, 0, O, "call"); 
    return;
    break;
  case 8:
    // BR_JTm, PLDWr, PLDr, PLIr
    printAddrMode2Operand(MI, 0, O); 
    break;
  case 9:
    // BX_RET, FMSTAT, MOVPCLR, NOP, SEV, WFE, WFI, YIELD, t2CLREX, t2DMBish,...
    printPredicateOperand(MI, 0, O); 
    break;
  case 10:
    // CDP, LDRD_POST, LDRD_PRE, MCR, MRC, STRD_POST, STRD_PRE, VLD1d16Q, VLD...
    printPredicateOperand(MI, 6, O); 
    break;
  case 11:
    // CDP2, MCR2, MCRR2, MRC2, MRRC2
    printNoHashImmediate(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 12:
    // CLZ, CMNzri, CMNzrr, CMPri, CMPrr, CMPzri, CMPzrr, FCONSTD, FCONSTS, L...
    printPredicateOperand(MI, 2, O); 
    break;
  case 13:
    // CONSTPOOL_ENTRY
    printCPInstOperand(MI, 0, O, "label"); 
    O << ' '; 
    printCPInstOperand(MI, 1, O, "cpentry"); 
    return;
    break;
  case 14:
    // CPS, t2CPS, tCPS
    printCPSOptionOperand(MI, 0, O); 
    return;
    break;
  case 15:
    // DMBvar, DSBvar
    printMemBOption(MI, 0, O); 
    return;
    break;
  case 16:
    // Int_eh_sjlj_setjmp, Int_eh_sjlj_setjmp_nofp, t2Int_eh_sjlj_setjmp, t2I...
    printOperand(MI, 1, O); 
    break;
  case 17:
    // LDM, RFE, RFEW, SRS, SRSW, STM, VLDMD, VLDMS, VSTMD, VSTMS, t2LDM, t2S...
    printAddrMode4Operand(MI, 0, O, "submode"); 
    break;
  case 18:
    // LDM_RET, LDM_UPD, STM_UPD, VLDMD_UPD, VLDMQ, VLDMS_UPD, VSTMD_UPD, VST...
    printAddrMode4Operand(MI, 1, O, "submode"); 
    printPredicateOperand(MI, 3, O); 
    break;
  case 19:
    // PICADD, tPICADD
    printPCLabel(MI, 2, O); 
    break;
  case 20:
    // PICLDR, PICLDRB, PICLDRH, PICLDRSB, PICLDRSH, PICSTR, PICSTRB, PICSTRH
    printAddrModePCOperand(MI, 1, O, "label"); 
    break;
  case 21:
    // VLD1d16Q_UPD, VLD1d32Q_UPD, VLD1d64Q_UPD, VLD1d8Q_UPD, VLD2q16_UPD, VL...
    printPredicateOperand(MI, 8, O); 
    break;
  case 22:
    // VLD1d16T_UPD, VLD1d32T_UPD, VLD1d64T_UPD, VLD1d8T_UPD, VLD2LNd16, VLD2...
    printPredicateOperand(MI, 7, O); 
    break;
  case 23:
    // VLD2LNd16_UPD, VLD2LNd32_UPD, VLD2LNd8_UPD, VLD2LNq16_UPD, VLD2LNq32_U...
    printPredicateOperand(MI, 9, O); 
    break;
  case 24:
    // VLD3LNd16_UPD, VLD3LNd32_UPD, VLD3LNd8_UPD, VLD3LNq16_UPD, VLD3LNq32_U...
    printPredicateOperand(MI, 11, O); 
    break;
  case 25:
    // VLD4LNd16_UPD, VLD4LNd32_UPD, VLD4LNd8_UPD, VLD4LNq16_UPD, VLD4LNq32_U...
    printPredicateOperand(MI, 13, O); 
    break;
  case 26:
    // t2ADCSri, t2ADCSrr, t2ADCri, t2ADCrr, t2ADDrSPi, t2ADDri, t2ADDrr, t2A...
    printSBitModifierOperand(MI, 5, O); 
    printPredicateOperand(MI, 3, O); 
    break;
  case 27:
    // t2ADCSrs, t2ADCrs, t2ADDrSPs, t2ADDrs, t2ANDrs, t2BICrs, t2EORrs, t2OR...
    printSBitModifierOperand(MI, 6, O); 
    printPredicateOperand(MI, 4, O); 
    break;
  case 28:
    // t2IT
    printThumbITMask(MI, 1, O); 
    O << "\t"; 
    printMandatoryPredicateOperand(MI, 0, O); 
    return;
    break;
  case 29:
    // t2MOVi, t2MOVr, t2MOVrx, t2MVNi, t2MVNr
    printSBitModifierOperand(MI, 4, O); 
    printPredicateOperand(MI, 2, O); 
    break;
  case 30:
    // t2TBB, t2TBH
    printTBAddrMode(MI, 0, O); 
    printJT2BlockOperand(MI, 1, O); 
    return;
    break;
  case 31:
    // tADC, tADDi3, tADDi8, tADDrr, tAND, tASRri, tASRrr, tBIC, tEOR, tLSLri...
    printSBitModifierOperand(MI, 1, O); 
    break;
  }


  // Fragment 1 encoded into 8 bits for 133 unique commands.
  switch ((Bits >> 19) & 255) {
  default:   // unreachable.
  case 0:
    // ADCSSri, ADCSSrr, ADCSSrs, BR_JTadd, MCR2, MCRR2, MRC2, MRRC2, PLDWi, ...
    O << ", "; 
    break;
  case 1:
    // ADCri, ADCrr, ADDri, ADDrr, ANDri, ANDrr, BICri, BICrr, EORri, EORrr, ...
    printSBitModifierOperand(MI, 5, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 2:
    // ADCrs, ADDrs, ANDrs, BICrs, EORrs, ORRrs, RSBrs, RSCrs, SBCrs, SUBrs
    printSBitModifierOperand(MI, 7, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printSORegOperand(MI, 2, O); 
    return;
    break;
  case 3:
    // ADDSri, ADDSrr, ADDSrs, ANDSri, ANDSrr, ANDSrs, BFC, BFI, BKPT, BL_pre...
    O << "\t"; 
    break;
  case 4:
    // ADJCALLSTACKDOWN
    O << " ADJCALLSTACKDOWN "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 5:
    // ADJCALLSTACKUP
    O << " ADJCALLSTACKUP "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 6:
    // ATOMIC_CMP_SWAP_I16
    O << " ATOMIC_CMP_SWAP_I16 PSEUDO!"; 
    return;
    break;
  case 7:
    // ATOMIC_CMP_SWAP_I32
    O << " ATOMIC_CMP_SWAP_I32 PSEUDO!"; 
    return;
    break;
  case 8:
    // ATOMIC_CMP_SWAP_I8
    O << " ATOMIC_CMP_SWAP_I8 PSEUDO!"; 
    return;
    break;
  case 9:
    // ATOMIC_LOAD_ADD_I16
    O << " ATOMIC_LOAD_ADD_I16 PSEUDO!"; 
    return;
    break;
  case 10:
    // ATOMIC_LOAD_ADD_I32
    O << " ATOMIC_LOAD_ADD_I32 PSEUDO!"; 
    return;
    break;
  case 11:
    // ATOMIC_LOAD_ADD_I8
    O << " ATOMIC_LOAD_ADD_I8 PSEUDO!"; 
    return;
    break;
  case 12:
    // ATOMIC_LOAD_AND_I16
    O << " ATOMIC_LOAD_AND_I16 PSEUDO!"; 
    return;
    break;
  case 13:
    // ATOMIC_LOAD_AND_I32
    O << " ATOMIC_LOAD_AND_I32 PSEUDO!"; 
    return;
    break;
  case 14:
    // ATOMIC_LOAD_AND_I8
    O << " ATOMIC_LOAD_AND_I8 PSEUDO!"; 
    return;
    break;
  case 15:
    // ATOMIC_LOAD_NAND_I16
    O << " ATOMIC_LOAD_NAND_I16 PSEUDO!"; 
    return;
    break;
  case 16:
    // ATOMIC_LOAD_NAND_I32
    O << " ATOMIC_LOAD_NAND_I32 PSEUDO!"; 
    return;
    break;
  case 17:
    // ATOMIC_LOAD_NAND_I8
    O << " ATOMIC_LOAD_NAND_I8 PSEUDO!"; 
    return;
    break;
  case 18:
    // ATOMIC_LOAD_OR_I16
    O << " ATOMIC_LOAD_OR_I16 PSEUDO!"; 
    return;
    break;
  case 19:
    // ATOMIC_LOAD_OR_I32
    O << " ATOMIC_LOAD_OR_I32 PSEUDO!"; 
    return;
    break;
  case 20:
    // ATOMIC_LOAD_OR_I8
    O << " ATOMIC_LOAD_OR_I8 PSEUDO!"; 
    return;
    break;
  case 21:
    // ATOMIC_LOAD_SUB_I16
    O << " ATOMIC_LOAD_SUB_I16 PSEUDO!"; 
    return;
    break;
  case 22:
    // ATOMIC_LOAD_SUB_I32
    O << " ATOMIC_LOAD_SUB_I32 PSEUDO!"; 
    return;
    break;
  case 23:
    // ATOMIC_LOAD_SUB_I8
    O << " ATOMIC_LOAD_SUB_I8 PSEUDO!"; 
    return;
    break;
  case 24:
    // ATOMIC_LOAD_XOR_I16
    O << " ATOMIC_LOAD_XOR_I16 PSEUDO!"; 
    return;
    break;
  case 25:
    // ATOMIC_LOAD_XOR_I32
    O << " ATOMIC_LOAD_XOR_I32 PSEUDO!"; 
    return;
    break;
  case 26:
    // ATOMIC_LOAD_XOR_I8
    O << " ATOMIC_LOAD_XOR_I8 PSEUDO!"; 
    return;
    break;
  case 27:
    // ATOMIC_SWAP_I16
    O << " ATOMIC_SWAP_I16 PSEUDO!"; 
    return;
    break;
  case 28:
    // ATOMIC_SWAP_I32
    O << " ATOMIC_SWAP_I32 PSEUDO!"; 
    return;
    break;
  case 29:
    // ATOMIC_SWAP_I8
    O << " ATOMIC_SWAP_I8 PSEUDO!"; 
    return;
    break;
  case 30:
    // B, BLX, BLXr9, BMOVPCRX, BMOVPCRXr9, BRIND, BX, BXr9, MOVPCRX, NOP, PL...
    return;
    break;
  case 31:
    // BCCZi64, BCCi64
    O << " B\t"; 
    break;
  case 32:
    // BR_JTm
    printJTBlockOperand(MI, 3, O); 
    return;
    break;
  case 33:
    // BR_JTr
    printJTBlockOperand(MI, 1, O); 
    return;
    break;
  case 34:
    // BX_RET
    O << "\tlr"; 
    return;
    break;
  case 35:
    // CDP, LDC2L_OFFSET, LDC2L_OPTION, LDC2L_POST, LDC2L_PRE, LDC2_OFFSET, L...
    O << "\tp"; 
    printNoHashImmediate(MI, 0, O); 
    break;
  case 36:
    // CDP2
    O << ", cr"; 
    printNoHashImmediate(MI, 2, O); 
    O << ", cr"; 
    printNoHashImmediate(MI, 3, O); 
    O << ", cr"; 
    printNoHashImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case 37:
    // DMB_MCR
    O << ", c7, c10, 5"; 
    return;
    break;
  case 38:
    // DSB_MCR
    O << ", c7, c10, 4"; 
    return;
    break;
  case 39:
    // FCONSTD, VABSD, VADDD, VCMPD, VCMPED, VCMPEZD, VCMPZD, VDIVD, VMLAD, V...
    O << ".f64\t"; 
    printOperand(MI, 0, O); 
    break;
  case 40:
    // FCONSTS, VABDfd, VABDfq, VABSS, VABSfd, VABSfd_sfp, VABSfq, VACGEd, VA...
    O << ".f32\t"; 
    printOperand(MI, 0, O); 
    break;
  case 41:
    // FMSTAT
    O << "\tapsr_nzcv, fpscr"; 
    return;
    break;
  case 42:
    // Int_eh_sjlj_longjmp
    O << ", #8]\n\tldr\t"; 
    printOperand(MI, 1, O); 
    O << ", ["; 
    printOperand(MI, 0, O); 
    O << ", #4]\n\tldr\tr7, ["; 
    printOperand(MI, 0, O); 
    O << "]\n\tbx\t"; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 43:
    // Int_eh_sjlj_setjmp
    O << ", pc, #8\t"; 
    PrintSpecial(MI, O, "comment"); 
    O << " eh_setjmp begin\n\tstr\t"; 
    printOperand(MI, 1, O); 
    O << ", ["; 
    printOperand(MI, 0, O); 
    O << ", #+4]\n\tmov\tr0, #0\n\tadd\tpc, pc, #0\n\tmov\tr0, #1 "; 
    PrintSpecial(MI, O, "comment"); 
    O << " eh_setjmp end"; 
    return;
    break;
  case 44:
    // Int_eh_sjlj_setjmp_nofp
    O << ", pc, #8\n "; 
    PrintSpecial(MI, O, "comment"); 
    O << " eh_setjmp begin\n\tstr\t"; 
    printOperand(MI, 1, O); 
    O << ", ["; 
    printOperand(MI, 0, O); 
    O << ", #+4]\n\tmov\tr0, #0\n\tadd\tpc, pc, #0\n\tmov\tr0, #1 "; 
    PrintSpecial(MI, O, "comment"); 
    O << " eh_setjmp end"; 
    return;
    break;
  case 45:
    // LDM, STM, VLDMD, VLDMS, VSTMD, VSTMS, t2LDM, t2STM, tLDM
    printPredicateOperand(MI, 2, O); 
    break;
  case 46:
    // MLA, MOVs, MVNs, SMLAL, SMULL, UMLAL, UMULL
    printSBitModifierOperand(MI, 6, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 47:
    // MOVPCLR
    O << "\tpc, lr"; 
    return;
    break;
  case 48:
    // MOVi, MOVr, MOVr_TC, MOVrx, MVNi, MVNr
    printSBitModifierOperand(MI, 4, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 49:
    // MSR, MSRi, t2MSR
    O << "\tcpsr"; 
    printMSRMaskOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 50:
    // MSRsys, MSRsysi, t2MSRsys
    O << "\tspsr"; 
    printMSRMaskOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 51:
    // PICADD
    O << ":\n\tadd"; 
    printPredicateOperand(MI, 3, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", pc, "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 52:
    // PICLDR
    O << ":\n\tldr"; 
    printPredicateOperand(MI, 3, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printAddrModePCOperand(MI, 1, O); 
    return;
    break;
  case 53:
    // PICLDRB
    O << ":\n\tldrb"; 
    printPredicateOperand(MI, 3, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printAddrModePCOperand(MI, 1, O); 
    return;
    break;
  case 54:
    // PICLDRH
    O << ":\n\tldrh"; 
    printPredicateOperand(MI, 3, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printAddrModePCOperand(MI, 1, O); 
    return;
    break;
  case 55:
    // PICLDRSB
    O << ":\n\tldrsb"; 
    printPredicateOperand(MI, 3, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printAddrModePCOperand(MI, 1, O); 
    return;
    break;
  case 56:
    // PICLDRSH
    O << ":\n\tldrsh"; 
    printPredicateOperand(MI, 3, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printAddrModePCOperand(MI, 1, O); 
    return;
    break;
  case 57:
    // PICSTR
    O << ":\n\tstr"; 
    printPredicateOperand(MI, 3, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printAddrModePCOperand(MI, 1, O); 
    return;
    break;
  case 58:
    // PICSTRB
    O << ":\n\tstrb"; 
    printPredicateOperand(MI, 3, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printAddrModePCOperand(MI, 1, O); 
    return;
    break;
  case 59:
    // PICSTRH
    O << ":\n\tstrh"; 
    printPredicateOperand(MI, 3, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printAddrModePCOperand(MI, 1, O); 
    return;
    break;
  case 60:
    // SRS, t2SRSDB, t2SRSIA
    O << "\tsp, "; 
    break;
  case 61:
    // SRSW, t2SRSDBW, t2SRSIAW
    O << "\tsp!, "; 
    break;
  case 62:
    // TAILJMPd, TAILJMPdND, TAILJMPdNDt, TAILJMPdt, TAILJMPr, TAILJMPrND
    O << "  @ TAILCALL"; 
    return;
    break;
  case 63:
    // TRAP, tTRAP
    O << " trap"; 
    return;
    break;
  case 64:
    // VABALsv2i64, VABAsv2i32, VABAsv4i32, VABDLsv2i64, VABDsv2i32, VABDsv4i...
    O << ".s32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 65:
    // VABALsv4i32, VABAsv4i16, VABAsv8i16, VABDLsv4i32, VABDsv4i16, VABDsv8i...
    O << ".s16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 66:
    // VABALsv8i16, VABAsv16i8, VABAsv8i8, VABDLsv8i16, VABDsv16i8, VABDsv8i8...
    O << ".s8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 67:
    // VABALuv2i64, VABAuv2i32, VABAuv4i32, VABDLuv2i64, VABDuv2i32, VABDuv4i...
    O << ".u32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 68:
    // VABALuv4i32, VABAuv4i16, VABAuv8i16, VABDLuv4i32, VABDuv4i16, VABDuv8i...
    O << ".u16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 69:
    // VABALuv8i16, VABAuv16i8, VABAuv8i8, VABDLuv8i16, VABDuv16i8, VABDuv8i8...
    O << ".u8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 70:
    // VADDHNv2i32, VADDv1i64, VADDv2i64, VMOVNv2i32, VMOVv1i64, VMOVv2i64, V...
    O << ".i64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 71:
    // VADDHNv4i16, VADDv2i32, VADDv4i32, VCEQv2i32, VCEQv4i32, VCEQzv2i32, V...
    O << ".i32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 72:
    // VADDHNv8i8, VADDv4i16, VADDv8i16, VCEQv4i16, VCEQv8i16, VCEQzv4i16, VC...
    O << ".i16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 73:
    // VADDv16i8, VADDv8i8, VCEQv16i8, VCEQv8i8, VCEQzv16i8, VCEQzv8i8, VCLZv...
    O << ".i8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 74:
    // VCNTd, VCNTq, VDUP8d, VDUP8q, VDUPLN8d, VDUPLN8q, VEXTd8, VEXTq8, VLD1...
    O << ".8\t"; 
    break;
  case 75:
    // VCVTBHS, VCVTTHS
    O << ".f16.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 76:
    // VCVTBSH, VCVTTSH
    O << ".f32.f16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 77:
    // VCVTDS
    O << ".f64.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 78:
    // VCVTSD
    O << ".f32.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 79:
    // VCVTf2sd, VCVTf2sd_sfp, VCVTf2sq, VCVTf2xsd, VCVTf2xsq, VTOSIRS, VTOSI...
    O << ".s32.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 80:
    // VCVTf2ud, VCVTf2ud_sfp, VCVTf2uq, VCVTf2xud, VCVTf2xuq, VTOUIRS, VTOUI...
    O << ".u32.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 81:
    // VCVTs2fd, VCVTs2fd_sfp, VCVTs2fq, VCVTxs2fd, VCVTxs2fq, VSITOS, VSLTOS
    O << ".f32.s32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 82:
    // VCVTu2fd, VCVTu2fd_sfp, VCVTu2fq, VCVTxu2fd, VCVTxu2fq, VUITOS, VULTOS
    O << ".f32.u32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 83:
    // VDUP16d, VDUP16q, VDUPLN16d, VDUPLN16q, VEXTd16, VEXTq16, VLD1q16_UPD,...
    O << ".16\t"; 
    break;
  case 84:
    // VDUP32d, VDUP32q, VDUPLN32d, VDUPLN32q, VDUPLNfd, VDUPLNfq, VDUPfd, VD...
    O << ".32\t"; 
    break;
  case 85:
    // VLD1d16, VLD1d16Q, VLD1d16Q_UPD, VLD1d16T, VLD1d16T_UPD, VLD1d16_UPD, ...
    O << ".16\t{"; 
    break;
  case 86:
    // VLD1d32, VLD1d32Q, VLD1d32Q_UPD, VLD1d32T, VLD1d32T_UPD, VLD1d32_UPD, ...
    O << ".32\t{"; 
    break;
  case 87:
    // VLD1d64, VLD1d64Q, VLD1d64Q_UPD, VLD1d64T, VLD1d64T_UPD, VLD1d64_UPD, ...
    O << ".64\t{"; 
    break;
  case 88:
    // VLD1d8, VLD1d8Q, VLD1d8Q_UPD, VLD1d8T, VLD1d8T_UPD, VLD1d8_UPD, VLD1q8...
    O << ".8\t{"; 
    break;
  case 89:
    // VLD1q, VLD1q64_UPD, VLDRD, VSLIv1i64, VSLIv2i64, VSRIv1i64, VSRIv2i64,...
    O << ".64\t"; 
    break;
  case 90:
    // VMOVQQ, VMOVQQQQ
    O << " vmov\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 91:
    // VMSR
    O << "\tfpscr, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 92:
    // VMULLp, VMULpd, VMULpq
    O << ".p8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 93:
    // VQADDsv1i64, VQADDsv2i64, VQMOVNsuv2i32, VQMOVNsv2i32, VQRSHLsv1i64, V...
    O << ".s64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 94:
    // VQADDuv1i64, VQADDuv2i64, VQMOVNuv2i32, VQRSHLuv1i64, VQRSHLuv2i64, VQ...
    O << ".u64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 95:
    // VSHTOD
    O << ".f64.s16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 96:
    // VSHTOS
    O << ".f32.s16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 97:
    // VSITOD, VSLTOD
    O << ".f64.s32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 98:
    // VTOSHD
    O << ".s16.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 99:
    // VTOSHS
    O << ".s16.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 100:
    // VTOSIRD, VTOSIZD, VTOSLD
    O << ".s32.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 101:
    // VTOUHD
    O << ".u16.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 102:
    // VTOUHS
    O << ".u16.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 103:
    // VTOUIRD, VTOUIZD, VTOULD
    O << ".u32.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 104:
    // VUHTOD
    O << ".f64.u16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 105:
    // VUHTOS
    O << ".f32.u16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 106:
    // VUITOD, VULTOD
    O << ".f64.u32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 107:
    // t2ADCSrr, t2ADCSrs, t2ADCrr, t2ADCrs, t2ADDSri, t2ADDSrr, t2ADDSrs, t2...
    O << ".w\t"; 
    printOperand(MI, 0, O); 
    break;
  case 108:
    // t2BR_JT
    printJT2BlockOperand(MI, 2, O); 
    return;
    break;
  case 109:
    // t2DMBish, t2DSBish
    O << "\tish"; 
    return;
    break;
  case 110:
    // t2DMBishst, t2DSBishst
    O << "\tishst"; 
    return;
    break;
  case 111:
    // t2DMBnsh, t2DSBnsh
    O << "\tnsh"; 
    return;
    break;
  case 112:
    // t2DMBnshst, t2DSBnshst
    O << "\tnshst"; 
    return;
    break;
  case 113:
    // t2DMBosh, t2DSBosh
    O << "\tosh"; 
    return;
    break;
  case 114:
    // t2DMBoshst, t2DSBoshst
    O << "\toshst"; 
    return;
    break;
  case 115:
    // t2DMBst, t2DSBst
    O << "\tst"; 
    return;
    break;
  case 116:
    // t2Int_eh_sjlj_setjmp, t2Int_eh_sjlj_setjmp_nofp, tInt_eh_sjlj_setjmp
    O << ", pc\t"; 
    PrintSpecial(MI, O, "comment"); 
    O << " begin eh.setjmp\n\tadds\t"; 
    printOperand(MI, 1, O); 
    O << ", #7\n\tstr\t"; 
    printOperand(MI, 1, O); 
    O << ", ["; 
    printOperand(MI, 0, O); 
    O << ", #4]\n\tmovs\tr0, #0\n\tb\t1f\n\tmovs\tr0, #1\t"; 
    PrintSpecial(MI, O, "comment"); 
    O << " end eh.setjmp\n\t1:"; 
    return;
    break;
  case 117:
    // t2LDM_RET, t2LDM_UPD, t2STM_UPD
    printAddrMode4Operand(MI, 1, O, "wide"); 
    O << "\t"; 
    printAddrMode4Operand(MI, 1, O); 
    O << "!, "; 
    printRegisterList(MI, 5, O); 
    return;
    break;
  case 118:
    // t2LDRpci_pic
    O << " ldr.w\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << "\n"; 
    printPCLabel(MI, 2, O); 
    O << ":\n\tadd\t"; 
    printOperand(MI, 0, O); 
    O << ", pc"; 
    return;
    break;
  case 119:
    // t2NOP, t2SEV, t2WFE, t2WFI, t2YIELD
    O << ".w"; 
    return;
    break;
  case 120:
    // t2PLDWi12, t2PLDWi8, t2PLDWr, t2PLDWs, t2PLDi12, t2PLDi8, t2PLDr, t2PL...
    O << "\t["; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 121:
    // t2PLDWpci, t2PLDpci, t2PLIpci
    O << "\t[pc, "; 
    printNegZeroOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case 122:
    // tADC, tADDi3, tADDi8, tADDrr, tAND, tASRri, tASRrr, tBIC, tEOR, tLSLri...
    printPredicateOperand(MI, 4, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 123:
    // tADDrPCi
    O << ", pc, "; 
    printThumbS4ImmOperand(MI, 1, O); 
    return;
    break;
  case 124:
    // tADJCALLSTACKDOWN
    O << " tADJCALLSTACKDOWN "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 125:
    // tADJCALLSTACKUP
    O << " tADJCALLSTACKUP "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 126:
    // tBR_JTr
    O << "\n\t.align\t2"; 
    printJTBlockOperand(MI, 1, O); 
    return;
    break;
  case 127:
    // tInt_eh_sjlj_longjmp
    O << ", ["; 
    printOperand(MI, 0, O); 
    O << ", #8]\n\tmov\tsp, "; 
    printOperand(MI, 1, O); 
    O << "\n\tldr\t"; 
    printOperand(MI, 1, O); 
    O << ", ["; 
    printOperand(MI, 0, O); 
    O << ", #4]\n\tldr\tr7, ["; 
    printOperand(MI, 0, O); 
    O << "]\n\tbx\t"; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 128:
    // tLDRpci
    O << ".n\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 129:
    // tLDRpci_pic
    O << " ldr.n\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << "\n"; 
    printPCLabel(MI, 2, O); 
    O << ":\n\tadd\t"; 
    printOperand(MI, 0, O); 
    O << ", pc"; 
    return;
    break;
  case 130:
    // tMOVCCr_pseudo
    O << " tMOVCCr "; 
    printPredicateOperand(MI, 3, O); 
    return;
    break;
  case 131:
    // tMOVi8, tMVN, tRSB
    printPredicateOperand(MI, 3, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 132:
    // tPICADD
    O << ":\n\tadd\t"; 
    printOperand(MI, 0, O); 
    O << ", pc"; 
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 27 unique commands.
  switch ((Bits >> 14) & 31) {
  default:   // unreachable.
  case 0:
    // ADCSSri, ADCSSrr, ADCSSrs, BR_JTadd, MLA, MOVr, MOVr_TC, MOVrx, MVNr, ...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // ADCri, ADDri, ANDri, BICri, EORri, ORRri, RSBri, RSCri, SBCri, SUBri
    printSOImmOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // ADCrr, ADDrr, ANDrr, BICrr, EORrr, MCR2, MCRR2, MRC2, MRRC2, MUL, ORRr...
    printOperand(MI, 2, O); 
    break;
  case 3:
    // ADDSri, ADDSrr, ADDSrs, ANDSri, ANDSrr, ANDSrs, BFC, BFI, BKPT, BXJ, B...
    printOperand(MI, 0, O); 
    break;
  case 4:
    // BCCZi64, tADC, tADDi8, tAND, tASRrr, tBIC, tEOR, tLSLrr, tLSRrr, tMUL,...
    printOperand(MI, 3, O); 
    break;
  case 5:
    // BCCi64
    printOperand(MI, 5, O); 
    O << " GPR:"; 
    printOperand(MI, 1, O); 
    O << ", GPR:"; 
    printOperand(MI, 2, O); 
    O << ", GPR:"; 
    printOperand(MI, 3, O); 
    O << ", GPR:"; 
    printOperand(MI, 4, O); 
    O << ", imm:"; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 6:
    // BL_pred, BLr9_pred
    printOperand(MI, 0, O, "call"); 
    return;
    break;
  case 7:
    // CDP, FCONSTD, FCONSTS, MCR, MCRR, MRC, MRRC, VABDfd, VABDfq, VABSD, VA...
    O << ", "; 
    break;
  case 8:
    // LDC2L_OFFSET, LDC2L_OPTION, LDC2L_POST, LDC2L_PRE, LDC2_OFFSET, LDC2_O...
    O << ", cr"; 
    printNoHashImmediate(MI, 1, O); 
    break;
  case 9:
    // LDM, STM, VLDMD, VLDMS, VSTMD, VSTMS, tLDM
    O << "\t"; 
    printAddrMode4Operand(MI, 0, O); 
    O << ", "; 
    printRegisterList(MI, 4, O); 
    return;
    break;
  case 10:
    // LDM_RET, LDM_UPD, STM_UPD, VLDMD_UPD, VLDMQ, VLDMS_UPD, VSTMD_UPD, VST...
    printAddrMode4Operand(MI, 1, O); 
    break;
  case 11:
    // MOVi, MVNi
    printSOImmOperand(MI, 1, O); 
    return;
    break;
  case 12:
    // MOVs, MVNs
    printSORegOperand(MI, 1, O); 
    return;
    break;
  case 13:
    // MSRi, MSRsysi
    printSOImmOperand(MI, 0, O); 
    return;
    break;
  case 14:
    // PLDWi, PLDi, PLIi, t2PLDWi8, t2PLDi8, t2PLIi8
    printNegZeroOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case 15:
    // VCMPEZD, VCMPEZS, VCMPZD, VCMPZS, tRSB
    O << ", #0"; 
    return;
    break;
  case 16:
    // VCVTf2sd, VCVTf2sd_sfp, VCVTf2sq, VCVTf2ud, VCVTf2ud_sfp, VCVTf2uq, VC...
    return;
    break;
  case 17:
    // VLD1q, VLD1q16_UPD, VLD1q32_UPD, VLD1q64_UPD, VLD1q8_UPD
    printOperand(MI, 0, O, "dregpair"); 
    O << ", "; 
    break;
  case 18:
    // VMOVv16i8, VMOVv1i64, VMOVv2i32, VMOVv2i64, VMOVv4i16, VMOVv4i32, VMOV...
    printNEONModImmOperand(MI, 1, O); 
    return;
    break;
  case 19:
    // VST1d16Q_UPD, VST1d16T_UPD, VST1d16_UPD, VST1d32Q_UPD, VST1d32T_UPD, V...
    printOperand(MI, 4, O); 
    break;
  case 20:
    // VST1q
    printOperand(MI, 2, O, "dregpair"); 
    O << ", "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 21:
    // VST1q16_UPD, VST1q32_UPD, VST1q64_UPD, VST1q8_UPD
    printOperand(MI, 4, O, "dregpair"); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case 22:
    // t2LDM, t2STM
    printAddrMode4Operand(MI, 0, O, "wide"); 
    O << "\t"; 
    printAddrMode4Operand(MI, 0, O); 
    O << ", "; 
    printRegisterList(MI, 4, O); 
    return;
    break;
  case 23:
    // t2LEApcrel, t2LEApcrelJT
    O << ", #"; 
    printOperand(MI, 1, O); 
    break;
  case 24:
    // tADDspi, tSUBspi
    printThumbS4ImmOperand(MI, 2, O); 
    return;
    break;
  case 25:
    // tBfar
    PrintSpecial(MI, O, "comment"); 
    O << " far jump"; 
    return;
    break;
  case 26:
    // tPOP, tPOP_RET, tPUSH
    printRegisterList(MI, 2, O); 
    return;
    break;
  }

  switch (MI->getOpcode()) {
  case ARM::ADCSSri:
  case ARM::ADCSSrr:
  case ARM::ADCSSrs:
  case ARM::BFC:
  case ARM::CLZ:
  case ARM::CMNzri:
  case ARM::CMNzrr:
  case ARM::CMNzrs:
  case ARM::CMPri:
  case ARM::CMPrr:
  case ARM::CMPrs:
  case ARM::CMPzri:
  case ARM::CMPzrr:
  case ARM::CMPzrs:
  case ARM::LDC2L_OFFSET:
  case ARM::LDC2_OFFSET:
  case ARM::LDCL_OFFSET:
  case ARM::LDC_OFFSET:
  case ARM::LDR:
  case ARM::LDRB:
  case ARM::LDRD:
  case ARM::LDRH:
  case ARM::LDRSB:
  case ARM::LDRSH:
  case ARM::LDRcp:
  case ARM::MOVCCi:
  case ARM::MOVCCr:
  case ARM::MOVCCs:
  case ARM::MOVTi16:
  case ARM::MOVi16:
  case ARM::MOVi2pieces:
  case ARM::RBIT:
  case ARM::REV:
  case ARM::REV16:
  case ARM::REVSH:
  case ARM::RSCSri:
  case ARM::RSCSrs:
  case ARM::SBCSSri:
  case ARM::SBCSSrr:
  case ARM::SBCSSrs:
  case ARM::STC2L_OFFSET:
  case ARM::STC2_OFFSET:
  case ARM::STCL_OFFSET:
  case ARM::STC_OFFSET:
  case ARM::STR:
  case ARM::STRB:
  case ARM::STRD:
  case ARM::STRH:
  case ARM::SXTB16r:
  case ARM::SXTBr:
  case ARM::SXTHr:
  case ARM::TEQri:
  case ARM::TEQrr:
  case ARM::TEQrs:
  case ARM::TSTri:
  case ARM::TSTrr:
  case ARM::TSTrs:
  case ARM::UXTB16r:
  case ARM::UXTBr:
  case ARM::UXTHr:
  case ARM::VABALsv2i64:
  case ARM::VABALsv4i32:
  case ARM::VABALsv8i16:
  case ARM::VABALuv2i64:
  case ARM::VABALuv4i32:
  case ARM::VABALuv8i16:
  case ARM::VABAsv16i8:
  case ARM::VABAsv2i32:
  case ARM::VABAsv4i16:
  case ARM::VABAsv4i32:
  case ARM::VABAsv8i16:
  case ARM::VABAsv8i8:
  case ARM::VABAuv16i8:
  case ARM::VABAuv2i32:
  case ARM::VABAuv4i16:
  case ARM::VABAuv4i32:
  case ARM::VABAuv8i16:
  case ARM::VABAuv8i8:
  case ARM::VABDLsv2i64:
  case ARM::VABDLsv4i32:
  case ARM::VABDLsv8i16:
  case ARM::VABDLuv2i64:
  case ARM::VABDLuv4i32:
  case ARM::VABDLuv8i16:
  case ARM::VABDsv16i8:
  case ARM::VABDsv2i32:
  case ARM::VABDsv4i16:
  case ARM::VABDsv4i32:
  case ARM::VABDsv8i16:
  case ARM::VABDsv8i8:
  case ARM::VABDuv16i8:
  case ARM::VABDuv2i32:
  case ARM::VABDuv4i16:
  case ARM::VABDuv4i32:
  case ARM::VABDuv8i16:
  case ARM::VABDuv8i8:
  case ARM::VADDHNv2i32:
  case ARM::VADDHNv4i16:
  case ARM::VADDHNv8i8:
  case ARM::VADDLsv2i64:
  case ARM::VADDLsv4i32:
  case ARM::VADDLsv8i16:
  case ARM::VADDLuv2i64:
  case ARM::VADDLuv4i32:
  case ARM::VADDLuv8i16:
  case ARM::VADDWsv2i64:
  case ARM::VADDWsv4i32:
  case ARM::VADDWsv8i16:
  case ARM::VADDWuv2i64:
  case ARM::VADDWuv4i32:
  case ARM::VADDWuv8i16:
  case ARM::VADDv16i8:
  case ARM::VADDv1i64:
  case ARM::VADDv2i32:
  case ARM::VADDv2i64:
  case ARM::VADDv4i16:
  case ARM::VADDv4i32:
  case ARM::VADDv8i16:
  case ARM::VADDv8i8:
  case ARM::VCEQv16i8:
  case ARM::VCEQv2i32:
  case ARM::VCEQv4i16:
  case ARM::VCEQv4i32:
  case ARM::VCEQv8i16:
  case ARM::VCEQv8i8:
  case ARM::VCGEsv16i8:
  case ARM::VCGEsv2i32:
  case ARM::VCGEsv4i16:
  case ARM::VCGEsv4i32:
  case ARM::VCGEsv8i16:
  case ARM::VCGEsv8i8:
  case ARM::VCGEuv16i8:
  case ARM::VCGEuv2i32:
  case ARM::VCGEuv4i16:
  case ARM::VCGEuv4i32:
  case ARM::VCGEuv8i16:
  case ARM::VCGEuv8i8:
  case ARM::VCGTsv16i8:
  case ARM::VCGTsv2i32:
  case ARM::VCGTsv4i16:
  case ARM::VCGTsv4i32:
  case ARM::VCGTsv8i16:
  case ARM::VCGTsv8i8:
  case ARM::VCGTuv16i8:
  case ARM::VCGTuv2i32:
  case ARM::VCGTuv4i16:
  case ARM::VCGTuv4i32:
  case ARM::VCGTuv8i16:
  case ARM::VCGTuv8i8:
  case ARM::VCNTd:
  case ARM::VCNTq:
  case ARM::VDUP16d:
  case ARM::VDUP16q:
  case ARM::VDUP32d:
  case ARM::VDUP32q:
  case ARM::VDUP8d:
  case ARM::VDUP8q:
  case ARM::VDUPfd:
  case ARM::VDUPfdf:
  case ARM::VDUPfq:
  case ARM::VDUPfqf:
  case ARM::VHADDsv16i8:
  case ARM::VHADDsv2i32:
  case ARM::VHADDsv4i16:
  case ARM::VHADDsv4i32:
  case ARM::VHADDsv8i16:
  case ARM::VHADDsv8i8:
  case ARM::VHADDuv16i8:
  case ARM::VHADDuv2i32:
  case ARM::VHADDuv4i16:
  case ARM::VHADDuv4i32:
  case ARM::VHADDuv8i16:
  case ARM::VHADDuv8i8:
  case ARM::VHSUBsv16i8:
  case ARM::VHSUBsv2i32:
  case ARM::VHSUBsv4i16:
  case ARM::VHSUBsv4i32:
  case ARM::VHSUBsv8i16:
  case ARM::VHSUBsv8i8:
  case ARM::VHSUBuv16i8:
  case ARM::VHSUBuv2i32:
  case ARM::VHSUBuv4i16:
  case ARM::VHSUBuv4i32:
  case ARM::VHSUBuv8i16:
  case ARM::VHSUBuv8i8:
  case ARM::VLDMQ:
  case ARM::VLDRD:
  case ARM::VLDRS:
  case ARM::VMAXsv16i8:
  case ARM::VMAXsv2i32:
  case ARM::VMAXsv4i16:
  case ARM::VMAXsv4i32:
  case ARM::VMAXsv8i16:
  case ARM::VMAXsv8i8:
  case ARM::VMAXuv16i8:
  case ARM::VMAXuv2i32:
  case ARM::VMAXuv4i16:
  case ARM::VMAXuv4i32:
  case ARM::VMAXuv8i16:
  case ARM::VMAXuv8i8:
  case ARM::VMINsv16i8:
  case ARM::VMINsv2i32:
  case ARM::VMINsv4i16:
  case ARM::VMINsv4i32:
  case ARM::VMINsv8i16:
  case ARM::VMINsv8i8:
  case ARM::VMINuv16i8:
  case ARM::VMINuv2i32:
  case ARM::VMINuv4i16:
  case ARM::VMINuv4i32:
  case ARM::VMINuv8i16:
  case ARM::VMINuv8i8:
  case ARM::VMLALsv2i64:
  case ARM::VMLALsv4i32:
  case ARM::VMLALsv8i16:
  case ARM::VMLALuv2i64:
  case ARM::VMLALuv4i32:
  case ARM::VMLALuv8i16:
  case ARM::VMLAv16i8:
  case ARM::VMLAv2i32:
  case ARM::VMLAv4i16:
  case ARM::VMLAv4i32:
  case ARM::VMLAv8i16:
  case ARM::VMLAv8i8:
  case ARM::VMLSLsv2i64:
  case ARM::VMLSLsv4i32:
  case ARM::VMLSLsv8i16:
  case ARM::VMLSLuv2i64:
  case ARM::VMLSLuv4i32:
  case ARM::VMLSLuv8i16:
  case ARM::VMLSv16i8:
  case ARM::VMLSv2i32:
  case ARM::VMLSv4i16:
  case ARM::VMLSv4i32:
  case ARM::VMLSv8i16:
  case ARM::VMLSv8i8:
  case ARM::VMOVDneon:
  case ARM::VMOVQ:
  case ARM::VMOVRS:
  case ARM::VMOVSR:
  case ARM::VMULLsv2i64:
  case ARM::VMULLsv4i32:
  case ARM::VMULLsv8i16:
  case ARM::VMULLuv2i64:
  case ARM::VMULLuv4i32:
  case ARM::VMULLuv8i16:
  case ARM::VMULv16i8:
  case ARM::VMULv2i32:
  case ARM::VMULv4i16:
  case ARM::VMULv4i32:
  case ARM::VMULv8i16:
  case ARM::VMULv8i8:
  case ARM::VMVNd:
  case ARM::VMVNq:
  case ARM::VPADDi16:
  case ARM::VPADDi32:
  case ARM::VPADDi8:
  case ARM::VPMAXs16:
  case ARM::VPMAXs32:
  case ARM::VPMAXs8:
  case ARM::VPMAXu16:
  case ARM::VPMAXu32:
  case ARM::VPMAXu8:
  case ARM::VPMINs16:
  case ARM::VPMINs32:
  case ARM::VPMINs8:
  case ARM::VPMINu16:
  case ARM::VPMINu32:
  case ARM::VPMINu8:
  case ARM::VQADDsv16i8:
  case ARM::VQADDsv1i64:
  case ARM::VQADDsv2i32:
  case ARM::VQADDsv2i64:
  case ARM::VQADDsv4i16:
  case ARM::VQADDsv4i32:
  case ARM::VQADDsv8i16:
  case ARM::VQADDsv8i8:
  case ARM::VQADDuv16i8:
  case ARM::VQADDuv1i64:
  case ARM::VQADDuv2i32:
  case ARM::VQADDuv2i64:
  case ARM::VQADDuv4i16:
  case ARM::VQADDuv4i32:
  case ARM::VQADDuv8i16:
  case ARM::VQADDuv8i8:
  case ARM::VQDMLALv2i64:
  case ARM::VQDMLALv4i32:
  case ARM::VQDMLSLv2i64:
  case ARM::VQDMLSLv4i32:
  case ARM::VQDMULHv2i32:
  case ARM::VQDMULHv4i16:
  case ARM::VQDMULHv4i32:
  case ARM::VQDMULHv8i16:
  case ARM::VQDMULLv2i64:
  case ARM::VQDMULLv4i32:
  case ARM::VQRDMULHv2i32:
  case ARM::VQRDMULHv4i16:
  case ARM::VQRDMULHv4i32:
  case ARM::VQRDMULHv8i16:
  case ARM::VQRSHLsv16i8:
  case ARM::VQRSHLsv1i64:
  case ARM::VQRSHLsv2i32:
  case ARM::VQRSHLsv2i64:
  case ARM::VQRSHLsv4i16:
  case ARM::VQRSHLsv4i32:
  case ARM::VQRSHLsv8i16:
  case ARM::VQRSHLsv8i8:
  case ARM::VQRSHLuv16i8:
  case ARM::VQRSHLuv1i64:
  case ARM::VQRSHLuv2i32:
  case ARM::VQRSHLuv2i64:
  case ARM::VQRSHLuv4i16:
  case ARM::VQRSHLuv4i32:
  case ARM::VQRSHLuv8i16:
  case ARM::VQRSHLuv8i8:
  case ARM::VQRSHRNsv2i32:
  case ARM::VQRSHRNsv4i16:
  case ARM::VQRSHRNsv8i8:
  case ARM::VQRSHRNuv2i32:
  case ARM::VQRSHRNuv4i16:
  case ARM::VQRSHRNuv8i8:
  case ARM::VQRSHRUNv2i32:
  case ARM::VQRSHRUNv4i16:
  case ARM::VQRSHRUNv8i8:
  case ARM::VQSHLsiv16i8:
  case ARM::VQSHLsiv1i64:
  case ARM::VQSHLsiv2i32:
  case ARM::VQSHLsiv2i64:
  case ARM::VQSHLsiv4i16:
  case ARM::VQSHLsiv4i32:
  case ARM::VQSHLsiv8i16:
  case ARM::VQSHLsiv8i8:
  case ARM::VQSHLsuv16i8:
  case ARM::VQSHLsuv1i64:
  case ARM::VQSHLsuv2i32:
  case ARM::VQSHLsuv2i64:
  case ARM::VQSHLsuv4i16:
  case ARM::VQSHLsuv4i32:
  case ARM::VQSHLsuv8i16:
  case ARM::VQSHLsuv8i8:
  case ARM::VQSHLsv16i8:
  case ARM::VQSHLsv1i64:
  case ARM::VQSHLsv2i32:
  case ARM::VQSHLsv2i64:
  case ARM::VQSHLsv4i16:
  case ARM::VQSHLsv4i32:
  case ARM::VQSHLsv8i16:
  case ARM::VQSHLsv8i8:
  case ARM::VQSHLuiv16i8:
  case ARM::VQSHLuiv1i64:
  case ARM::VQSHLuiv2i32:
  case ARM::VQSHLuiv2i64:
  case ARM::VQSHLuiv4i16:
  case ARM::VQSHLuiv4i32:
  case ARM::VQSHLuiv8i16:
  case ARM::VQSHLuiv8i8:
  case ARM::VQSHLuv16i8:
  case ARM::VQSHLuv1i64:
  case ARM::VQSHLuv2i32:
  case ARM::VQSHLuv2i64:
  case ARM::VQSHLuv4i16:
  case ARM::VQSHLuv4i32:
  case ARM::VQSHLuv8i16:
  case ARM::VQSHLuv8i8:
  case ARM::VQSHRNsv2i32:
  case ARM::VQSHRNsv4i16:
  case ARM::VQSHRNsv8i8:
  case ARM::VQSHRNuv2i32:
  case ARM::VQSHRNuv4i16:
  case ARM::VQSHRNuv8i8:
  case ARM::VQSHRUNv2i32:
  case ARM::VQSHRUNv4i16:
  case ARM::VQSHRUNv8i8:
  case ARM::VQSUBsv16i8:
  case ARM::VQSUBsv1i64:
  case ARM::VQSUBsv2i32:
  case ARM::VQSUBsv2i64:
  case ARM::VQSUBsv4i16:
  case ARM::VQSUBsv4i32:
  case ARM::VQSUBsv8i16:
  case ARM::VQSUBsv8i8:
  case ARM::VQSUBuv16i8:
  case ARM::VQSUBuv1i64:
  case ARM::VQSUBuv2i32:
  case ARM::VQSUBuv2i64:
  case ARM::VQSUBuv4i16:
  case ARM::VQSUBuv4i32:
  case ARM::VQSUBuv8i16:
  case ARM::VQSUBuv8i8:
  case ARM::VRADDHNv2i32:
  case ARM::VRADDHNv4i16:
  case ARM::VRADDHNv8i8:
  case ARM::VREV16d8:
  case ARM::VREV16q8:
  case ARM::VREV32d16:
  case ARM::VREV32d8:
  case ARM::VREV32q16:
  case ARM::VREV32q8:
  case ARM::VREV64d16:
  case ARM::VREV64d32:
  case ARM::VREV64d8:
  case ARM::VREV64df:
  case ARM::VREV64q16:
  case ARM::VREV64q32:
  case ARM::VREV64q8:
  case ARM::VREV64qf:
  case ARM::VRHADDsv16i8:
  case ARM::VRHADDsv2i32:
  case ARM::VRHADDsv4i16:
  case ARM::VRHADDsv4i32:
  case ARM::VRHADDsv8i16:
  case ARM::VRHADDsv8i8:
  case ARM::VRHADDuv16i8:
  case ARM::VRHADDuv2i32:
  case ARM::VRHADDuv4i16:
  case ARM::VRHADDuv4i32:
  case ARM::VRHADDuv8i16:
  case ARM::VRHADDuv8i8:
  case ARM::VRSHLsv16i8:
  case ARM::VRSHLsv1i64:
  case ARM::VRSHLsv2i32:
  case ARM::VRSHLsv2i64:
  case ARM::VRSHLsv4i16:
  case ARM::VRSHLsv4i32:
  case ARM::VRSHLsv8i16:
  case ARM::VRSHLsv8i8:
  case ARM::VRSHLuv16i8:
  case ARM::VRSHLuv1i64:
  case ARM::VRSHLuv2i32:
  case ARM::VRSHLuv2i64:
  case ARM::VRSHLuv4i16:
  case ARM::VRSHLuv4i32:
  case ARM::VRSHLuv8i16:
  case ARM::VRSHLuv8i8:
  case ARM::VRSHRNv2i32:
  case ARM::VRSHRNv4i16:
  case ARM::VRSHRNv8i8:
  case ARM::VRSHRsv16i8:
  case ARM::VRSHRsv1i64:
  case ARM::VRSHRsv2i32:
  case ARM::VRSHRsv2i64:
  case ARM::VRSHRsv4i16:
  case ARM::VRSHRsv4i32:
  case ARM::VRSHRsv8i16:
  case ARM::VRSHRsv8i8:
  case ARM::VRSHRuv16i8:
  case ARM::VRSHRuv1i64:
  case ARM::VRSHRuv2i32:
  case ARM::VRSHRuv2i64:
  case ARM::VRSHRuv4i16:
  case ARM::VRSHRuv4i32:
  case ARM::VRSHRuv8i16:
  case ARM::VRSHRuv8i8:
  case ARM::VRSRAsv16i8:
  case ARM::VRSRAsv1i64:
  case ARM::VRSRAsv2i32:
  case ARM::VRSRAsv2i64:
  case ARM::VRSRAsv4i16:
  case ARM::VRSRAsv4i32:
  case ARM::VRSRAsv8i16:
  case ARM::VRSRAsv8i8:
  case ARM::VRSRAuv16i8:
  case ARM::VRSRAuv1i64:
  case ARM::VRSRAuv2i32:
  case ARM::VRSRAuv2i64:
  case ARM::VRSRAuv4i16:
  case ARM::VRSRAuv4i32:
  case ARM::VRSRAuv8i16:
  case ARM::VRSRAuv8i8:
  case ARM::VRSUBHNv2i32:
  case ARM::VRSUBHNv4i16:
  case ARM::VRSUBHNv8i8:
  case ARM::VSHLLi16:
  case ARM::VSHLLi32:
  case ARM::VSHLLi8:
  case ARM::VSHLLsv2i64:
  case ARM::VSHLLsv4i32:
  case ARM::VSHLLsv8i16:
  case ARM::VSHLLuv2i64:
  case ARM::VSHLLuv4i32:
  case ARM::VSHLLuv8i16:
  case ARM::VSHLiv16i8:
  case ARM::VSHLiv1i64:
  case ARM::VSHLiv2i32:
  case ARM::VSHLiv2i64:
  case ARM::VSHLiv4i16:
  case ARM::VSHLiv4i32:
  case ARM::VSHLiv8i16:
  case ARM::VSHLiv8i8:
  case ARM::VSHLsv16i8:
  case ARM::VSHLsv1i64:
  case ARM::VSHLsv2i32:
  case ARM::VSHLsv2i64:
  case ARM::VSHLsv4i16:
  case ARM::VSHLsv4i32:
  case ARM::VSHLsv8i16:
  case ARM::VSHLsv8i8:
  case ARM::VSHLuv16i8:
  case ARM::VSHLuv1i64:
  case ARM::VSHLuv2i32:
  case ARM::VSHLuv2i64:
  case ARM::VSHLuv4i16:
  case ARM::VSHLuv4i32:
  case ARM::VSHLuv8i16:
  case ARM::VSHLuv8i8:
  case ARM::VSHRNv2i32:
  case ARM::VSHRNv4i16:
  case ARM::VSHRNv8i8:
  case ARM::VSHRsv16i8:
  case ARM::VSHRsv1i64:
  case ARM::VSHRsv2i32:
  case ARM::VSHRsv2i64:
  case ARM::VSHRsv4i16:
  case ARM::VSHRsv4i32:
  case ARM::VSHRsv8i16:
  case ARM::VSHRsv8i8:
  case ARM::VSHRuv16i8:
  case ARM::VSHRuv1i64:
  case ARM::VSHRuv2i32:
  case ARM::VSHRuv2i64:
  case ARM::VSHRuv4i16:
  case ARM::VSHRuv4i32:
  case ARM::VSHRuv8i16:
  case ARM::VSHRuv8i8:
  case ARM::VSRAsv16i8:
  case ARM::VSRAsv1i64:
  case ARM::VSRAsv2i32:
  case ARM::VSRAsv2i64:
  case ARM::VSRAsv4i16:
  case ARM::VSRAsv4i32:
  case ARM::VSRAsv8i16:
  case ARM::VSRAsv8i8:
  case ARM::VSRAuv16i8:
  case ARM::VSRAuv1i64:
  case ARM::VSRAuv2i32:
  case ARM::VSRAuv2i64:
  case ARM::VSRAuv4i16:
  case ARM::VSRAuv4i32:
  case ARM::VSRAuv8i16:
  case ARM::VSRAuv8i8:
  case ARM::VSTMQ:
  case ARM::VSTRD:
  case ARM::VSTRS:
  case ARM::VSUBHNv2i32:
  case ARM::VSUBHNv4i16:
  case ARM::VSUBHNv8i8:
  case ARM::VSUBLsv2i64:
  case ARM::VSUBLsv4i32:
  case ARM::VSUBLsv8i16:
  case ARM::VSUBLuv2i64:
  case ARM::VSUBLuv4i32:
  case ARM::VSUBLuv8i16:
  case ARM::VSUBWsv2i64:
  case ARM::VSUBWsv4i32:
  case ARM::VSUBWsv8i16:
  case ARM::VSUBWuv2i64:
  case ARM::VSUBWuv4i32:
  case ARM::VSUBWuv8i16:
  case ARM::VSUBv16i8:
  case ARM::VSUBv1i64:
  case ARM::VSUBv2i32:
  case ARM::VSUBv2i64:
  case ARM::VSUBv4i16:
  case ARM::VSUBv4i32:
  case ARM::VSUBv8i16:
  case ARM::VSUBv8i8:
  case ARM::VSWPd:
  case ARM::VSWPq:
  case ARM::VTRNd16:
  case ARM::VTRNd32:
  case ARM::VTRNd8:
  case ARM::VTRNq16:
  case ARM::VTRNq32:
  case ARM::VTRNq8:
  case ARM::VUZPd16:
  case ARM::VUZPd32:
  case ARM::VUZPd8:
  case ARM::VUZPq16:
  case ARM::VUZPq32:
  case ARM::VUZPq8:
  case ARM::VZIPd16:
  case ARM::VZIPd32:
  case ARM::VZIPd8:
  case ARM::VZIPq16:
  case ARM::VZIPq32:
  case ARM::VZIPq8:
  case ARM::t2BFC:
  case ARM::t2CLZ:
  case ARM::t2LDRBT:
  case ARM::t2LDRBi8:
  case ARM::t2LDRDi8:
  case ARM::t2LDRDpci:
  case ARM::t2LDRHT:
  case ARM::t2LDRHi8:
  case ARM::t2LDRSBT:
  case ARM::t2LDRSBi8:
  case ARM::t2LDRSHT:
  case ARM::t2LDRSHi8:
  case ARM::t2LDRT:
  case ARM::t2LDRi8:
  case ARM::t2MOVTi16:
  case ARM::t2MOVi16:
  case ARM::t2MOVrx:
  case ARM::t2MVNi:
  case ARM::t2RBIT:
  case ARM::t2STRBT:
  case ARM::t2STRBi8:
  case ARM::t2STRDi8:
  case ARM::t2STRHT:
  case ARM::t2STRHi8:
  case ARM::t2STRT:
  case ARM::t2STRi8:
  case ARM::t2SXTB16r:
  case ARM::t2UXTB16r:
  case ARM::tADDhirr:
  case ARM::tADDi3:
  case ARM::tADDrSPi:
  case ARM::tADDrr:
  case ARM::tASRri:
  case ARM::tCMNz:
  case ARM::tCMPhir:
  case ARM::tCMPi8:
  case ARM::tCMPr:
  case ARM::tCMPzhir:
  case ARM::tCMPzi8:
  case ARM::tCMPzr:
  case ARM::tLDR:
  case ARM::tLDRB:
  case ARM::tLDRBi:
  case ARM::tLDRH:
  case ARM::tLDRHi:
  case ARM::tLDRSB:
  case ARM::tLDRSH:
  case ARM::tLDRcp:
  case ARM::tLDRi:
  case ARM::tLDRspi:
  case ARM::tLSLri:
  case ARM::tLSRri:
  case ARM::tMOVCCi:
  case ARM::tMOVCCr:
  case ARM::tMUL:
  case ARM::tREV:
  case ARM::tREV16:
  case ARM::tREVSH:
  case ARM::tRestore:
  case ARM::tSTR:
  case ARM::tSTRB:
  case ARM::tSTRBi:
  case ARM::tSTRH:
  case ARM::tSTRHi:
  case ARM::tSTRi:
  case ARM::tSTRspi:
  case ARM::tSUBi3:
  case ARM::tSUBrr:
  case ARM::tSXTB:
  case ARM::tSXTH:
  case ARM::tSpill:
  case ARM::tTST:
  case ARM::tUXTB:
  case ARM::tUXTH:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::ADCSSri: 
    case ARM::MOVCCi: 
    case ARM::RSCSri: 
    case ARM::SBCSSri: printSOImmOperand(MI, 2, O); break;
    case ARM::ADCSSrr: 
    case ARM::MOVCCr: 
    case ARM::MOVTi16: 
    case ARM::SBCSSrr: 
    case ARM::VABDLsv2i64: 
    case ARM::VABDLsv4i32: 
    case ARM::VABDLsv8i16: 
    case ARM::VABDLuv2i64: 
    case ARM::VABDLuv4i32: 
    case ARM::VABDLuv8i16: 
    case ARM::VABDsv16i8: 
    case ARM::VABDsv2i32: 
    case ARM::VABDsv4i16: 
    case ARM::VABDsv4i32: 
    case ARM::VABDsv8i16: 
    case ARM::VABDsv8i8: 
    case ARM::VABDuv16i8: 
    case ARM::VABDuv2i32: 
    case ARM::VABDuv4i16: 
    case ARM::VABDuv4i32: 
    case ARM::VABDuv8i16: 
    case ARM::VABDuv8i8: 
    case ARM::VADDHNv2i32: 
    case ARM::VADDHNv4i16: 
    case ARM::VADDHNv8i8: 
    case ARM::VADDLsv2i64: 
    case ARM::VADDLsv4i32: 
    case ARM::VADDLsv8i16: 
    case ARM::VADDLuv2i64: 
    case ARM::VADDLuv4i32: 
    case ARM::VADDLuv8i16: 
    case ARM::VADDWsv2i64: 
    case ARM::VADDWsv4i32: 
    case ARM::VADDWsv8i16: 
    case ARM::VADDWuv2i64: 
    case ARM::VADDWuv4i32: 
    case ARM::VADDWuv8i16: 
    case ARM::VADDv16i8: 
    case ARM::VADDv1i64: 
    case ARM::VADDv2i32: 
    case ARM::VADDv2i64: 
    case ARM::VADDv4i16: 
    case ARM::VADDv4i32: 
    case ARM::VADDv8i16: 
    case ARM::VADDv8i8: 
    case ARM::VCEQv16i8: 
    case ARM::VCEQv2i32: 
    case ARM::VCEQv4i16: 
    case ARM::VCEQv4i32: 
    case ARM::VCEQv8i16: 
    case ARM::VCEQv8i8: 
    case ARM::VCGEsv16i8: 
    case ARM::VCGEsv2i32: 
    case ARM::VCGEsv4i16: 
    case ARM::VCGEsv4i32: 
    case ARM::VCGEsv8i16: 
    case ARM::VCGEsv8i8: 
    case ARM::VCGEuv16i8: 
    case ARM::VCGEuv2i32: 
    case ARM::VCGEuv4i16: 
    case ARM::VCGEuv4i32: 
    case ARM::VCGEuv8i16: 
    case ARM::VCGEuv8i8: 
    case ARM::VCGTsv16i8: 
    case ARM::VCGTsv2i32: 
    case ARM::VCGTsv4i16: 
    case ARM::VCGTsv4i32: 
    case ARM::VCGTsv8i16: 
    case ARM::VCGTsv8i8: 
    case ARM::VCGTuv16i8: 
    case ARM::VCGTuv2i32: 
    case ARM::VCGTuv4i16: 
    case ARM::VCGTuv4i32: 
    case ARM::VCGTuv8i16: 
    case ARM::VCGTuv8i8: 
    case ARM::VHADDsv16i8: 
    case ARM::VHADDsv2i32: 
    case ARM::VHADDsv4i16: 
    case ARM::VHADDsv4i32: 
    case ARM::VHADDsv8i16: 
    case ARM::VHADDsv8i8: 
    case ARM::VHADDuv16i8: 
    case ARM::VHADDuv2i32: 
    case ARM::VHADDuv4i16: 
    case ARM::VHADDuv4i32: 
    case ARM::VHADDuv8i16: 
    case ARM::VHADDuv8i8: 
    case ARM::VHSUBsv16i8: 
    case ARM::VHSUBsv2i32: 
    case ARM::VHSUBsv4i16: 
    case ARM::VHSUBsv4i32: 
    case ARM::VHSUBsv8i16: 
    case ARM::VHSUBsv8i8: 
    case ARM::VHSUBuv16i8: 
    case ARM::VHSUBuv2i32: 
    case ARM::VHSUBuv4i16: 
    case ARM::VHSUBuv4i32: 
    case ARM::VHSUBuv8i16: 
    case ARM::VHSUBuv8i8: 
    case ARM::VMAXsv16i8: 
    case ARM::VMAXsv2i32: 
    case ARM::VMAXsv4i16: 
    case ARM::VMAXsv4i32: 
    case ARM::VMAXsv8i16: 
    case ARM::VMAXsv8i8: 
    case ARM::VMAXuv16i8: 
    case ARM::VMAXuv2i32: 
    case ARM::VMAXuv4i16: 
    case ARM::VMAXuv4i32: 
    case ARM::VMAXuv8i16: 
    case ARM::VMAXuv8i8: 
    case ARM::VMINsv16i8: 
    case ARM::VMINsv2i32: 
    case ARM::VMINsv4i16: 
    case ARM::VMINsv4i32: 
    case ARM::VMINsv8i16: 
    case ARM::VMINsv8i8: 
    case ARM::VMINuv16i8: 
    case ARM::VMINuv2i32: 
    case ARM::VMINuv4i16: 
    case ARM::VMINuv4i32: 
    case ARM::VMINuv8i16: 
    case ARM::VMINuv8i8: 
    case ARM::VMULLsv2i64: 
    case ARM::VMULLsv4i32: 
    case ARM::VMULLsv8i16: 
    case ARM::VMULLuv2i64: 
    case ARM::VMULLuv4i32: 
    case ARM::VMULLuv8i16: 
    case ARM::VMULv16i8: 
    case ARM::VMULv2i32: 
    case ARM::VMULv4i16: 
    case ARM::VMULv4i32: 
    case ARM::VMULv8i16: 
    case ARM::VMULv8i8: 
    case ARM::VPADDi16: 
    case ARM::VPADDi32: 
    case ARM::VPADDi8: 
    case ARM::VPMAXs16: 
    case ARM::VPMAXs32: 
    case ARM::VPMAXs8: 
    case ARM::VPMAXu16: 
    case ARM::VPMAXu32: 
    case ARM::VPMAXu8: 
    case ARM::VPMINs16: 
    case ARM::VPMINs32: 
    case ARM::VPMINs8: 
    case ARM::VPMINu16: 
    case ARM::VPMINu32: 
    case ARM::VPMINu8: 
    case ARM::VQADDsv16i8: 
    case ARM::VQADDsv1i64: 
    case ARM::VQADDsv2i32: 
    case ARM::VQADDsv2i64: 
    case ARM::VQADDsv4i16: 
    case ARM::VQADDsv4i32: 
    case ARM::VQADDsv8i16: 
    case ARM::VQADDsv8i8: 
    case ARM::VQADDuv16i8: 
    case ARM::VQADDuv1i64: 
    case ARM::VQADDuv2i32: 
    case ARM::VQADDuv2i64: 
    case ARM::VQADDuv4i16: 
    case ARM::VQADDuv4i32: 
    case ARM::VQADDuv8i16: 
    case ARM::VQADDuv8i8: 
    case ARM::VQDMULHv2i32: 
    case ARM::VQDMULHv4i16: 
    case ARM::VQDMULHv4i32: 
    case ARM::VQDMULHv8i16: 
    case ARM::VQDMULLv2i64: 
    case ARM::VQDMULLv4i32: 
    case ARM::VQRDMULHv2i32: 
    case ARM::VQRDMULHv4i16: 
    case ARM::VQRDMULHv4i32: 
    case ARM::VQRDMULHv8i16: 
    case ARM::VQRSHLsv16i8: 
    case ARM::VQRSHLsv1i64: 
    case ARM::VQRSHLsv2i32: 
    case ARM::VQRSHLsv2i64: 
    case ARM::VQRSHLsv4i16: 
    case ARM::VQRSHLsv4i32: 
    case ARM::VQRSHLsv8i16: 
    case ARM::VQRSHLsv8i8: 
    case ARM::VQRSHLuv16i8: 
    case ARM::VQRSHLuv1i64: 
    case ARM::VQRSHLuv2i32: 
    case ARM::VQRSHLuv2i64: 
    case ARM::VQRSHLuv4i16: 
    case ARM::VQRSHLuv4i32: 
    case ARM::VQRSHLuv8i16: 
    case ARM::VQRSHLuv8i8: 
    case ARM::VQRSHRNsv2i32: 
    case ARM::VQRSHRNsv4i16: 
    case ARM::VQRSHRNsv8i8: 
    case ARM::VQRSHRNuv2i32: 
    case ARM::VQRSHRNuv4i16: 
    case ARM::VQRSHRNuv8i8: 
    case ARM::VQRSHRUNv2i32: 
    case ARM::VQRSHRUNv4i16: 
    case ARM::VQRSHRUNv8i8: 
    case ARM::VQSHLsiv16i8: 
    case ARM::VQSHLsiv1i64: 
    case ARM::VQSHLsiv2i32: 
    case ARM::VQSHLsiv2i64: 
    case ARM::VQSHLsiv4i16: 
    case ARM::VQSHLsiv4i32: 
    case ARM::VQSHLsiv8i16: 
    case ARM::VQSHLsiv8i8: 
    case ARM::VQSHLsuv16i8: 
    case ARM::VQSHLsuv1i64: 
    case ARM::VQSHLsuv2i32: 
    case ARM::VQSHLsuv2i64: 
    case ARM::VQSHLsuv4i16: 
    case ARM::VQSHLsuv4i32: 
    case ARM::VQSHLsuv8i16: 
    case ARM::VQSHLsuv8i8: 
    case ARM::VQSHLsv16i8: 
    case ARM::VQSHLsv1i64: 
    case ARM::VQSHLsv2i32: 
    case ARM::VQSHLsv2i64: 
    case ARM::VQSHLsv4i16: 
    case ARM::VQSHLsv4i32: 
    case ARM::VQSHLsv8i16: 
    case ARM::VQSHLsv8i8: 
    case ARM::VQSHLuiv16i8: 
    case ARM::VQSHLuiv1i64: 
    case ARM::VQSHLuiv2i32: 
    case ARM::VQSHLuiv2i64: 
    case ARM::VQSHLuiv4i16: 
    case ARM::VQSHLuiv4i32: 
    case ARM::VQSHLuiv8i16: 
    case ARM::VQSHLuiv8i8: 
    case ARM::VQSHLuv16i8: 
    case ARM::VQSHLuv1i64: 
    case ARM::VQSHLuv2i32: 
    case ARM::VQSHLuv2i64: 
    case ARM::VQSHLuv4i16: 
    case ARM::VQSHLuv4i32: 
    case ARM::VQSHLuv8i16: 
    case ARM::VQSHLuv8i8: 
    case ARM::VQSHRNsv2i32: 
    case ARM::VQSHRNsv4i16: 
    case ARM::VQSHRNsv8i8: 
    case ARM::VQSHRNuv2i32: 
    case ARM::VQSHRNuv4i16: 
    case ARM::VQSHRNuv8i8: 
    case ARM::VQSHRUNv2i32: 
    case ARM::VQSHRUNv4i16: 
    case ARM::VQSHRUNv8i8: 
    case ARM::VQSUBsv16i8: 
    case ARM::VQSUBsv1i64: 
    case ARM::VQSUBsv2i32: 
    case ARM::VQSUBsv2i64: 
    case ARM::VQSUBsv4i16: 
    case ARM::VQSUBsv4i32: 
    case ARM::VQSUBsv8i16: 
    case ARM::VQSUBsv8i8: 
    case ARM::VQSUBuv16i8: 
    case ARM::VQSUBuv1i64: 
    case ARM::VQSUBuv2i32: 
    case ARM::VQSUBuv2i64: 
    case ARM::VQSUBuv4i16: 
    case ARM::VQSUBuv4i32: 
    case ARM::VQSUBuv8i16: 
    case ARM::VQSUBuv8i8: 
    case ARM::VRADDHNv2i32: 
    case ARM::VRADDHNv4i16: 
    case ARM::VRADDHNv8i8: 
    case ARM::VRHADDsv16i8: 
    case ARM::VRHADDsv2i32: 
    case ARM::VRHADDsv4i16: 
    case ARM::VRHADDsv4i32: 
    case ARM::VRHADDsv8i16: 
    case ARM::VRHADDsv8i8: 
    case ARM::VRHADDuv16i8: 
    case ARM::VRHADDuv2i32: 
    case ARM::VRHADDuv4i16: 
    case ARM::VRHADDuv4i32: 
    case ARM::VRHADDuv8i16: 
    case ARM::VRHADDuv8i8: 
    case ARM::VRSHLsv16i8: 
    case ARM::VRSHLsv1i64: 
    case ARM::VRSHLsv2i32: 
    case ARM::VRSHLsv2i64: 
    case ARM::VRSHLsv4i16: 
    case ARM::VRSHLsv4i32: 
    case ARM::VRSHLsv8i16: 
    case ARM::VRSHLsv8i8: 
    case ARM::VRSHLuv16i8: 
    case ARM::VRSHLuv1i64: 
    case ARM::VRSHLuv2i32: 
    case ARM::VRSHLuv2i64: 
    case ARM::VRSHLuv4i16: 
    case ARM::VRSHLuv4i32: 
    case ARM::VRSHLuv8i16: 
    case ARM::VRSHLuv8i8: 
    case ARM::VRSHRNv2i32: 
    case ARM::VRSHRNv4i16: 
    case ARM::VRSHRNv8i8: 
    case ARM::VRSHRsv16i8: 
    case ARM::VRSHRsv1i64: 
    case ARM::VRSHRsv2i32: 
    case ARM::VRSHRsv2i64: 
    case ARM::VRSHRsv4i16: 
    case ARM::VRSHRsv4i32: 
    case ARM::VRSHRsv8i16: 
    case ARM::VRSHRsv8i8: 
    case ARM::VRSHRuv16i8: 
    case ARM::VRSHRuv1i64: 
    case ARM::VRSHRuv2i32: 
    case ARM::VRSHRuv2i64: 
    case ARM::VRSHRuv4i16: 
    case ARM::VRSHRuv4i32: 
    case ARM::VRSHRuv8i16: 
    case ARM::VRSHRuv8i8: 
    case ARM::VRSUBHNv2i32: 
    case ARM::VRSUBHNv4i16: 
    case ARM::VRSUBHNv8i8: 
    case ARM::VSHLLi16: 
    case ARM::VSHLLi32: 
    case ARM::VSHLLi8: 
    case ARM::VSHLLsv2i64: 
    case ARM::VSHLLsv4i32: 
    case ARM::VSHLLsv8i16: 
    case ARM::VSHLLuv2i64: 
    case ARM::VSHLLuv4i32: 
    case ARM::VSHLLuv8i16: 
    case ARM::VSHLiv16i8: 
    case ARM::VSHLiv1i64: 
    case ARM::VSHLiv2i32: 
    case ARM::VSHLiv2i64: 
    case ARM::VSHLiv4i16: 
    case ARM::VSHLiv4i32: 
    case ARM::VSHLiv8i16: 
    case ARM::VSHLiv8i8: 
    case ARM::VSHLsv16i8: 
    case ARM::VSHLsv1i64: 
    case ARM::VSHLsv2i32: 
    case ARM::VSHLsv2i64: 
    case ARM::VSHLsv4i16: 
    case ARM::VSHLsv4i32: 
    case ARM::VSHLsv8i16: 
    case ARM::VSHLsv8i8: 
    case ARM::VSHLuv16i8: 
    case ARM::VSHLuv1i64: 
    case ARM::VSHLuv2i32: 
    case ARM::VSHLuv2i64: 
    case ARM::VSHLuv4i16: 
    case ARM::VSHLuv4i32: 
    case ARM::VSHLuv8i16: 
    case ARM::VSHLuv8i8: 
    case ARM::VSHRNv2i32: 
    case ARM::VSHRNv4i16: 
    case ARM::VSHRNv8i8: 
    case ARM::VSHRsv16i8: 
    case ARM::VSHRsv1i64: 
    case ARM::VSHRsv2i32: 
    case ARM::VSHRsv2i64: 
    case ARM::VSHRsv4i16: 
    case ARM::VSHRsv4i32: 
    case ARM::VSHRsv8i16: 
    case ARM::VSHRsv8i8: 
    case ARM::VSHRuv16i8: 
    case ARM::VSHRuv1i64: 
    case ARM::VSHRuv2i32: 
    case ARM::VSHRuv2i64: 
    case ARM::VSHRuv4i16: 
    case ARM::VSHRuv4i32: 
    case ARM::VSHRuv8i16: 
    case ARM::VSHRuv8i8: 
    case ARM::VSUBHNv2i32: 
    case ARM::VSUBHNv4i16: 
    case ARM::VSUBHNv8i8: 
    case ARM::VSUBLsv2i64: 
    case ARM::VSUBLsv4i32: 
    case ARM::VSUBLsv8i16: 
    case ARM::VSUBLuv2i64: 
    case ARM::VSUBLuv4i32: 
    case ARM::VSUBLuv8i16: 
    case ARM::VSUBWsv2i64: 
    case ARM::VSUBWsv4i32: 
    case ARM::VSUBWsv8i16: 
    case ARM::VSUBWuv2i64: 
    case ARM::VSUBWuv4i32: 
    case ARM::VSUBWuv8i16: 
    case ARM::VSUBv16i8: 
    case ARM::VSUBv1i64: 
    case ARM::VSUBv2i32: 
    case ARM::VSUBv2i64: 
    case ARM::VSUBv4i16: 
    case ARM::VSUBv4i32: 
    case ARM::VSUBv8i16: 
    case ARM::VSUBv8i8: 
    case ARM::t2LDRDpci: 
    case ARM::t2MOVTi16: 
    case ARM::tADDhirr: 
    case ARM::tMOVCCi: 
    case ARM::tMOVCCr: printOperand(MI, 2, O); break;
    case ARM::ADCSSrs: 
    case ARM::MOVCCs: 
    case ARM::RSCSrs: 
    case ARM::SBCSSrs: printSORegOperand(MI, 2, O); break;
    case ARM::BFC: 
    case ARM::t2BFC: printBitfieldInvMaskImmOperand(MI, 2, O); break;
    case ARM::CLZ: 
    case ARM::CMNzrr: 
    case ARM::CMPrr: 
    case ARM::CMPzrr: 
    case ARM::MOVi16: 
    case ARM::RBIT: 
    case ARM::REV: 
    case ARM::REV16: 
    case ARM::REVSH: 
    case ARM::SXTB16r: 
    case ARM::SXTBr: 
    case ARM::SXTHr: 
    case ARM::TEQrr: 
    case ARM::TSTrr: 
    case ARM::UXTB16r: 
    case ARM::UXTBr: 
    case ARM::UXTHr: 
    case ARM::VCNTd: 
    case ARM::VCNTq: 
    case ARM::VDUP16d: 
    case ARM::VDUP16q: 
    case ARM::VDUP32d: 
    case ARM::VDUP32q: 
    case ARM::VDUP8d: 
    case ARM::VDUP8q: 
    case ARM::VDUPfd: 
    case ARM::VDUPfq: 
    case ARM::VMOVDneon: 
    case ARM::VMOVQ: 
    case ARM::VMOVRS: 
    case ARM::VMOVSR: 
    case ARM::VMVNd: 
    case ARM::VMVNq: 
    case ARM::VREV16d8: 
    case ARM::VREV16q8: 
    case ARM::VREV32d16: 
    case ARM::VREV32d8: 
    case ARM::VREV32q16: 
    case ARM::VREV32q8: 
    case ARM::VREV64d16: 
    case ARM::VREV64d32: 
    case ARM::VREV64d8: 
    case ARM::VREV64df: 
    case ARM::VREV64q16: 
    case ARM::VREV64q32: 
    case ARM::VREV64q8: 
    case ARM::VREV64qf: 
    case ARM::VSWPd: 
    case ARM::VSWPq: 
    case ARM::VTRNd16: 
    case ARM::VTRNd32: 
    case ARM::VTRNd8: 
    case ARM::VTRNq16: 
    case ARM::VTRNq32: 
    case ARM::VTRNq8: 
    case ARM::VUZPd16: 
    case ARM::VUZPd32: 
    case ARM::VUZPd8: 
    case ARM::VUZPq16: 
    case ARM::VUZPq32: 
    case ARM::VUZPq8: 
    case ARM::VZIPd16: 
    case ARM::VZIPd32: 
    case ARM::VZIPd8: 
    case ARM::VZIPq16: 
    case ARM::VZIPq32: 
    case ARM::VZIPq8: 
    case ARM::t2CLZ: 
    case ARM::t2MOVi16: 
    case ARM::t2MOVrx: 
    case ARM::t2MVNi: 
    case ARM::t2RBIT: 
    case ARM::t2SXTB16r: 
    case ARM::t2UXTB16r: 
    case ARM::tCMNz: 
    case ARM::tCMPhir: 
    case ARM::tCMPi8: 
    case ARM::tCMPr: 
    case ARM::tCMPzhir: 
    case ARM::tCMPzi8: 
    case ARM::tCMPzr: 
    case ARM::tLDRcp: 
    case ARM::tREV: 
    case ARM::tREV16: 
    case ARM::tREVSH: 
    case ARM::tSXTB: 
    case ARM::tSXTH: 
    case ARM::tTST: 
    case ARM::tUXTB: 
    case ARM::tUXTH: printOperand(MI, 1, O); break;
    case ARM::CMNzri: 
    case ARM::CMPri: 
    case ARM::CMPzri: 
    case ARM::TEQri: 
    case ARM::TSTri: printSOImmOperand(MI, 1, O); break;
    case ARM::CMNzrs: 
    case ARM::CMPrs: 
    case ARM::CMPzrs: 
    case ARM::TEQrs: 
    case ARM::TSTrs: printSORegOperand(MI, 1, O); break;
    case ARM::LDC2L_OFFSET: 
    case ARM::LDC2_OFFSET: 
    case ARM::LDCL_OFFSET: 
    case ARM::LDC_OFFSET: 
    case ARM::STC2L_OFFSET: 
    case ARM::STC2_OFFSET: 
    case ARM::STCL_OFFSET: 
    case ARM::STC_OFFSET: printAddrMode2Operand(MI, 2, O); break;
    case ARM::LDR: 
    case ARM::LDRB: 
    case ARM::LDRcp: 
    case ARM::STR: 
    case ARM::STRB: printAddrMode2Operand(MI, 1, O); break;
    case ARM::LDRD: 
    case ARM::STRD: printAddrMode3Operand(MI, 2, O); break;
    case ARM::LDRH: 
    case ARM::LDRSB: 
    case ARM::LDRSH: 
    case ARM::STRH: printAddrMode3Operand(MI, 1, O); break;
    case ARM::MOVi2pieces: printSOImm2PartOperand(MI, 1, O); break;
    case ARM::VABALsv2i64: 
    case ARM::VABALsv4i32: 
    case ARM::VABALsv8i16: 
    case ARM::VABALuv2i64: 
    case ARM::VABALuv4i32: 
    case ARM::VABALuv8i16: 
    case ARM::VABAsv16i8: 
    case ARM::VABAsv2i32: 
    case ARM::VABAsv4i16: 
    case ARM::VABAsv4i32: 
    case ARM::VABAsv8i16: 
    case ARM::VABAsv8i8: 
    case ARM::VABAuv16i8: 
    case ARM::VABAuv2i32: 
    case ARM::VABAuv4i16: 
    case ARM::VABAuv4i32: 
    case ARM::VABAuv8i16: 
    case ARM::VABAuv8i8: 
    case ARM::VMLALsv2i64: 
    case ARM::VMLALsv4i32: 
    case ARM::VMLALsv8i16: 
    case ARM::VMLALuv2i64: 
    case ARM::VMLALuv4i32: 
    case ARM::VMLALuv8i16: 
    case ARM::VMLAv16i8: 
    case ARM::VMLAv2i32: 
    case ARM::VMLAv4i16: 
    case ARM::VMLAv4i32: 
    case ARM::VMLAv8i16: 
    case ARM::VMLAv8i8: 
    case ARM::VMLSLsv2i64: 
    case ARM::VMLSLsv4i32: 
    case ARM::VMLSLsv8i16: 
    case ARM::VMLSLuv2i64: 
    case ARM::VMLSLuv4i32: 
    case ARM::VMLSLuv8i16: 
    case ARM::VMLSv16i8: 
    case ARM::VMLSv2i32: 
    case ARM::VMLSv4i16: 
    case ARM::VMLSv4i32: 
    case ARM::VMLSv8i16: 
    case ARM::VMLSv8i8: 
    case ARM::VQDMLALv2i64: 
    case ARM::VQDMLALv4i32: 
    case ARM::VQDMLSLv2i64: 
    case ARM::VQDMLSLv4i32: 
    case ARM::VRSRAsv16i8: 
    case ARM::VRSRAsv1i64: 
    case ARM::VRSRAsv2i32: 
    case ARM::VRSRAsv2i64: 
    case ARM::VRSRAsv4i16: 
    case ARM::VRSRAsv4i32: 
    case ARM::VRSRAsv8i16: 
    case ARM::VRSRAsv8i8: 
    case ARM::VRSRAuv16i8: 
    case ARM::VRSRAuv1i64: 
    case ARM::VRSRAuv2i32: 
    case ARM::VRSRAuv2i64: 
    case ARM::VRSRAuv4i16: 
    case ARM::VRSRAuv4i32: 
    case ARM::VRSRAuv8i16: 
    case ARM::VRSRAuv8i8: 
    case ARM::VSRAsv16i8: 
    case ARM::VSRAsv1i64: 
    case ARM::VSRAsv2i32: 
    case ARM::VSRAsv2i64: 
    case ARM::VSRAsv4i16: 
    case ARM::VSRAsv4i32: 
    case ARM::VSRAsv8i16: 
    case ARM::VSRAsv8i8: 
    case ARM::VSRAuv16i8: 
    case ARM::VSRAuv1i64: 
    case ARM::VSRAuv2i32: 
    case ARM::VSRAuv2i64: 
    case ARM::VSRAuv4i16: 
    case ARM::VSRAuv4i32: 
    case ARM::VSRAuv8i16: 
    case ARM::VSRAuv8i8: 
    case ARM::tADDi3: 
    case ARM::tADDrr: 
    case ARM::tASRri: 
    case ARM::tLSLri: 
    case ARM::tLSRri: 
    case ARM::tSUBi3: 
    case ARM::tSUBrr: printOperand(MI, 3, O); break;
    case ARM::VDUPfdf: 
    case ARM::VDUPfqf: printOperand(MI, 1, O, "lane"); break;
    case ARM::VLDMQ: 
    case ARM::VSTMQ: printOperand(MI, 0, O, "dregpair"); break;
    case ARM::VLDRD: 
    case ARM::VLDRS: 
    case ARM::VSTRD: 
    case ARM::VSTRS: printAddrMode5Operand(MI, 1, O); break;
    case ARM::t2LDRBT: 
    case ARM::t2LDRBi8: 
    case ARM::t2LDRHT: 
    case ARM::t2LDRHi8: 
    case ARM::t2LDRSBT: 
    case ARM::t2LDRSBi8: 
    case ARM::t2LDRSHT: 
    case ARM::t2LDRSHi8: 
    case ARM::t2LDRT: 
    case ARM::t2LDRi8: 
    case ARM::t2STRBT: 
    case ARM::t2STRBi8: 
    case ARM::t2STRHT: 
    case ARM::t2STRHi8: 
    case ARM::t2STRT: 
    case ARM::t2STRi8: printT2AddrModeImm8Operand(MI, 1, O); break;
    case ARM::t2LDRDi8: 
    case ARM::t2STRDi8: printT2AddrModeImm8s4Operand(MI, 2, O); break;
    case ARM::tADDrSPi: printThumbS4ImmOperand(MI, 2, O); break;
    case ARM::tLDR: 
    case ARM::tLDRi: 
    case ARM::tSTR: 
    case ARM::tSTRi: printThumbAddrModeS4Operand(MI, 1, O); break;
    case ARM::tLDRB: 
    case ARM::tLDRBi: 
    case ARM::tSTRB: 
    case ARM::tSTRBi: printThumbAddrModeS1Operand(MI, 1, O); break;
    case ARM::tLDRH: 
    case ARM::tLDRHi: 
    case ARM::tSTRH: 
    case ARM::tSTRHi: printThumbAddrModeS2Operand(MI, 1, O); break;
    case ARM::tLDRSB: 
    case ARM::tLDRSH: printThumbAddrModeRROperand(MI, 1, O); break;
    case ARM::tLDRspi: 
    case ARM::tRestore: 
    case ARM::tSTRspi: 
    case ARM::tSpill: printThumbAddrModeSPOperand(MI, 1, O); break;
    case ARM::tMUL: printOperand(MI, 0, O); break;
    }
    return;
    break;
  case ARM::ADCrr:
  case ARM::ADDrr:
  case ARM::ANDrr:
  case ARM::BICrr:
  case ARM::BKPT:
  case ARM::BXJ:
  case ARM::Bcc:
  case ARM::DBG:
  case ARM::EORrr:
  case ARM::MOVr:
  case ARM::MOVr_TC:
  case ARM::MSR:
  case ARM::MSRsys:
  case ARM::MUL:
  case ARM::MVNr:
  case ARM::ORRrr:
  case ARM::RFE:
  case ARM::RSBrr:
  case ARM::RSCrr:
  case ARM::SBCrr:
  case ARM::SMC:
  case ARM::SRS:
  case ARM::SRSW:
  case ARM::SUBrr:
  case ARM::SVC:
  case ARM::VABSv16i8:
  case ARM::VABSv2i32:
  case ARM::VABSv4i16:
  case ARM::VABSv4i32:
  case ARM::VABSv8i16:
  case ARM::VABSv8i8:
  case ARM::VCLSv16i8:
  case ARM::VCLSv2i32:
  case ARM::VCLSv4i16:
  case ARM::VCLSv4i32:
  case ARM::VCLSv8i16:
  case ARM::VCLSv8i8:
  case ARM::VCLZv16i8:
  case ARM::VCLZv2i32:
  case ARM::VCLZv4i16:
  case ARM::VCLZv4i32:
  case ARM::VCLZv8i16:
  case ARM::VCLZv8i8:
  case ARM::VMOVLsv2i64:
  case ARM::VMOVLsv4i32:
  case ARM::VMOVLsv8i16:
  case ARM::VMOVLuv2i64:
  case ARM::VMOVLuv4i32:
  case ARM::VMOVLuv8i16:
  case ARM::VMOVNv2i32:
  case ARM::VMOVNv4i16:
  case ARM::VMOVNv8i8:
  case ARM::VNEGs16d:
  case ARM::VNEGs16q:
  case ARM::VNEGs32d:
  case ARM::VNEGs32q:
  case ARM::VNEGs8d:
  case ARM::VNEGs8q:
  case ARM::VPADALsv16i8:
  case ARM::VPADALsv2i32:
  case ARM::VPADALsv4i16:
  case ARM::VPADALsv4i32:
  case ARM::VPADALsv8i16:
  case ARM::VPADALsv8i8:
  case ARM::VPADALuv16i8:
  case ARM::VPADALuv2i32:
  case ARM::VPADALuv4i16:
  case ARM::VPADALuv4i32:
  case ARM::VPADALuv8i16:
  case ARM::VPADALuv8i8:
  case ARM::VPADDLsv16i8:
  case ARM::VPADDLsv2i32:
  case ARM::VPADDLsv4i16:
  case ARM::VPADDLsv4i32:
  case ARM::VPADDLsv8i16:
  case ARM::VPADDLsv8i8:
  case ARM::VPADDLuv16i8:
  case ARM::VPADDLuv2i32:
  case ARM::VPADDLuv4i16:
  case ARM::VPADDLuv4i32:
  case ARM::VPADDLuv8i16:
  case ARM::VPADDLuv8i8:
  case ARM::VQABSv16i8:
  case ARM::VQABSv2i32:
  case ARM::VQABSv4i16:
  case ARM::VQABSv4i32:
  case ARM::VQABSv8i16:
  case ARM::VQABSv8i8:
  case ARM::VQMOVNsuv2i32:
  case ARM::VQMOVNsuv4i16:
  case ARM::VQMOVNsuv8i8:
  case ARM::VQMOVNsv2i32:
  case ARM::VQMOVNsv4i16:
  case ARM::VQMOVNsv8i8:
  case ARM::VQMOVNuv2i32:
  case ARM::VQMOVNuv4i16:
  case ARM::VQMOVNuv8i8:
  case ARM::VQNEGv16i8:
  case ARM::VQNEGv2i32:
  case ARM::VQNEGv4i16:
  case ARM::VQNEGv4i32:
  case ARM::VQNEGv8i16:
  case ARM::VQNEGv8i8:
  case ARM::VRECPEd:
  case ARM::VRECPEq:
  case ARM::VRSQRTEd:
  case ARM::VRSQRTEq:
  case ARM::t2BXJ:
  case ARM::t2DBG:
  case ARM::t2LEApcrel:
  case ARM::t2MSR:
  case ARM::t2MSRsys:
  case ARM::t2RFEDB:
  case ARM::t2RFEIA:
  case ARM::t2SMC:
  case ARM::t2SRSDB:
  case ARM::t2SRSDBW:
  case ARM::t2SRSIA:
  case ARM::t2SRSIAW:
  case ARM::tADC:
  case ARM::tADDi8:
  case ARM::tADDrSP:
  case ARM::tADDspr:
  case ARM::tAND:
  case ARM::tASRrr:
  case ARM::tBIC:
  case ARM::tBcc:
  case ARM::tCBNZ:
  case ARM::tCBZ:
  case ARM::tEOR:
  case ARM::tLSLrr:
  case ARM::tLSRrr:
  case ARM::tMOVSr:
  case ARM::tMOVgpr2gpr:
  case ARM::tMOVgpr2tgpr:
  case ARM::tMOVr:
  case ARM::tMOVtgpr2gpr:
  case ARM::tORR:
  case ARM::tROR:
  case ARM::tSBC:
  case ARM::tSUBi8:
  case ARM::tSVC:
    return;
    break;
  case ARM::ADDSri:
  case ARM::ADDSrr:
  case ARM::ADDSrs:
  case ARM::ANDSri:
  case ARM::ANDSrr:
  case ARM::ANDSrs:
  case ARM::QADD:
  case ARM::QADD16:
  case ARM::QADD8:
  case ARM::QASX:
  case ARM::QDADD:
  case ARM::QDSUB:
  case ARM::QSAX:
  case ARM::QSUB:
  case ARM::QSUB16:
  case ARM::QSUB8:
  case ARM::RSBSri:
  case ARM::RSBSrs:
  case ARM::SADD16:
  case ARM::SADD8:
  case ARM::SASX:
  case ARM::SEL:
  case ARM::SHADD16:
  case ARM::SHADD8:
  case ARM::SHASX:
  case ARM::SHSAX:
  case ARM::SHSUB16:
  case ARM::SHSUB8:
  case ARM::SMMUL:
  case ARM::SMMULR:
  case ARM::SMUAD:
  case ARM::SMUADX:
  case ARM::SMULBB:
  case ARM::SMULBT:
  case ARM::SMULTB:
  case ARM::SMULTT:
  case ARM::SMULWB:
  case ARM::SMULWT:
  case ARM::SMUSD:
  case ARM::SMUSDX:
  case ARM::SSAT16:
  case ARM::SSAX:
  case ARM::SSUB16:
  case ARM::SSUB8:
  case ARM::SUBSri:
  case ARM::SUBSrr:
  case ARM::SUBSrs:
  case ARM::SXTAB16rr:
  case ARM::SXTABrr:
  case ARM::SXTAHrr:
  case ARM::UADD16:
  case ARM::UADD8:
  case ARM::UASX:
  case ARM::UHADD16:
  case ARM::UHADD8:
  case ARM::UHASX:
  case ARM::UHSAX:
  case ARM::UHSUB16:
  case ARM::UHSUB8:
  case ARM::UQADD16:
  case ARM::UQADD8:
  case ARM::UQASX:
  case ARM::UQSAX:
  case ARM::UQSUB16:
  case ARM::UQSUB8:
  case ARM::USAD8:
  case ARM::USAT16:
  case ARM::USAX:
  case ARM::USUB16:
  case ARM::USUB8:
  case ARM::UXTAB16rr:
  case ARM::UXTABrr:
  case ARM::UXTAHrr:
  case ARM::VANDd:
  case ARM::VANDq:
  case ARM::VBICd:
  case ARM::VBICq:
  case ARM::VEORd:
  case ARM::VEORq:
  case ARM::VMOVDRR:
  case ARM::VMOVRRD:
  case ARM::VORNd:
  case ARM::VORNq:
  case ARM::VORRd:
  case ARM::VORRq:
  case ARM::VTSTv16i8:
  case ARM::VTSTv2i32:
  case ARM::VTSTv4i16:
  case ARM::VTSTv4i32:
  case ARM::VTSTv8i16:
  case ARM::VTSTv8i8:
  case ARM::t2ADCSri:
  case ARM::t2ADCri:
  case ARM::t2ADDrSPi12:
  case ARM::t2ADDri12:
  case ARM::t2ANDri:
  case ARM::t2BICri:
  case ARM::t2EORri:
  case ARM::t2MUL:
  case ARM::t2ORNri:
  case ARM::t2ORNrr:
  case ARM::t2ORNrs:
  case ARM::t2ORRri:
  case ARM::t2QADD:
  case ARM::t2QADD16:
  case ARM::t2QADD8:
  case ARM::t2QASX:
  case ARM::t2QDADD:
  case ARM::t2QDSUB:
  case ARM::t2QSAX:
  case ARM::t2QSUB:
  case ARM::t2QSUB16:
  case ARM::t2QSUB8:
  case ARM::t2RSBSrs:
  case ARM::t2RSBrr:
  case ARM::t2RSBrs:
  case ARM::t2SADD16:
  case ARM::t2SADD8:
  case ARM::t2SASX:
  case ARM::t2SBCSri:
  case ARM::t2SBCri:
  case ARM::t2SDIV:
  case ARM::t2SEL:
  case ARM::t2SHADD16:
  case ARM::t2SHADD8:
  case ARM::t2SHASX:
  case ARM::t2SHSAX:
  case ARM::t2SHSUB16:
  case ARM::t2SHSUB8:
  case ARM::t2SMMUL:
  case ARM::t2SMMULR:
  case ARM::t2SMUAD:
  case ARM::t2SMUADX:
  case ARM::t2SMULBB:
  case ARM::t2SMULBT:
  case ARM::t2SMULTB:
  case ARM::t2SMULTT:
  case ARM::t2SMULWB:
  case ARM::t2SMULWT:
  case ARM::t2SMUSD:
  case ARM::t2SMUSDX:
  case ARM::t2SSAT16:
  case ARM::t2SSAX:
  case ARM::t2SSUB16:
  case ARM::t2SSUB8:
  case ARM::t2SUBrSPi12:
  case ARM::t2SUBrSPs:
  case ARM::t2SUBri12:
  case ARM::t2SXTAB16rr:
  case ARM::t2SXTABrr:
  case ARM::t2SXTAHrr:
  case ARM::t2UADD16:
  case ARM::t2UADD8:
  case ARM::t2UASX:
  case ARM::t2UDIV:
  case ARM::t2UHADD16:
  case ARM::t2UHADD8:
  case ARM::t2UHASX:
  case ARM::t2UHSAX:
  case ARM::t2UHSUB16:
  case ARM::t2UHSUB8:
  case ARM::t2UQADD16:
  case ARM::t2UQADD8:
  case ARM::t2UQASX:
  case ARM::t2UQSAX:
  case ARM::t2UQSUB16:
  case ARM::t2UQSUB8:
  case ARM::t2USAD8:
  case ARM::t2USAT16:
  case ARM::t2USAX:
  case ARM::t2USUB16:
  case ARM::t2USUB8:
  case ARM::t2UXTAB16rr:
  case ARM::t2UXTABrr:
  case ARM::t2UXTAHrr:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::ADDSri: 
    case ARM::ANDSri: 
    case ARM::RSBSri: 
    case ARM::SUBSri: printSOImmOperand(MI, 2, O); break;
    case ARM::ADDSrr: 
    case ARM::ANDSrr: 
    case ARM::QADD: 
    case ARM::QADD16: 
    case ARM::QADD8: 
    case ARM::QASX: 
    case ARM::QDADD: 
    case ARM::QDSUB: 
    case ARM::QSAX: 
    case ARM::QSUB: 
    case ARM::QSUB16: 
    case ARM::QSUB8: 
    case ARM::SADD16: 
    case ARM::SADD8: 
    case ARM::SASX: 
    case ARM::SEL: 
    case ARM::SHADD16: 
    case ARM::SHADD8: 
    case ARM::SHASX: 
    case ARM::SHSAX: 
    case ARM::SHSUB16: 
    case ARM::SHSUB8: 
    case ARM::SMMUL: 
    case ARM::SMMULR: 
    case ARM::SMUAD: 
    case ARM::SMUADX: 
    case ARM::SMULBB: 
    case ARM::SMULBT: 
    case ARM::SMULTB: 
    case ARM::SMULTT: 
    case ARM::SMULWB: 
    case ARM::SMULWT: 
    case ARM::SMUSD: 
    case ARM::SMUSDX: 
    case ARM::SSAT16: 
    case ARM::SSAX: 
    case ARM::SSUB16: 
    case ARM::SSUB8: 
    case ARM::SUBSrr: 
    case ARM::SXTAB16rr: 
    case ARM::SXTABrr: 
    case ARM::SXTAHrr: 
    case ARM::UADD16: 
    case ARM::UADD8: 
    case ARM::UASX: 
    case ARM::UHADD16: 
    case ARM::UHADD8: 
    case ARM::UHASX: 
    case ARM::UHSAX: 
    case ARM::UHSUB16: 
    case ARM::UHSUB8: 
    case ARM::UQADD16: 
    case ARM::UQADD8: 
    case ARM::UQASX: 
    case ARM::UQSAX: 
    case ARM::UQSUB16: 
    case ARM::UQSUB8: 
    case ARM::USAD8: 
    case ARM::USAT16: 
    case ARM::USAX: 
    case ARM::USUB16: 
    case ARM::USUB8: 
    case ARM::UXTAB16rr: 
    case ARM::UXTABrr: 
    case ARM::UXTAHrr: 
    case ARM::VANDd: 
    case ARM::VANDq: 
    case ARM::VBICd: 
    case ARM::VBICq: 
    case ARM::VEORd: 
    case ARM::VEORq: 
    case ARM::VMOVDRR: 
    case ARM::VMOVRRD: 
    case ARM::VORNd: 
    case ARM::VORNq: 
    case ARM::VORRd: 
    case ARM::VORRq: 
    case ARM::VTSTv16i8: 
    case ARM::VTSTv2i32: 
    case ARM::VTSTv4i16: 
    case ARM::VTSTv4i32: 
    case ARM::VTSTv8i16: 
    case ARM::VTSTv8i8: 
    case ARM::t2ADCSri: 
    case ARM::t2ADCri: 
    case ARM::t2ADDrSPi12: 
    case ARM::t2ADDri12: 
    case ARM::t2ANDri: 
    case ARM::t2BICri: 
    case ARM::t2EORri: 
    case ARM::t2MUL: 
    case ARM::t2ORNri: 
    case ARM::t2ORNrr: 
    case ARM::t2ORRri: 
    case ARM::t2QADD: 
    case ARM::t2QADD16: 
    case ARM::t2QADD8: 
    case ARM::t2QASX: 
    case ARM::t2QDADD: 
    case ARM::t2QDSUB: 
    case ARM::t2QSAX: 
    case ARM::t2QSUB: 
    case ARM::t2QSUB16: 
    case ARM::t2QSUB8: 
    case ARM::t2RSBrr: 
    case ARM::t2SADD16: 
    case ARM::t2SADD8: 
    case ARM::t2SASX: 
    case ARM::t2SBCSri: 
    case ARM::t2SBCri: 
    case ARM::t2SDIV: 
    case ARM::t2SEL: 
    case ARM::t2SHADD16: 
    case ARM::t2SHADD8: 
    case ARM::t2SHASX: 
    case ARM::t2SHSAX: 
    case ARM::t2SHSUB16: 
    case ARM::t2SHSUB8: 
    case ARM::t2SMMUL: 
    case ARM::t2SMMULR: 
    case ARM::t2SMUAD: 
    case ARM::t2SMUADX: 
    case ARM::t2SMULBB: 
    case ARM::t2SMULBT: 
    case ARM::t2SMULTB: 
    case ARM::t2SMULTT: 
    case ARM::t2SMULWB: 
    case ARM::t2SMULWT: 
    case ARM::t2SMUSD: 
    case ARM::t2SMUSDX: 
    case ARM::t2SSAT16: 
    case ARM::t2SSAX: 
    case ARM::t2SSUB16: 
    case ARM::t2SSUB8: 
    case ARM::t2SUBrSPi12: 
    case ARM::t2SUBri12: 
    case ARM::t2SXTAB16rr: 
    case ARM::t2SXTABrr: 
    case ARM::t2SXTAHrr: 
    case ARM::t2UADD16: 
    case ARM::t2UADD8: 
    case ARM::t2UASX: 
    case ARM::t2UDIV: 
    case ARM::t2UHADD16: 
    case ARM::t2UHADD8: 
    case ARM::t2UHASX: 
    case ARM::t2UHSAX: 
    case ARM::t2UHSUB16: 
    case ARM::t2UHSUB8: 
    case ARM::t2UQADD16: 
    case ARM::t2UQADD8: 
    case ARM::t2UQASX: 
    case ARM::t2UQSAX: 
    case ARM::t2UQSUB16: 
    case ARM::t2UQSUB8: 
    case ARM::t2USAD8: 
    case ARM::t2USAT16: 
    case ARM::t2USAX: 
    case ARM::t2USUB16: 
    case ARM::t2USUB8: 
    case ARM::t2UXTAB16rr: 
    case ARM::t2UXTABrr: 
    case ARM::t2UXTAHrr: printOperand(MI, 2, O); break;
    case ARM::ADDSrs: 
    case ARM::ANDSrs: 
    case ARM::RSBSrs: 
    case ARM::SUBSrs: printSORegOperand(MI, 2, O); break;
    case ARM::t2ORNrs: 
    case ARM::t2RSBSrs: 
    case ARM::t2RSBrs: 
    case ARM::t2SUBrSPs: printT2SOOperand(MI, 2, O); break;
    }
    return;
    break;
  case ARM::BCCZi64:
    O << " GPR:"; 
    printOperand(MI, 1, O); 
    O << ", GPR:"; 
    printOperand(MI, 2, O); 
    O << ", 0, 0, imm:"; 
    printOperand(MI, 0, O); 
    return;
    break;
  case ARM::BFI:
  case ARM::MLA:
  case ARM::SMLAL:
  case ARM::SMULL:
  case ARM::UMLAL:
  case ARM::UMULL:
  case ARM::VBIFd:
  case ARM::VBIFq:
  case ARM::VBITd:
  case ARM::VBITq:
  case ARM::VBSLd:
  case ARM::VBSLq:
  case ARM::VSLIv16i8:
  case ARM::VSLIv1i64:
  case ARM::VSLIv2i32:
  case ARM::VSLIv2i64:
  case ARM::VSLIv4i16:
  case ARM::VSLIv4i32:
  case ARM::VSLIv8i16:
  case ARM::VSLIv8i8:
  case ARM::VSRIv16i8:
  case ARM::VSRIv1i64:
  case ARM::VSRIv2i32:
  case ARM::VSRIv2i64:
  case ARM::VSRIv4i16:
  case ARM::VSRIv4i32:
  case ARM::VSRIv8i16:
  case ARM::VSRIv8i8:
  case ARM::t2BFI:
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::BFI: 
    case ARM::t2BFI: printBitfieldInvMaskImmOperand(MI, 3, O); break;
    case ARM::MLA: 
    case ARM::SMLAL: 
    case ARM::SMULL: 
    case ARM::UMLAL: 
    case ARM::UMULL: 
    case ARM::VBIFd: 
    case ARM::VBIFq: 
    case ARM::VBITd: 
    case ARM::VBITq: 
    case ARM::VBSLd: 
    case ARM::VBSLq: 
    case ARM::VSLIv16i8: 
    case ARM::VSLIv1i64: 
    case ARM::VSLIv2i32: 
    case ARM::VSLIv2i64: 
    case ARM::VSLIv4i16: 
    case ARM::VSLIv4i32: 
    case ARM::VSLIv8i16: 
    case ARM::VSLIv8i8: 
    case ARM::VSRIv16i8: 
    case ARM::VSRIv1i64: 
    case ARM::VSRIv2i32: 
    case ARM::VSRIv2i64: 
    case ARM::VSRIv4i16: 
    case ARM::VSRIv4i32: 
    case ARM::VSRIv8i16: 
    case ARM::VSRIv8i8: printOperand(MI, 3, O); break;
    }
    return;
    break;
  case ARM::BR_JTadd:
  case ARM::FCONSTD:
  case ARM::FCONSTS:
  case ARM::MOVrx:
  case ARM::MRS:
  case ARM::MRSsys:
  case ARM::RFEW:
  case ARM::VABSD:
  case ARM::VABSS:
  case ARM::VABSfd:
  case ARM::VABSfd_sfp:
  case ARM::VABSfq:
  case ARM::VCEQzv16i8:
  case ARM::VCEQzv2i32:
  case ARM::VCEQzv4i16:
  case ARM::VCEQzv4i32:
  case ARM::VCEQzv8i16:
  case ARM::VCEQzv8i8:
  case ARM::VCGEzv16i8:
  case ARM::VCGEzv2i32:
  case ARM::VCGEzv4i16:
  case ARM::VCGEzv4i32:
  case ARM::VCGEzv8i16:
  case ARM::VCGEzv8i8:
  case ARM::VCGTzv16i8:
  case ARM::VCGTzv2i32:
  case ARM::VCGTzv4i16:
  case ARM::VCGTzv4i32:
  case ARM::VCGTzv8i16:
  case ARM::VCGTzv8i8:
  case ARM::VCLEzv16i8:
  case ARM::VCLEzv2i32:
  case ARM::VCLEzv4i16:
  case ARM::VCLEzv4i32:
  case ARM::VCLEzv8i16:
  case ARM::VCLEzv8i8:
  case ARM::VCLTzv16i8:
  case ARM::VCLTzv2i32:
  case ARM::VCLTzv4i16:
  case ARM::VCLTzv4i32:
  case ARM::VCLTzv8i16:
  case ARM::VCLTzv8i8:
  case ARM::VCMPD:
  case ARM::VCMPED:
  case ARM::VCMPES:
  case ARM::VCMPS:
  case ARM::VCVTf2xsd:
  case ARM::VCVTf2xsq:
  case ARM::VCVTf2xud:
  case ARM::VCVTf2xuq:
  case ARM::VCVTxs2fd:
  case ARM::VCVTxs2fq:
  case ARM::VCVTxu2fd:
  case ARM::VCVTxu2fq:
  case ARM::VLD1q:
  case ARM::VMOVD:
  case ARM::VMOVDcc:
  case ARM::VMOVS:
  case ARM::VMOVScc:
  case ARM::VMRS:
  case ARM::VNEGD:
  case ARM::VNEGDcc:
  case ARM::VNEGS:
  case ARM::VNEGScc:
  case ARM::VNEGf32q:
  case ARM::VNEGfd:
  case ARM::VNEGfd_sfp:
  case ARM::VRECPEfd:
  case ARM::VRECPEfq:
  case ARM::VRSQRTEfd:
  case ARM::VRSQRTEfq:
  case ARM::VSLTOD:
  case ARM::VSLTOS:
  case ARM::VSQRTD:
  case ARM::VSQRTS:
  case ARM::VTOSLD:
  case ARM::VTOSLS:
  case ARM::VTOULD:
  case ARM::VTOULS:
  case ARM::VULTOD:
  case ARM::VULTOS:
  case ARM::t2CMNzri:
  case ARM::t2CMNzrr:
  case ARM::t2CMNzrs:
  case ARM::t2CMPri:
  case ARM::t2CMPrr:
  case ARM::t2CMPrs:
  case ARM::t2CMPzri:
  case ARM::t2CMPzrr:
  case ARM::t2CMPzrs:
  case ARM::t2LDRBi12:
  case ARM::t2LDRBpci:
  case ARM::t2LDRBs:
  case ARM::t2LDRHi12:
  case ARM::t2LDRHpci:
  case ARM::t2LDRHs:
  case ARM::t2LDRSBi12:
  case ARM::t2LDRSBpci:
  case ARM::t2LDRSBs:
  case ARM::t2LDRSHi12:
  case ARM::t2LDRSHpci:
  case ARM::t2LDRSHs:
  case ARM::t2LDRi12:
  case ARM::t2LDRpci:
  case ARM::t2LDRs:
  case ARM::t2MOVCCi:
  case ARM::t2MOVCCr:
  case ARM::t2MOVi:
  case ARM::t2MOVr:
  case ARM::t2MRS:
  case ARM::t2MRSsys:
  case ARM::t2MVNr:
  case ARM::t2MVNs:
  case ARM::t2PLDWi12:
  case ARM::t2PLDWr:
  case ARM::t2PLDi12:
  case ARM::t2PLDr:
  case ARM::t2PLIi12:
  case ARM::t2PLIr:
  case ARM::t2REV:
  case ARM::t2REV16:
  case ARM::t2REVSH:
  case ARM::t2RFEDBW:
  case ARM::t2RFEIAW:
  case ARM::t2STRBi12:
  case ARM::t2STRBs:
  case ARM::t2STRHi12:
  case ARM::t2STRHs:
  case ARM::t2STRi12:
  case ARM::t2STRs:
  case ARM::t2SXTBr:
  case ARM::t2SXTHr:
  case ARM::t2TBBgen:
  case ARM::t2TBHgen:
  case ARM::t2TEQri:
  case ARM::t2TEQrr:
  case ARM::t2TEQrs:
  case ARM::t2TSTri:
  case ARM::t2TSTrr:
  case ARM::t2TSTrs:
  case ARM::t2UXTBr:
  case ARM::t2UXTHr:
    switch (MI->getOpcode()) {
    case ARM::BR_JTadd: printJTBlockOperand(MI, 2, O); break;
    case ARM::FCONSTD: printVFPf64ImmOperand(MI, 1, O); break;
    case ARM::FCONSTS: printVFPf32ImmOperand(MI, 1, O); break;
    case ARM::MOVrx: O << ", rrx"; break;
    case ARM::MRS: 
    case ARM::t2MRS: O << ", cpsr"; break;
    case ARM::MRSsys: 
    case ARM::t2MRSsys: O << ", spsr"; break;
    case ARM::RFEW: 
    case ARM::t2RFEDBW: 
    case ARM::t2RFEIAW: O << '!'; break;
    case ARM::VABSD: 
    case ARM::VABSS: 
    case ARM::VABSfd: 
    case ARM::VABSfd_sfp: 
    case ARM::VABSfq: 
    case ARM::VCMPD: 
    case ARM::VCMPED: 
    case ARM::VCMPES: 
    case ARM::VCMPS: 
    case ARM::VMOVD: 
    case ARM::VMOVS: 
    case ARM::VNEGD: 
    case ARM::VNEGS: 
    case ARM::VNEGf32q: 
    case ARM::VNEGfd: 
    case ARM::VNEGfd_sfp: 
    case ARM::VRECPEfd: 
    case ARM::VRECPEfq: 
    case ARM::VRSQRTEfd: 
    case ARM::VRSQRTEfq: 
    case ARM::VSQRTD: 
    case ARM::VSQRTS: 
    case ARM::t2CMNzri: 
    case ARM::t2CMNzrr: 
    case ARM::t2CMPri: 
    case ARM::t2CMPrr: 
    case ARM::t2CMPzri: 
    case ARM::t2CMPzrr: 
    case ARM::t2LDRBpci: 
    case ARM::t2LDRHpci: 
    case ARM::t2LDRSBpci: 
    case ARM::t2LDRSHpci: 
    case ARM::t2LDRpci: 
    case ARM::t2MOVi: 
    case ARM::t2MOVr: 
    case ARM::t2MVNr: 
    case ARM::t2REV: 
    case ARM::t2REV16: 
    case ARM::t2REVSH: 
    case ARM::t2SXTBr: 
    case ARM::t2SXTHr: 
    case ARM::t2TEQri: 
    case ARM::t2TEQrr: 
    case ARM::t2TSTri: 
    case ARM::t2TSTrr: 
    case ARM::t2UXTBr: 
    case ARM::t2UXTHr: printOperand(MI, 1, O); break;
    case ARM::VCEQzv16i8: 
    case ARM::VCEQzv2i32: 
    case ARM::VCEQzv4i16: 
    case ARM::VCEQzv4i32: 
    case ARM::VCEQzv8i16: 
    case ARM::VCEQzv8i8: 
    case ARM::VCGEzv16i8: 
    case ARM::VCGEzv2i32: 
    case ARM::VCGEzv4i16: 
    case ARM::VCGEzv4i32: 
    case ARM::VCGEzv8i16: 
    case ARM::VCGEzv8i8: 
    case ARM::VCGTzv16i8: 
    case ARM::VCGTzv2i32: 
    case ARM::VCGTzv4i16: 
    case ARM::VCGTzv4i32: 
    case ARM::VCGTzv8i16: 
    case ARM::VCGTzv8i8: 
    case ARM::VCLEzv16i8: 
    case ARM::VCLEzv2i32: 
    case ARM::VCLEzv4i16: 
    case ARM::VCLEzv4i32: 
    case ARM::VCLEzv8i16: 
    case ARM::VCLEzv8i8: 
    case ARM::VCLTzv16i8: 
    case ARM::VCLTzv2i32: 
    case ARM::VCLTzv4i16: 
    case ARM::VCLTzv4i32: 
    case ARM::VCLTzv8i16: 
    case ARM::VCLTzv8i8: O << ", #0"; break;
    case ARM::VCVTf2xsd: 
    case ARM::VCVTf2xsq: 
    case ARM::VCVTf2xud: 
    case ARM::VCVTf2xuq: 
    case ARM::VCVTxs2fd: 
    case ARM::VCVTxs2fq: 
    case ARM::VCVTxu2fd: 
    case ARM::VCVTxu2fq: 
    case ARM::VMOVDcc: 
    case ARM::VMOVScc: 
    case ARM::VNEGDcc: 
    case ARM::VNEGScc: 
    case ARM::VSLTOD: 
    case ARM::VSLTOS: 
    case ARM::VTOSLD: 
    case ARM::VTOSLS: 
    case ARM::VTOULD: 
    case ARM::VTOULS: 
    case ARM::VULTOD: 
    case ARM::VULTOS: 
    case ARM::t2MOVCCi: 
    case ARM::t2MOVCCr: printOperand(MI, 2, O); break;
    case ARM::VLD1q: printAddrMode6Operand(MI, 1, O); break;
    case ARM::VMRS: O << ", fpscr"; break;
    case ARM::t2CMNzrs: 
    case ARM::t2CMPrs: 
    case ARM::t2CMPzrs: 
    case ARM::t2MVNs: 
    case ARM::t2TEQrs: 
    case ARM::t2TSTrs: printT2SOOperand(MI, 1, O); break;
    case ARM::t2LDRBi12: 
    case ARM::t2LDRHi12: 
    case ARM::t2LDRSBi12: 
    case ARM::t2LDRSHi12: 
    case ARM::t2LDRi12: 
    case ARM::t2STRBi12: 
    case ARM::t2STRHi12: 
    case ARM::t2STRi12: printT2AddrModeImm12Operand(MI, 1, O); break;
    case ARM::t2LDRBs: 
    case ARM::t2LDRHs: 
    case ARM::t2LDRSBs: 
    case ARM::t2LDRSHs: 
    case ARM::t2LDRs: 
    case ARM::t2STRBs: 
    case ARM::t2STRHs: 
    case ARM::t2STRs: printT2AddrModeSoRegOperand(MI, 1, O); break;
    case ARM::t2PLDWi12: 
    case ARM::t2PLDWr: 
    case ARM::t2PLDi12: 
    case ARM::t2PLDr: 
    case ARM::t2PLIi12: 
    case ARM::t2PLIr: 
    case ARM::t2TBBgen: O << ']'; break;
    case ARM::t2TBHgen: O << ", lsl #1]"; break;
    }
    return;
    break;
  case ARM::CDP:
    printOperand(MI, 1, O); 
    O << ", cr"; 
    printNoHashImmediate(MI, 2, O); 
    O << ", cr"; 
    printNoHashImmediate(MI, 3, O); 
    O << ", cr"; 
    printNoHashImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case ARM::LDC2L_OPTION:
  case ARM::LDC2L_POST:
  case ARM::LDC2_OPTION:
  case ARM::LDC2_POST:
  case ARM::LDCL_OPTION:
  case ARM::LDCL_POST:
  case ARM::LDC_OPTION:
  case ARM::LDC_POST:
  case ARM::LDRBT:
  case ARM::LDRB_POST:
  case ARM::LDRHT:
  case ARM::LDRH_POST:
  case ARM::LDRSBT:
  case ARM::LDRSB_POST:
  case ARM::LDRSHT:
  case ARM::LDRSH_POST:
  case ARM::LDRT:
  case ARM::LDR_POST:
  case ARM::STC2L_OPTION:
  case ARM::STC2L_POST:
  case ARM::STC2_OPTION:
  case ARM::STC2_POST:
  case ARM::STCL_OPTION:
  case ARM::STCL_POST:
  case ARM::STC_OPTION:
  case ARM::STC_POST:
  case ARM::STRBT:
  case ARM::STRB_POST:
  case ARM::STRHT:
  case ARM::STRH_POST:
  case ARM::STRT:
  case ARM::STR_POST:
  case ARM::t2LDRB_POST:
  case ARM::t2LDRH_POST:
  case ARM::t2LDRSB_POST:
  case ARM::t2LDRSH_POST:
  case ARM::t2LDR_POST:
  case ARM::t2STRB_POST:
  case ARM::t2STRH_POST:
  case ARM::t2STR_POST:
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << "], "; 
    switch (MI->getOpcode()) {
    case ARM::LDC2L_OPTION: 
    case ARM::LDCL_OPTION: 
    case ARM::STC2L_OPTION: 
    case ARM::STCL_OPTION: printNoHashImmediate(MI, 3, O); break;
    case ARM::LDC2L_POST: 
    case ARM::LDC2_POST: 
    case ARM::LDCL_POST: 
    case ARM::LDC_POST: 
    case ARM::LDRBT: 
    case ARM::LDRB_POST: 
    case ARM::LDRT: 
    case ARM::LDR_POST: 
    case ARM::STC2L_POST: 
    case ARM::STC2_POST: 
    case ARM::STCL_POST: 
    case ARM::STC_POST: 
    case ARM::STRBT: 
    case ARM::STRB_POST: 
    case ARM::STRT: 
    case ARM::STR_POST: printAddrMode2OffsetOperand(MI, 3, O); break;
    case ARM::LDC2_OPTION: 
    case ARM::LDC_OPTION: 
    case ARM::STC2_OPTION: 
    case ARM::STC_OPTION: printOperand(MI, 3, O); break;
    case ARM::LDRHT: 
    case ARM::LDRH_POST: 
    case ARM::LDRSBT: 
    case ARM::LDRSB_POST: 
    case ARM::LDRSHT: 
    case ARM::LDRSH_POST: 
    case ARM::STRHT: 
    case ARM::STRH_POST: printAddrMode3OffsetOperand(MI, 3, O); break;
    case ARM::t2LDRB_POST: 
    case ARM::t2LDRH_POST: 
    case ARM::t2LDRSB_POST: 
    case ARM::t2LDRSH_POST: 
    case ARM::t2LDR_POST: 
    case ARM::t2STRB_POST: 
    case ARM::t2STRH_POST: 
    case ARM::t2STR_POST: printT2AddrModeImm8OffsetOperand(MI, 3, O); break;
    }
    return;
    break;
  case ARM::LDC2L_PRE:
  case ARM::LDC2_PRE:
  case ARM::LDCL_PRE:
  case ARM::LDC_PRE:
  case ARM::LDRB_PRE:
  case ARM::LDRH_PRE:
  case ARM::LDRSB_PRE:
  case ARM::LDRSH_PRE:
  case ARM::LDR_PRE:
  case ARM::STC2L_PRE:
  case ARM::STC2_PRE:
  case ARM::STCL_PRE:
  case ARM::STC_PRE:
  case ARM::t2LDRB_PRE:
  case ARM::t2LDRH_PRE:
  case ARM::t2LDRSB_PRE:
  case ARM::t2LDRSH_PRE:
  case ARM::t2LDR_PRE:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::LDC2L_PRE: 
    case ARM::LDC2_PRE: 
    case ARM::LDCL_PRE: 
    case ARM::LDC_PRE: 
    case ARM::LDRB_PRE: 
    case ARM::LDR_PRE: 
    case ARM::STC2L_PRE: 
    case ARM::STC2_PRE: 
    case ARM::STCL_PRE: 
    case ARM::STC_PRE: printAddrMode2Operand(MI, 2, O); break;
    case ARM::LDRH_PRE: 
    case ARM::LDRSB_PRE: 
    case ARM::LDRSH_PRE: printAddrMode3Operand(MI, 2, O); break;
    case ARM::t2LDRB_PRE: 
    case ARM::t2LDRH_PRE: 
    case ARM::t2LDRSB_PRE: 
    case ARM::t2LDRSH_PRE: 
    case ARM::t2LDR_PRE: printT2AddrModeImm8Operand(MI, 2, O); break;
    }
    O << '!'; 
    return;
    break;
  case ARM::LDM_RET:
  case ARM::LDM_UPD:
  case ARM::STM_UPD:
  case ARM::VLDMD_UPD:
  case ARM::VLDMS_UPD:
  case ARM::VSTMD_UPD:
  case ARM::VSTMS_UPD:
  case ARM::tLDM_UPD:
  case ARM::tSTM_UPD:
    O << "!, "; 
    printRegisterList(MI, 5, O); 
    return;
    break;
  case ARM::LDRD_POST:
  case ARM::STRD_POST:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::LDRD_POST: printOperand(MI, 1, O); break;
    case ARM::STRD_POST: printOperand(MI, 2, O); break;
    }
    O << ", ["; 
    printOperand(MI, 3, O); 
    O << "], "; 
    printAddrMode3OffsetOperand(MI, 4, O); 
    return;
    break;
  case ARM::LDRD_PRE:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printAddrMode3Operand(MI, 3, O); 
    O << '!'; 
    return;
    break;
  case ARM::LDREX:
  case ARM::LDREXB:
  case ARM::LDREXH:
  case ARM::t2LDREX:
  case ARM::t2LDREXB:
  case ARM::t2LDREXH:
    O << ", ["; 
    printOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case ARM::LDREXD:
  case ARM::STREX:
  case ARM::STREXB:
  case ARM::STREXH:
  case ARM::SWP:
  case ARM::SWPB:
  case ARM::t2LDREXD:
  case ARM::t2STREX:
  case ARM::t2STREXB:
  case ARM::t2STREXH:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case ARM::LEApcrel:
  case ARM::tLEApcrel:
    O << ", #"; 
    printOperand(MI, 1, O); 
    return;
    break;
  case ARM::LEApcrelJT:
  case ARM::tLEApcrelJT:
    O << ", #"; 
    printOperand(MI, 1, O); 
    O << '_'; 
    printNoHashImmediate(MI, 2, O); 
    return;
    break;
  case ARM::MCR:
  case ARM::MRC:
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", cr"; 
    printNoHashImmediate(MI, 3, O); 
    O << ", cr"; 
    printNoHashImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case ARM::MCR2:
  case ARM::MRC2:
    O << ", cr"; 
    printNoHashImmediate(MI, 3, O); 
    O << ", cr"; 
    printNoHashImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case ARM::MCRR:
  case ARM::MRRC:
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", cr"; 
    printNoHashImmediate(MI, 4, O); 
    return;
    break;
  case ARM::MCRR2:
  case ARM::MRRC2:
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", cr"; 
    printNoHashImmediate(MI, 4, O); 
    return;
    break;
  case ARM::MLS:
  case ARM::SBFX:
  case ARM::SMLABB:
  case ARM::SMLABT:
  case ARM::SMLAD:
  case ARM::SMLADX:
  case ARM::SMLALBB:
  case ARM::SMLALBT:
  case ARM::SMLALD:
  case ARM::SMLALDX:
  case ARM::SMLALTB:
  case ARM::SMLALTT:
  case ARM::SMLATB:
  case ARM::SMLATT:
  case ARM::SMLAWB:
  case ARM::SMLAWT:
  case ARM::SMLSD:
  case ARM::SMLSDX:
  case ARM::SMLSLD:
  case ARM::SMLSLDX:
  case ARM::SMMLA:
  case ARM::SMMLAR:
  case ARM::SMMLS:
  case ARM::SMMLSR:
  case ARM::SXTAB16rr_rot:
  case ARM::SXTABrr_rot:
  case ARM::SXTAHrr_rot:
  case ARM::UBFX:
  case ARM::UMAAL:
  case ARM::USADA8:
  case ARM::UXTAB16rr_rot:
  case ARM::UXTABrr_rot:
  case ARM::UXTAHrr_rot:
  case ARM::VEXTd16:
  case ARM::VEXTd32:
  case ARM::VEXTd8:
  case ARM::VEXTdf:
  case ARM::VEXTq16:
  case ARM::VEXTq32:
  case ARM::VEXTq8:
  case ARM::VEXTqf:
  case ARM::VMOVRRS:
  case ARM::VMOVSRR:
  case ARM::t2MLA:
  case ARM::t2MLS:
  case ARM::t2SBFX:
  case ARM::t2SMLABB:
  case ARM::t2SMLABT:
  case ARM::t2SMLAD:
  case ARM::t2SMLADX:
  case ARM::t2SMLAL:
  case ARM::t2SMLALBB:
  case ARM::t2SMLALBT:
  case ARM::t2SMLALD:
  case ARM::t2SMLALDX:
  case ARM::t2SMLALTB:
  case ARM::t2SMLALTT:
  case ARM::t2SMLATB:
  case ARM::t2SMLATT:
  case ARM::t2SMLAWB:
  case ARM::t2SMLAWT:
  case ARM::t2SMLSD:
  case ARM::t2SMLSDX:
  case ARM::t2SMLSLD:
  case ARM::t2SMLSLDX:
  case ARM::t2SMMLA:
  case ARM::t2SMMLAR:
  case ARM::t2SMMLS:
  case ARM::t2SMMLSR:
  case ARM::t2SMULL:
  case ARM::t2SXTAB16rr_rot:
  case ARM::t2SXTABrr_rot:
  case ARM::t2SXTAHrr_rot:
  case ARM::t2UBFX:
  case ARM::t2UMAAL:
  case ARM::t2UMLAL:
  case ARM::t2UMULL:
  case ARM::t2USADA8:
  case ARM::t2UXTAB16rr_rot:
  case ARM::t2UXTABrr_rot:
  case ARM::t2UXTAHrr_rot:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    switch (MI->getOpcode()) {
    case ARM::MLS: 
    case ARM::SBFX: 
    case ARM::SMLABB: 
    case ARM::SMLABT: 
    case ARM::SMLAD: 
    case ARM::SMLADX: 
    case ARM::SMLALBB: 
    case ARM::SMLALBT: 
    case ARM::SMLALD: 
    case ARM::SMLALDX: 
    case ARM::SMLALTB: 
    case ARM::SMLALTT: 
    case ARM::SMLATB: 
    case ARM::SMLATT: 
    case ARM::SMLAWB: 
    case ARM::SMLAWT: 
    case ARM::SMLSD: 
    case ARM::SMLSDX: 
    case ARM::SMLSLD: 
    case ARM::SMLSLDX: 
    case ARM::SMMLA: 
    case ARM::SMMLAR: 
    case ARM::SMMLS: 
    case ARM::SMMLSR: 
    case ARM::UBFX: 
    case ARM::UMAAL: 
    case ARM::USADA8: 
    case ARM::VEXTd16: 
    case ARM::VEXTd32: 
    case ARM::VEXTd8: 
    case ARM::VEXTdf: 
    case ARM::VEXTq16: 
    case ARM::VEXTq32: 
    case ARM::VEXTq8: 
    case ARM::VEXTqf: 
    case ARM::VMOVRRS: 
    case ARM::VMOVSRR: 
    case ARM::t2MLA: 
    case ARM::t2MLS: 
    case ARM::t2SBFX: 
    case ARM::t2SMLABB: 
    case ARM::t2SMLABT: 
    case ARM::t2SMLAD: 
    case ARM::t2SMLADX: 
    case ARM::t2SMLAL: 
    case ARM::t2SMLALBB: 
    case ARM::t2SMLALBT: 
    case ARM::t2SMLALD: 
    case ARM::t2SMLALDX: 
    case ARM::t2SMLALTB: 
    case ARM::t2SMLALTT: 
    case ARM::t2SMLATB: 
    case ARM::t2SMLATT: 
    case ARM::t2SMLAWB: 
    case ARM::t2SMLAWT: 
    case ARM::t2SMLSD: 
    case ARM::t2SMLSDX: 
    case ARM::t2SMLSLD: 
    case ARM::t2SMLSLDX: 
    case ARM::t2SMMLA: 
    case ARM::t2SMMLAR: 
    case ARM::t2SMMLS: 
    case ARM::t2SMMLSR: 
    case ARM::t2SMULL: 
    case ARM::t2UBFX: 
    case ARM::t2UMAAL: 
    case ARM::t2UMLAL: 
    case ARM::t2UMULL: 
    case ARM::t2USADA8: O << ", "; break;
    case ARM::SXTAB16rr_rot: 
    case ARM::SXTABrr_rot: 
    case ARM::SXTAHrr_rot: 
    case ARM::UXTAB16rr_rot: 
    case ARM::UXTABrr_rot: 
    case ARM::UXTAHrr_rot: 
    case ARM::t2SXTAB16rr_rot: 
    case ARM::t2SXTABrr_rot: 
    case ARM::t2SXTAHrr_rot: 
    case ARM::t2UXTAB16rr_rot: 
    case ARM::t2UXTABrr_rot: 
    case ARM::t2UXTAHrr_rot: O << ", ror "; break;
    }
    printOperand(MI, 3, O); 
    return;
    break;
  case ARM::MOVi32imm:
  case ARM::t2MOVi32imm:
    O << ", "; 
    printOperand(MI, 1, O, "lo16"); 
    O << "\n\tmovt"; 
    printPredicateOperand(MI, 2, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O, "hi16"); 
    return;
    break;
  case ARM::MOVsra_flag:
  case ARM::MOVsrl_flag:
    O << ", "; 
    printOperand(MI, 1, O); 
    switch (MI->getOpcode()) {
    case ARM::MOVsra_flag: O << ", asr #1"; break;
    case ARM::MOVsrl_flag: O << ", lsr #1"; break;
    }
    return;
    break;
  case ARM::PKHBT:
  case ARM::PKHTB:
  case ARM::SSAT:
  case ARM::USAT:
  case ARM::t2PKHBT:
  case ARM::t2PKHTB:
  case ARM::t2SSAT:
  case ARM::t2USAT:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    printShiftImmOperand(MI, 3, O); 
    return;
    break;
  case ARM::STRB_PRE:
  case ARM::STRH_PRE:
  case ARM::STR_PRE:
  case ARM::t2STRB_PRE:
  case ARM::t2STRH_PRE:
  case ARM::t2STR_PRE:
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::STRB_PRE: 
    case ARM::STR_PRE: printAddrMode2OffsetOperand(MI, 3, O); break;
    case ARM::STRH_PRE: printAddrMode3OffsetOperand(MI, 3, O); break;
    case ARM::t2STRB_PRE: 
    case ARM::t2STRH_PRE: 
    case ARM::t2STR_PRE: printT2AddrModeImm8OffsetOperand(MI, 3, O); break;
    }
    O << "]!"; 
    return;
    break;
  case ARM::STRD_PRE:
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", ["; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printAddrMode3OffsetOperand(MI, 4, O); 
    O << "]!"; 
    return;
    break;
  case ARM::STREXD:
  case ARM::t2STREXD:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", ["; 
    printOperand(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case ARM::SXTB16r_rot:
  case ARM::SXTBr_rot:
  case ARM::SXTHr_rot:
  case ARM::UXTB16r_rot:
  case ARM::UXTBr_rot:
  case ARM::UXTHr_rot:
  case ARM::t2SXTB16r_rot:
  case ARM::t2UXTB16r_rot:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", ror "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case ARM::VABDfd:
  case ARM::VABDfq:
  case ARM::VACGEd:
  case ARM::VACGEq:
  case ARM::VACGTd:
  case ARM::VACGTq:
  case ARM::VADDD:
  case ARM::VADDS:
  case ARM::VADDfd:
  case ARM::VADDfd_sfp:
  case ARM::VADDfq:
  case ARM::VCEQfd:
  case ARM::VCEQfq:
  case ARM::VCGEfd:
  case ARM::VCGEfq:
  case ARM::VCGTfd:
  case ARM::VCGTfq:
  case ARM::VDIVD:
  case ARM::VDIVS:
  case ARM::VMAXfd:
  case ARM::VMAXfd_sfp:
  case ARM::VMAXfq:
  case ARM::VMINfd:
  case ARM::VMINfd_sfp:
  case ARM::VMINfq:
  case ARM::VMULD:
  case ARM::VMULS:
  case ARM::VMULfd:
  case ARM::VMULfd_sfp:
  case ARM::VMULfq:
  case ARM::VNMULD:
  case ARM::VNMULS:
  case ARM::VPADDf:
  case ARM::VPMAXf:
  case ARM::VPMINf:
  case ARM::VRECPSfd:
  case ARM::VRECPSfq:
  case ARM::VRSQRTSfd:
  case ARM::VRSQRTSfq:
  case ARM::VSUBD:
  case ARM::VSUBS:
  case ARM::VSUBfd:
  case ARM::VSUBfd_sfp:
  case ARM::VSUBfq:
  case ARM::t2ADCSrr:
  case ARM::t2ADCSrs:
  case ARM::t2ADCrr:
  case ARM::t2ADCrs:
  case ARM::t2ADDSri:
  case ARM::t2ADDSrr:
  case ARM::t2ADDSrs:
  case ARM::t2ADDrSPi:
  case ARM::t2ADDrSPs:
  case ARM::t2ADDri:
  case ARM::t2ADDrr:
  case ARM::t2ADDrs:
  case ARM::t2ANDSri:
  case ARM::t2ANDSrr:
  case ARM::t2ANDSrs:
  case ARM::t2ANDrr:
  case ARM::t2ANDrs:
  case ARM::t2ASRri:
  case ARM::t2ASRrr:
  case ARM::t2BICrr:
  case ARM::t2BICrs:
  case ARM::t2EORrr:
  case ARM::t2EORrs:
  case ARM::t2LSLri:
  case ARM::t2LSLrr:
  case ARM::t2LSRri:
  case ARM::t2LSRrr:
  case ARM::t2ORRrr:
  case ARM::t2ORRrs:
  case ARM::t2RORri:
  case ARM::t2RORrr:
  case ARM::t2RSBSri:
  case ARM::t2RSBri:
  case ARM::t2SBCSrr:
  case ARM::t2SBCSrs:
  case ARM::t2SBCrr:
  case ARM::t2SBCrs:
  case ARM::t2SUBSri:
  case ARM::t2SUBSrr:
  case ARM::t2SUBSrs:
  case ARM::t2SUBrSPi:
  case ARM::t2SUBri:
  case ARM::t2SUBrr:
  case ARM::t2SUBrs:
    printOperand(MI, 1, O); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::VABDfd: 
    case ARM::VABDfq: 
    case ARM::VACGEd: 
    case ARM::VACGEq: 
    case ARM::VACGTd: 
    case ARM::VACGTq: 
    case ARM::VADDD: 
    case ARM::VADDS: 
    case ARM::VADDfd: 
    case ARM::VADDfd_sfp: 
    case ARM::VADDfq: 
    case ARM::VCEQfd: 
    case ARM::VCEQfq: 
    case ARM::VCGEfd: 
    case ARM::VCGEfq: 
    case ARM::VCGTfd: 
    case ARM::VCGTfq: 
    case ARM::VDIVD: 
    case ARM::VDIVS: 
    case ARM::VMAXfd: 
    case ARM::VMAXfd_sfp: 
    case ARM::VMAXfq: 
    case ARM::VMINfd: 
    case ARM::VMINfd_sfp: 
    case ARM::VMINfq: 
    case ARM::VMULD: 
    case ARM::VMULS: 
    case ARM::VMULfd: 
    case ARM::VMULfd_sfp: 
    case ARM::VMULfq: 
    case ARM::VNMULD: 
    case ARM::VNMULS: 
    case ARM::VPADDf: 
    case ARM::VPMAXf: 
    case ARM::VPMINf: 
    case ARM::VRECPSfd: 
    case ARM::VRECPSfq: 
    case ARM::VRSQRTSfd: 
    case ARM::VRSQRTSfq: 
    case ARM::VSUBD: 
    case ARM::VSUBS: 
    case ARM::VSUBfd: 
    case ARM::VSUBfd_sfp: 
    case ARM::VSUBfq: 
    case ARM::t2ADCSrr: 
    case ARM::t2ADCrr: 
    case ARM::t2ADDSri: 
    case ARM::t2ADDSrr: 
    case ARM::t2ADDrSPi: 
    case ARM::t2ADDri: 
    case ARM::t2ADDrr: 
    case ARM::t2ANDSri: 
    case ARM::t2ANDSrr: 
    case ARM::t2ANDrr: 
    case ARM::t2ASRri: 
    case ARM::t2ASRrr: 
    case ARM::t2BICrr: 
    case ARM::t2EORrr: 
    case ARM::t2LSLri: 
    case ARM::t2LSLrr: 
    case ARM::t2LSRri: 
    case ARM::t2LSRrr: 
    case ARM::t2ORRrr: 
    case ARM::t2RORri: 
    case ARM::t2RORrr: 
    case ARM::t2RSBSri: 
    case ARM::t2RSBri: 
    case ARM::t2SBCSrr: 
    case ARM::t2SBCrr: 
    case ARM::t2SUBSri: 
    case ARM::t2SUBSrr: 
    case ARM::t2SUBrSPi: 
    case ARM::t2SUBri: 
    case ARM::t2SUBrr: printOperand(MI, 2, O); break;
    case ARM::t2ADCSrs: 
    case ARM::t2ADCrs: 
    case ARM::t2ADDSrs: 
    case ARM::t2ADDrSPs: 
    case ARM::t2ADDrs: 
    case ARM::t2ANDSrs: 
    case ARM::t2ANDrs: 
    case ARM::t2BICrs: 
    case ARM::t2EORrs: 
    case ARM::t2ORRrs: 
    case ARM::t2SBCSrs: 
    case ARM::t2SBCrs: 
    case ARM::t2SUBSrs: 
    case ARM::t2SUBrs: printT2SOOperand(MI, 2, O); break;
    }
    return;
    break;
  case ARM::VCEQzv2f32:
  case ARM::VCEQzv4f32:
  case ARM::VCGEzv2f32:
  case ARM::VCGEzv4f32:
  case ARM::VCGTzv2f32:
  case ARM::VCGTzv4f32:
  case ARM::VCLEzv2f32:
  case ARM::VCLEzv4f32:
  case ARM::VCLTzv2f32:
  case ARM::VCLTzv4f32:
  case ARM::t2MOVsra_flag:
  case ARM::t2MOVsrl_flag:
    printOperand(MI, 1, O); 
    switch (MI->getOpcode()) {
    case ARM::VCEQzv2f32: 
    case ARM::VCEQzv4f32: 
    case ARM::VCGEzv2f32: 
    case ARM::VCGEzv4f32: 
    case ARM::VCGTzv2f32: 
    case ARM::VCGTzv4f32: 
    case ARM::VCLEzv2f32: 
    case ARM::VCLEzv4f32: 
    case ARM::VCLTzv2f32: 
    case ARM::VCLTzv4f32: O << ", #0"; break;
    case ARM::t2MOVsra_flag: 
    case ARM::t2MOVsrl_flag: O << ", #1"; break;
    }
    return;
    break;
  case ARM::VDUPLN16d:
  case ARM::VDUPLN16q:
  case ARM::VDUPLN32d:
  case ARM::VDUPLN32q:
  case ARM::VDUPLN8d:
  case ARM::VDUPLN8q:
  case ARM::VDUPLNfd:
  case ARM::VDUPLNfq:
  case ARM::VGETLNi32:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case ARM::VGETLNs16:
  case ARM::VGETLNs8:
  case ARM::VGETLNu16:
  case ARM::VGETLNu8:
    O << '['; 
    printNoHashImmediate(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case ARM::VLD1d16:
  case ARM::VLD1d32:
  case ARM::VLD1d64:
  case ARM::VLD1d8:
  case ARM::VST1d16:
  case ARM::VST1d32:
  case ARM::VST1d64:
  case ARM::VST1d8:
    O << "}, "; 
    switch (MI->getOpcode()) {
    case ARM::VLD1d16: 
    case ARM::VLD1d32: 
    case ARM::VLD1d64: 
    case ARM::VLD1d8: printAddrMode6Operand(MI, 1, O); break;
    case ARM::VST1d16: 
    case ARM::VST1d32: 
    case ARM::VST1d64: 
    case ARM::VST1d8: printAddrMode6Operand(MI, 0, O); break;
    }
    return;
    break;
  case ARM::VLD1d16Q:
  case ARM::VLD1d32Q:
  case ARM::VLD1d64Q:
  case ARM::VLD1d8Q:
  case ARM::VLD2q16:
  case ARM::VLD2q32:
  case ARM::VLD2q8:
  case ARM::VLD4d16:
  case ARM::VLD4d32:
  case ARM::VLD4d8:
  case ARM::VLD4q16:
  case ARM::VLD4q32:
  case ARM::VLD4q8:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 4, O); 
    return;
    break;
  case ARM::VLD1d16Q_UPD:
  case ARM::VLD1d32Q_UPD:
  case ARM::VLD1d64Q_UPD:
  case ARM::VLD1d8Q_UPD:
  case ARM::VLD2q16_UPD:
  case ARM::VLD2q32_UPD:
  case ARM::VLD2q8_UPD:
  case ARM::VLD4d16_UPD:
  case ARM::VLD4d32_UPD:
  case ARM::VLD4d8_UPD:
  case ARM::VLD4q16_UPD:
  case ARM::VLD4q32_UPD:
  case ARM::VLD4q8_UPD:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 5, O); 
    printAddrMode6OffsetOperand(MI, 7, O); 
    return;
    break;
  case ARM::VLD1d16T:
  case ARM::VLD1d32T:
  case ARM::VLD1d64T:
  case ARM::VLD1d8T:
  case ARM::VLD3d16:
  case ARM::VLD3d32:
  case ARM::VLD3d8:
  case ARM::VLD3q16:
  case ARM::VLD3q32:
  case ARM::VLD3q8:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 3, O); 
    return;
    break;
  case ARM::VLD1d16T_UPD:
  case ARM::VLD1d32T_UPD:
  case ARM::VLD1d64T_UPD:
  case ARM::VLD1d8T_UPD:
  case ARM::VLD3d16_UPD:
  case ARM::VLD3d32_UPD:
  case ARM::VLD3d8_UPD:
  case ARM::VLD3q16_UPD:
  case ARM::VLD3q32_UPD:
  case ARM::VLD3q8_UPD:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 4, O); 
    printAddrMode6OffsetOperand(MI, 6, O); 
    return;
    break;
  case ARM::VLD1d16_UPD:
  case ARM::VLD1d32_UPD:
  case ARM::VLD1d64_UPD:
  case ARM::VLD1d8_UPD:
    O << "}, "; 
    printAddrMode6Operand(MI, 2, O); 
    printAddrMode6OffsetOperand(MI, 4, O); 
    return;
    break;
  case ARM::VLD1q16:
  case ARM::VLD1q32:
  case ARM::VLD1q64:
  case ARM::VLD1q8:
  case ARM::VLD2b16:
  case ARM::VLD2b32:
  case ARM::VLD2b8:
  case ARM::VLD2d16:
  case ARM::VLD2d32:
  case ARM::VLD2d8:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 2, O); 
    return;
    break;
  case ARM::VLD1q16_UPD:
  case ARM::VLD1q32_UPD:
  case ARM::VLD1q64_UPD:
  case ARM::VLD1q8_UPD:
    printAddrMode6Operand(MI, 2, O); 
    printAddrMode6OffsetOperand(MI, 4, O); 
    return;
    break;
  case ARM::VLD2LNd16:
  case ARM::VLD2LNd32:
  case ARM::VLD2LNd8:
  case ARM::VLD2LNq16:
  case ARM::VLD2LNq16odd:
  case ARM::VLD2LNq32:
  case ARM::VLD2LNq32odd:
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 2, O); 
    return;
    break;
  case ARM::VLD2LNd16_UPD:
  case ARM::VLD2LNd32_UPD:
  case ARM::VLD2LNd8_UPD:
  case ARM::VLD2LNq16_UPD:
  case ARM::VLD2LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 3, O); 
    printAddrMode6OffsetOperand(MI, 5, O); 
    return;
    break;
  case ARM::VLD2b16_UPD:
  case ARM::VLD2b32_UPD:
  case ARM::VLD2b8_UPD:
  case ARM::VLD2d16_UPD:
  case ARM::VLD2d32_UPD:
  case ARM::VLD2d8_UPD:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 3, O); 
    printAddrMode6OffsetOperand(MI, 5, O); 
    return;
    break;
  case ARM::VLD3LNd16:
  case ARM::VLD3LNd32:
  case ARM::VLD3LNd8:
  case ARM::VLD3LNq16:
  case ARM::VLD3LNq16odd:
  case ARM::VLD3LNq32:
  case ARM::VLD3LNq32odd:
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 3, O); 
    return;
    break;
  case ARM::VLD3LNd16_UPD:
  case ARM::VLD3LNd32_UPD:
  case ARM::VLD3LNd8_UPD:
  case ARM::VLD3LNq16_UPD:
  case ARM::VLD3LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 4, O); 
    printAddrMode6OffsetOperand(MI, 6, O); 
    return;
    break;
  case ARM::VLD4LNd16:
  case ARM::VLD4LNd32:
  case ARM::VLD4LNd8:
  case ARM::VLD4LNq16:
  case ARM::VLD4LNq16odd:
  case ARM::VLD4LNq32:
  case ARM::VLD4LNq32odd:
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 4, O); 
    return;
    break;
  case ARM::VLD4LNd16_UPD:
  case ARM::VLD4LNd32_UPD:
  case ARM::VLD4LNd8_UPD:
  case ARM::VLD4LNq16_UPD:
  case ARM::VLD4LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 12, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 12, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 12, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 12, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 5, O); 
    printAddrMode6OffsetOperand(MI, 7, O); 
    return;
    break;
  case ARM::VMLAD:
  case ARM::VMLAS:
  case ARM::VMLAfd:
  case ARM::VMLAfq:
  case ARM::VMLSD:
  case ARM::VMLSS:
  case ARM::VMLSfd:
  case ARM::VMLSfq:
  case ARM::VNMLAD:
  case ARM::VNMLAS:
  case ARM::VNMLSD:
  case ARM::VNMLSS:
  case ARM::t2MOVCCasr:
  case ARM::t2MOVCClsl:
  case ARM::t2MOVCClsr:
  case ARM::t2MOVCCror:
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case ARM::VMLALslsv2i32:
  case ARM::VMLALslsv4i16:
  case ARM::VMLALsluv2i32:
  case ARM::VMLALsluv4i16:
  case ARM::VMLAslv2i32:
  case ARM::VMLAslv4i16:
  case ARM::VMLAslv4i32:
  case ARM::VMLAslv8i16:
  case ARM::VMLSLslsv2i32:
  case ARM::VMLSLslsv4i16:
  case ARM::VMLSLsluv2i32:
  case ARM::VMLSLsluv4i16:
  case ARM::VMLSslv2i32:
  case ARM::VMLSslv4i16:
  case ARM::VMLSslv4i32:
  case ARM::VMLSslv8i16:
  case ARM::VQDMLALslv2i32:
  case ARM::VQDMLALslv4i16:
  case ARM::VQDMLSLslv2i32:
  case ARM::VQDMLSLslv4i16:
    O << ", "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 4, O); 
    O << ']'; 
    return;
    break;
  case ARM::VMLAslfd:
  case ARM::VMLAslfq:
  case ARM::VMLSslfd:
  case ARM::VMLSslfq:
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 4, O); 
    O << ']'; 
    return;
    break;
  case ARM::VMULLslsv2i32:
  case ARM::VMULLslsv4i16:
  case ARM::VMULLsluv2i32:
  case ARM::VMULLsluv4i16:
  case ARM::VMULslv2i32:
  case ARM::VMULslv4i16:
  case ARM::VMULslv4i32:
  case ARM::VMULslv8i16:
  case ARM::VQDMULHslv2i32:
  case ARM::VQDMULHslv4i16:
  case ARM::VQDMULHslv4i32:
  case ARM::VQDMULHslv8i16:
  case ARM::VQDMULLslv2i32:
  case ARM::VQDMULLslv4i16:
  case ARM::VQRDMULHslv2i32:
  case ARM::VQRDMULHslv4i16:
  case ARM::VQRDMULHslv4i32:
  case ARM::VQRDMULHslv8i16:
    O << ", "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case ARM::VMULslfd:
  case ARM::VMULslfq:
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case ARM::VSETLNi16:
  case ARM::VSETLNi32:
  case ARM::VSETLNi8:
    O << '['; 
    printNoHashImmediate(MI, 3, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case ARM::VST1d16Q:
  case ARM::VST1d32Q:
  case ARM::VST1d64Q:
  case ARM::VST1d8Q:
  case ARM::VST2q16:
  case ARM::VST2q32:
  case ARM::VST2q8:
  case ARM::VST4d16:
  case ARM::VST4d32:
  case ARM::VST4d8:
  case ARM::VST4q16:
  case ARM::VST4q32:
  case ARM::VST4q8:
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST1d16Q_UPD:
  case ARM::VST1d32Q_UPD:
  case ARM::VST1d64Q_UPD:
  case ARM::VST1d8Q_UPD:
  case ARM::VST2q16_UPD:
  case ARM::VST2q32_UPD:
  case ARM::VST2q8_UPD:
  case ARM::VST4d16_UPD:
  case ARM::VST4d32_UPD:
  case ARM::VST4d8_UPD:
  case ARM::VST4q16_UPD:
  case ARM::VST4q32_UPD:
  case ARM::VST4q8_UPD:
    O << ", "; 
    printOperand(MI, 5, O); 
    O << ", "; 
    printOperand(MI, 6, O); 
    O << ", "; 
    printOperand(MI, 7, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST1d16T:
  case ARM::VST1d32T:
  case ARM::VST1d64T:
  case ARM::VST1d8T:
  case ARM::VST3d16:
  case ARM::VST3d32:
  case ARM::VST3d8:
  case ARM::VST3q16:
  case ARM::VST3q32:
  case ARM::VST3q8:
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST1d16T_UPD:
  case ARM::VST1d32T_UPD:
  case ARM::VST1d64T_UPD:
  case ARM::VST1d8T_UPD:
  case ARM::VST3d16_UPD:
  case ARM::VST3d32_UPD:
  case ARM::VST3d8_UPD:
  case ARM::VST3q16_UPD:
  case ARM::VST3q32_UPD:
  case ARM::VST3q8_UPD:
    O << ", "; 
    printOperand(MI, 5, O); 
    O << ", "; 
    printOperand(MI, 6, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST1d16_UPD:
  case ARM::VST1d32_UPD:
  case ARM::VST1d64_UPD:
  case ARM::VST1d8_UPD:
    O << "}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST1q16:
  case ARM::VST1q32:
  case ARM::VST1q64:
  case ARM::VST1q8:
  case ARM::VST2b16:
  case ARM::VST2b32:
  case ARM::VST2b8:
  case ARM::VST2d16:
  case ARM::VST2d32:
  case ARM::VST2d8:
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST2LNd16:
  case ARM::VST2LNd32:
  case ARM::VST2LNd8:
  case ARM::VST2LNq16:
  case ARM::VST2LNq16odd:
  case ARM::VST2LNq32:
  case ARM::VST2LNq32odd:
    O << '['; 
    printNoHashImmediate(MI, 4, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 4, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST2LNd16_UPD:
  case ARM::VST2LNd32_UPD:
  case ARM::VST2LNd8_UPD:
  case ARM::VST2LNq16_UPD:
  case ARM::VST2LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST2b16_UPD:
  case ARM::VST2b32_UPD:
  case ARM::VST2b8_UPD:
  case ARM::VST2d16_UPD:
  case ARM::VST2d32_UPD:
  case ARM::VST2d8_UPD:
    O << ", "; 
    printOperand(MI, 5, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST3LNd16:
  case ARM::VST3LNd32:
  case ARM::VST3LNd8:
  case ARM::VST3LNq16:
  case ARM::VST3LNq16odd:
  case ARM::VST3LNq32:
  case ARM::VST3LNq32odd:
    O << '['; 
    printNoHashImmediate(MI, 5, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 5, O); 
    O << "], "; 
    printOperand(MI, 4, O); 
    O << '['; 
    printNoHashImmediate(MI, 5, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST3LNd16_UPD:
  case ARM::VST3LNd32_UPD:
  case ARM::VST3LNd8_UPD:
  case ARM::VST3LNq16_UPD:
  case ARM::VST3LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 7, O); 
    O << "], "; 
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 7, O); 
    O << "], "; 
    printOperand(MI, 6, O); 
    O << '['; 
    printNoHashImmediate(MI, 7, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST4LNd16:
  case ARM::VST4LNd32:
  case ARM::VST4LNd8:
  case ARM::VST4LNq16:
  case ARM::VST4LNq16odd:
  case ARM::VST4LNq32:
  case ARM::VST4LNq32odd:
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 4, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST4LNd16_UPD:
  case ARM::VST4LNd32_UPD:
  case ARM::VST4LNd8_UPD:
  case ARM::VST4LNq16_UPD:
  case ARM::VST4LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 6, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 7, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VTBL1:
    O << ", {"; 
    printOperand(MI, 1, O); 
    O << "}, "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case ARM::VTBL2:
    O << ", {"; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "}, "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case ARM::VTBL3:
    O << ", {"; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "}, "; 
    printOperand(MI, 4, O); 
    return;
    break;
  case ARM::VTBL4:
    O << ", {"; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    O << "}, "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case ARM::VTBX1:
    O << ", {"; 
    printOperand(MI, 2, O); 
    O << "}, "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case ARM::VTBX2:
    O << ", {"; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "}, "; 
    printOperand(MI, 4, O); 
    return;
    break;
  case ARM::VTBX3:
    O << ", {"; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    O << "}, "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case ARM::VTBX4:
    O << ", {"; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    O << "}, "; 
    printOperand(MI, 6, O); 
    return;
    break;
  case ARM::t2LDRD_POST:
  case ARM::t2STRD_POST:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << "], "; 
    printT2AddrModeImm8s4OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::t2LDRD_PRE:
  case ARM::t2STRD_PRE:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printT2AddrModeImm8s4OffsetOperand(MI, 3, O); 
    O << "]!"; 
    return;
    break;
  case ARM::t2LEApcrelJT:
    O << '_'; 
    printNoHashImmediate(MI, 2, O); 
    return;
    break;
  case ARM::t2PLDWs:
  case ARM::t2PLDs:
  case ARM::t2PLIs:
    O << ", lsl "; 
    printOperand(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case ARM::t2SXTBr_rot:
  case ARM::t2SXTHr_rot:
  case ARM::t2UXTBr_rot:
  case ARM::t2UXTHr_rot:
    printOperand(MI, 1, O); 
    O << ", ror "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }
  return;
}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *ARMAsmPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 112 && "Invalid register number!");

  static const unsigned RegAsmOffset[] = {
    0, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 39, 43, 
    47, 51, 55, 59, 63, 67, 71, 75, 79, 83, 87, 91, 95, 99, 
    103, 107, 111, 115, 119, 123, 129, 137, 140, 143, 146, 149, 152, 155, 
    158, 161, 164, 167, 170, 173, 177, 181, 185, 189, 193, 197, 201, 205, 
    209, 213, 217, 221, 225, 229, 235, 241, 247, 253, 256, 259, 262, 265, 
    268, 271, 274, 277, 280, 283, 287, 291, 295, 298, 301, 304, 307, 310, 
    313, 316, 319, 322, 325, 329, 333, 337, 341, 345, 349, 353, 357, 361, 
    365, 369, 373, 377, 381, 385, 389, 393, 397, 401, 405, 409, 413, 0
  };

  const char *AsmStrs =
    "cpsr\000d0\000d1\000d2\000d3\000d4\000d5\000d6\000d7\000d8\000d9\000d10"
    "\000d11\000d12\000d13\000d14\000d15\000d16\000d17\000d18\000d19\000d20\000"
    "d21\000d22\000d23\000d24\000d25\000d26\000d27\000d28\000d29\000d30\000d"
    "31\000fpscr\000itstate\000lr\000pc\000q0\000q1\000q2\000q3\000q4\000q5\000"
    "q6\000q7\000q8\000q9\000q10\000q11\000q12\000q13\000q14\000q15\000qq0\000"
    "qq1\000qq2\000qq3\000qq4\000qq5\000qq6\000qq7\000qqqq0\000qqqq1\000qqqq"
    "2\000qqqq3\000r0\000r1\000r2\000r3\000r4\000r5\000r6\000r7\000r8\000r9\000"
    "r10\000r11\000r12\000s0\000s1\000s2\000s3\000s4\000s5\000s6\000s7\000s8"
    "\000s9\000s10\000s11\000s12\000s13\000s14\000s15\000s16\000s17\000s18\000"
    "s19\000s20\000s21\000s22\000s23\000s24\000s25\000s26\000s27\000s28\000s"
    "29\000s30\000s31\000sp\000";
  return AsmStrs+RegAsmOffset[RegNo-1];
}


#ifdef GET_INSTRUCTION_NAME
#undef GET_INSTRUCTION_NAME

/// getInstructionName: This method is automatically generated by tblgen
/// from the instruction set description.  This returns the enum name of the
/// specified instruction.
const char *ARMAsmPrinter::getInstructionName(unsigned Opcode) {
  assert(Opcode < 2158 && "Invalid instruction number!");

  static const unsigned InstAsmOffset[] = {
    0, 4, 14, 27, 36, 45, 50, 65, 79, 92, 106, 123, 133, 146, 
    151, 159, 167, 175, 181, 187, 193, 200, 207, 214, 220, 226, 232, 249, 
    264, 271, 278, 285, 291, 297, 303, 323, 343, 362, 382, 402, 421, 441, 
    461, 480, 501, 522, 542, 561, 580, 598, 618, 638, 657, 677, 697, 716, 
    732, 748, 763, 765, 773, 780, 784, 788, 794, 800, 806, 811, 814, 818, 
    824, 832, 837, 847, 856, 867, 873, 882, 889, 896, 899, 903, 910, 915, 
    919, 923, 928, 934, 938, 945, 952, 959, 965, 971, 977, 984, 991, 998, 
    1014, 1018, 1022, 1030, 1036, 1043, 1051, 1057, 1064, 1070, 1076, 1082, 1090, 1098, 
    1105, 1111, 1131, 1150, 1174, 1187, 1200, 1211, 1221, 1233, 1245, 1255, 1264, 1276, 
    1288, 1298, 1307, 1318, 1329, 1338, 1346, 1350, 1358, 1366, 1370, 1375, 1381, 1391, 
    1400, 1405, 1415, 1424, 1430, 1437, 1444, 1451, 1456, 1462, 1472, 1481, 1487, 1494, 
    1505, 1515, 1521, 1528, 1539, 1549, 1554, 1563, 1571, 1577, 1586, 1597, 1601, 1606, 
    1611, 1617, 1621, 1625, 1632, 1639, 1646, 1654, 1662, 1670, 1675, 1682, 1694, 1704, 
    1709, 1717, 1723, 1728, 1740, 1752, 1756, 1761, 1766, 1772, 1776, 1783, 1787, 1792, 
    1799, 1807, 1811, 1816, 1821, 1826, 1830, 1836, 1842, 1848, 1855, 1862, 1870, 1878, 
    1887, 1896, 1903, 1911, 1919, 1925, 1931, 1937, 1943, 1948, 1953, 1958, 1963, 1968, 
    1975, 1981, 1986, 1992, 1998, 2003, 2008, 2015, 2021, 2026, 2030, 2036, 2042, 2046, 
    2051, 2058, 2065, 2071, 2077, 2083, 2090, 2097, 2103, 2109, 2115, 2122, 2128, 2133, 
    2141, 2149, 2157, 2163, 2169, 2175, 2180, 2184, 2193, 2202, 2206, 2214, 2221, 2227, 
    2233, 2241, 2248, 2252, 2259, 2266, 2272, 2279, 2285, 2293, 2301, 2308, 2316, 2324, 
    2332, 2339, 2346, 2353, 2360, 2366, 2373, 2380, 2388, 2394, 2401, 2407, 2414, 2420, 
    2427, 2433, 2440, 2447, 2454, 2460, 2467, 2474, 2481, 2488, 2494, 2501, 2505, 2510, 
    2515, 2522, 2527, 2534, 2540, 2553, 2566, 2577, 2587, 2599, 2611, 2621, 2630, 2642, 
    2654, 2664, 2673, 2684, 2695, 2704, 2712, 2716, 2724, 2728, 2733, 2739, 2749, 2758, 
    2763, 2773, 2782, 2788, 2795, 2802, 2809, 2814, 2820, 2830, 2839, 2844, 2853, 2861, 
    2868, 2875, 2882, 2888, 2894, 2900, 2904, 2908, 2913, 2923, 2937, 2945, 2957, 2965, 
    2977, 2985, 2997, 3003, 3013, 3019, 3029, 3038, 3049, 3061, 3071, 3080, 3091, 3102, 
    3115, 3126, 3139, 3145, 3151, 3157, 3164, 3169, 3175, 3181, 3187, 3194, 3200, 3205, 
    3210, 3218, 3225, 3231, 3237, 3245, 3252, 3258, 3264, 3270, 3278, 3285, 3291, 3297, 
    3305, 3312, 3318, 3325, 3330, 3337, 3342, 3349, 3355, 3365, 3379, 3387, 3399, 3407, 
    3419, 3427, 3439, 3445, 3455, 3461, 3471, 3483, 3495, 3507, 3519, 3531, 3543, 3554, 
    3565, 3576, 3587, 3598, 3608, 3619, 3630, 3641, 3652, 3663, 3673, 3685, 3697, 3709, 
    3721, 3733, 3745, 3752, 3759, 3770, 3781, 3792, 3803, 3814, 3824, 3835, 3846, 3857, 
    3868, 3879, 3889, 3895, 3901, 3908, 3919, 3926, 3936, 3946, 3956, 3966, 3976, 3985, 
    3992, 3999, 4006, 4013, 4019, 4031, 4043, 4054, 4066, 4078, 4090, 4102, 4114, 4126, 
    4132, 4144, 4156, 4168, 4180, 4192, 4204, 4211, 4222, 4229, 4239, 4249, 4259, 4269, 
    4279, 4289, 4299, 4308, 4314, 4320, 4326, 4332, 4338, 4344, 4350, 4356, 4362, 4368, 
    4375, 4382, 4392, 4402, 4412, 4422, 4432, 4441, 4452, 4463, 4474, 4485, 4496, 4507, 
    4518, 4528, 4535, 4542, 4553, 4564, 4575, 4586, 4597, 4607, 4618, 4629, 4640, 4651, 
    4662, 4672, 4683, 4694, 4705, 4716, 4727, 4738, 4749, 4759, 4766, 4773, 4784, 4795, 
    4806, 4817, 4828, 4838, 4849, 4860, 4871, 4882, 4893, 4903, 4914, 4925, 4936, 4947, 
    4958, 4969, 4980, 4990, 5001, 5012, 5023, 5034, 5045, 5056, 5067, 5077, 5087, 5097, 
    5107, 5117, 5127, 5136, 5147, 5158, 5169, 5180, 5191, 5202, 5213, 5223, 5233, 5243, 
    5253, 5263, 5273, 5282, 5288, 5295, 5302, 5310, 5318, 5324, 5331, 5338, 5344, 5350, 
    5358, 5366, 5373, 5380, 5388, 5396, 5405, 5418, 5427, 5436, 5449, 5458, 5468, 5478, 
    5488, 5498, 5507, 5520, 5529, 5538, 5551, 5560, 5570, 5580, 5590, 5600, 5606, 5612, 
    5620, 5628, 5636, 5644, 5651, 5658, 5668, 5678, 5688, 5698, 5707, 5716, 5725, 5734, 
    5741, 5749, 5756, 5764, 5770, 5776, 5784, 5792, 5799, 5806, 5814, 5822, 5829, 5836, 
    5846, 5856, 5865, 5875, 5884, 5896, 5908, 5920, 5932, 5944, 5955, 5967, 5979, 5991, 
    6003, 6015, 6026, 6038, 6050, 6062, 6074, 6086, 6097, 6109, 6121, 6133, 6145, 6157, 
    6168, 6176, 6185, 6198, 6207, 6220, 6232, 6240, 6249, 6262, 6271, 6284, 6296, 6304, 
    6313, 6328, 6347, 6360, 6369, 6384, 6403, 6416, 6428, 6435, 6443, 6455, 6463, 6475, 
    6486, 6492, 6500, 6514, 6532, 6544, 6552, 6566, 6584, 6596, 6604, 6618, 6636, 6648, 
    6655, 6668, 6685, 6696, 6706, 6720, 6730, 6744, 6753, 6766, 6776, 6790, 6803, 6813, 
    6827, 6840, 6848, 6860, 6868, 6880, 6887, 6898, 6906, 6920, 6938, 6950, 6958, 6972, 
    6990, 7002, 7009, 7022, 7039, 7050, 7058, 7072, 7090, 7102, 7110, 7124, 7142, 7154, 
    7161, 7174, 7191, 7202, 7212, 7226, 7236, 7250, 7259, 7272, 7282, 7296, 7309, 7319, 
    7333, 7346, 7354, 7368, 7386, 7398, 7406, 7420, 7438, 7450, 7457, 7470, 7487, 7498, 
    7506, 7524, 7536, 7557, 7565, 7583, 7595, 7616, 7623, 7640, 7651, 7671, 7681, 7695, 
    7705, 7719, 7728, 7741, 7751, 7765, 7778, 7788, 7802, 7815, 7823, 7837, 7855, 7867, 
    7875, 7889, 7907, 7919, 7926, 7939, 7956, 7967, 7975, 7993, 8005, 8026, 8034, 8052, 
    8064, 8085, 8092, 8109, 8120, 8140, 8146, 8156, 8162, 8168, 8178, 8184, 8190, 8197, 
    8208, 8215, 8226, 8237, 8248, 8259, 8270, 8280, 8291, 8302, 8313, 8324, 8335, 8345, 
    8352, 8363, 8370, 8381, 8392, 8403, 8414, 8425, 8435, 8446, 8457, 8468, 8479, 8490, 
    8500, 8506, 8520, 8534, 8548, 8562, 8574, 8586, 8598, 8610, 8622, 8634, 8640, 8647, 
    8654, 8663, 8672, 8684, 8696, 8708, 8720, 8730, 8740, 8750, 8760, 8770, 8779, 8785, 
    8799, 8813, 8827, 8841, 8853, 8865, 8877, 8889, 8901, 8913, 8919, 8926, 8933, 8942, 
    8951, 8963, 8975, 8987, 8999, 9009, 9019, 9029, 9039, 9049, 9058, 9064, 9072, 9080, 
    9090, 9102, 9114, 9126, 9138, 9150, 9162, 9173, 9184, 9194, 9200, 9207, 9216, 9224, 
    9232, 9239, 9245, 9252, 9260, 9268, 9278, 9288, 9298, 9308, 9318, 9328, 9338, 9347, 
    9352, 9357, 9363, 9370, 9384, 9398, 9412, 9426, 9438, 9450, 9462, 9474, 9486, 9498, 
    9504, 9511, 9522, 9529, 9536, 9543, 9552, 9561, 9573, 9585, 9597, 9609, 9619, 9629, 
    9639, 9649, 9659, 9668, 9674, 9680, 9690, 9700, 9710, 9720, 9726, 9734, 9740, 9748, 
    9757, 9764, 9775, 9784, 9793, 9802, 9811, 9819, 9827, 9834, 9841, 9848, 9855, 9862, 
    9869, 9875, 9881, 9887, 9893, 9906, 9919, 9932, 9945, 9958, 9970, 9983, 9996, 10009, 
    10022, 10035, 10047, 10060, 10073, 10086, 10099, 10112, 10124, 10137, 10150, 10163, 10176, 10189, 
    10201, 10208, 10217, 10226, 10234, 10241, 10250, 10259, 10267, 10276, 10285, 10293, 10300, 10309, 
    10318, 10326, 10335, 10344, 10352, 10363, 10374, 10385, 10396, 10407, 10417, 10429, 10441, 10453, 
    10465, 10477, 10489, 10501, 10512, 10524, 10536, 10548, 10560, 10572, 10584, 10596, 10607, 10622, 
    10637, 10650, 10663, 10678, 10693, 10706, 10719, 10734, 10749, 10764, 10779, 10792, 10805, 10818, 
    10831, 10846, 10861, 10874, 10887, 10901, 10915, 10928, 10941, 10954, 10966, 10979, 10992, 11004, 
    11015, 11026, 11037, 11048, 11059, 11069, 11085, 11101, 11117, 11133, 11147, 11161, 11175, 11189, 
    11202, 11215, 11228, 11241, 11254, 11267, 11280, 11292, 11305, 11318, 11331, 11344, 11357, 11370, 
    11383, 11395, 11409, 11423, 11436, 11450, 11464, 11477, 11491, 11505, 11518, 11531, 11544, 11557, 
    11570, 11583, 11596, 11609, 11621, 11634, 11647, 11660, 11673, 11686, 11699, 11712, 11724, 11736, 
    11748, 11760, 11772, 11784, 11796, 11808, 11819, 11832, 11845, 11858, 11871, 11884, 11897, 11910, 
    11922, 11934, 11946, 11958, 11970, 11982, 11994, 12006, 12017, 12030, 12043, 12055, 12068, 12081, 
    12093, 12106, 12119, 12131, 12143, 12155, 12167, 12179, 12191, 12203, 12215, 12226, 12238, 12250, 
    12262, 12274, 12286, 12298, 12310, 12321, 12334, 12347, 12359, 12367, 12376, 12385, 12393, 12402, 
    12411, 12420, 12429, 12439, 12448, 12458, 12467, 12477, 12487, 12496, 12505, 12515, 12525, 12534, 
    12543, 12556, 12569, 12582, 12595, 12608, 12620, 12633, 12646, 12659, 12672, 12685, 12697, 12709, 
    12721, 12733, 12745, 12757, 12769, 12781, 12792, 12804, 12816, 12828, 12840, 12852, 12864, 12876, 
    12887, 12899, 12911, 12922, 12934, 12946, 12958, 12970, 12982, 12994, 13006, 13017, 13029, 13041, 
    13053, 13065, 13077, 13089, 13101, 13112, 13121, 13131, 13141, 13150, 13160, 13170, 13182, 13194, 
    13206, 13218, 13230, 13242, 13254, 13265, 13277, 13289, 13301, 13313, 13325, 13337, 13349, 13360, 
    13373, 13386, 13398, 13408, 13418, 13427, 13436, 13445, 13453, 13465, 13477, 13489, 13501, 13513, 
    13525, 13536, 13547, 13558, 13569, 13580, 13591, 13602, 13612, 13623, 13634, 13645, 13656, 13667, 
    13678, 13689, 13699, 13710, 13721, 13732, 13743, 13754, 13765, 13776, 13786, 13797, 13808, 13818, 
    13829, 13840, 13851, 13862, 13873, 13884, 13895, 13905, 13916, 13927, 13938, 13949, 13960, 13971, 
    13982, 13992, 13999, 14006, 14013, 14020, 14030, 14040, 14050, 14060, 14070, 14080, 14090, 14099, 
    14106, 14113, 14120, 14127, 14138, 14149, 14160, 14171, 14182, 14193, 14204, 14214, 14225, 14236, 
    14247, 14258, 14269, 14280, 14291, 14301, 14311, 14321, 14331, 14341, 14351, 14361, 14371, 14380, 
    14388, 14397, 14410, 14419, 14432, 14444, 14452, 14461, 14474, 14483, 14496, 14508, 14516, 14525, 
    14540, 14559, 14572, 14581, 14596, 14615, 14628, 14640, 14647, 14655, 14667, 14675, 14687, 14698, 
    14704, 14712, 14726, 14744, 14756, 14764, 14778, 14796, 14808, 14816, 14830, 14848, 14860, 14867, 
    14880, 14897, 14908, 14918, 14932, 14942, 14956, 14965, 14978, 14988, 15002, 15015, 15025, 15039, 
    15052, 15060, 15072, 15080, 15092, 15099, 15110, 15118, 15132, 15150, 15162, 15170, 15184, 15202, 
    15214, 15221, 15234, 15251, 15262, 15270, 15284, 15302, 15314, 15322, 15336, 15354, 15366, 15373, 
    15386, 15403, 15414, 15424, 15438, 15448, 15462, 15471, 15484, 15494, 15508, 15521, 15531, 15545, 
    15558, 15566, 15580, 15598, 15610, 15618, 15632, 15650, 15662, 15669, 15682, 15699, 15710, 15718, 
    15736, 15748, 15769, 15777, 15795, 15807, 15828, 15835, 15852, 15863, 15883, 15893, 15907, 15917, 
    15931, 15940, 15953, 15963, 15977, 15990, 16000, 16014, 16027, 16035, 16049, 16067, 16079, 16087, 
    16101, 16119, 16131, 16138, 16151, 16168, 16179, 16187, 16205, 16217, 16238, 16246, 16264, 16276, 
    16297, 16304, 16321, 16332, 16352, 16358, 16368, 16374, 16380, 16390, 16396, 16402, 16408, 16420, 
    16432, 16443, 16455, 16467, 16479, 16491, 16503, 16515, 16521, 16533, 16545, 16557, 16569, 16581, 
    16593, 16600, 16611, 16618, 16628, 16638, 16648, 16658, 16668, 16678, 16688, 16697, 16703, 16709, 
    16715, 16721, 16727, 16733, 16739, 16745, 16751, 16757, 16764, 16771, 16779, 16787, 16795, 16803, 
    16810, 16817, 16824, 16831, 16839, 16847, 16855, 16863, 16870, 16877, 16885, 16893, 16900, 16908, 
    16916, 16923, 16933, 16943, 16953, 16963, 16973, 16982, 16989, 16996, 17003, 17010, 17017, 17024, 
    17032, 17040, 17047, 17055, 17063, 17070, 17078, 17086, 17093, 17101, 17109, 17116, 17120, 17124, 
    17130, 17139, 17148, 17157, 17165, 17173, 17181, 17190, 17199, 17208, 17218, 17230, 17240, 17248, 
    17258, 17266, 17274, 17283, 17292, 17301, 17309, 17317, 17325, 17333, 17341, 17345, 17351, 17357, 
    17365, 17373, 17381, 17389, 17395, 17401, 17409, 17415, 17424, 17433, 17442, 17450, 17458, 17466, 
    17475, 17484, 17493, 17499, 17505, 17514, 17525, 17534, 17545, 17554, 17565, 17573, 17581, 17590, 
    17601, 17610, 17621, 17630, 17641, 17649, 17657, 17665, 17673, 17681, 17689, 17694, 17715, 17741, 
    17747, 17757, 17767, 17775, 17787, 17798, 17808, 17817, 17827, 17835, 17847, 17858, 17867, 17877, 
    17885, 17894, 17903, 17912, 17920, 17932, 17943, 17953, 17962, 17972, 17980, 17989, 18002, 18014, 
    18025, 18035, 18046, 18055, 18064, 18077, 18089, 18100, 18110, 18121, 18130, 18137, 18148, 18158, 
    18167, 18175, 18184, 18197, 18204, 18215, 18228, 18236, 18244, 18252, 18260, 18266, 18272, 18283, 
    18292, 18303, 18314, 18323, 18334, 18344, 18351, 18360, 18372, 18379, 18387, 18401, 18415, 18421, 
    18430, 18436, 18445, 18451, 18458, 18465, 18472, 18478, 18486, 18494, 18502, 18510, 18518, 18526, 
    18534, 18542, 18552, 18561, 18571, 18579, 18587, 18596, 18604, 18613, 18620, 18627, 18636, 18644, 
    18653, 18660, 18667, 18674, 18683, 18691, 18698, 18706, 18714, 18721, 18728, 18737, 18745, 18752, 
    18758, 18766, 18774, 18782, 18791, 18799, 18808, 18816, 18824, 18833, 18842, 18850, 18858, 18866, 
    18875, 18883, 18890, 18899, 18908, 18917, 18925, 18933, 18941, 18948, 18955, 18961, 18967, 18977, 
    18986, 18994, 19002, 19012, 19021, 19027, 19036, 19045, 19053, 19062, 19070, 19080, 19090, 19099, 
    19109, 19119, 19129, 19138, 19147, 19156, 19165, 19173, 19182, 19191, 19201, 19209, 19218, 19226, 
    19235, 19243, 19252, 19260, 19269, 19278, 19287, 19295, 19304, 19313, 19322, 19331, 19339, 19348, 
    19356, 19365, 19373, 19382, 19389, 19398, 19405, 19414, 19422, 19428, 19438, 19446, 19458, 19469, 
    19479, 19488, 19496, 19508, 19519, 19528, 19536, 19545, 19554, 19563, 19571, 19583, 19594, 19604, 
    19613, 19621, 19628, 19639, 19649, 19658, 19666, 19673, 19682, 19691, 19700, 19710, 19722, 19732, 
    19740, 19750, 19758, 19766, 19778, 19794, 19804, 19818, 19828, 19842, 19852, 19866, 19874, 19886, 
    19894, 19906, 19912, 19921, 19927, 19936, 19944, 19952, 19960, 19969, 19977, 19985, 19993, 20002, 
    20010, 20017, 20024, 20031, 20041, 20050, 20058, 20066, 20076, 20085, 20093, 20101, 20109, 20119, 
    20128, 20136, 20144, 20154, 20163, 20171, 20180, 20187, 20196, 20203, 20212, 20220, 20232, 20248, 
    20258, 20272, 20282, 20296, 20306, 20320, 20328, 20340, 20348, 20360, 20366, 20372, 20380, 20385, 
    20394, 20401, 20408, 20417, 20425, 20434, 20441, 20449, 20457, 20475, 20491, 20496, 20503, 20510, 
    20513, 20518, 20524, 20528, 20534, 20543, 20549, 20558, 20564, 20571, 20579, 20583, 20591, 20606, 
    20612, 20617, 20623, 20629, 20634, 20640, 20648, 20655, 20661, 20670, 20678, 20685, 20690, 20695, 
    20716, 20736, 20741, 20750, 20755, 20761, 20768, 20774, 20781, 20788, 20795, 20802, 20808, 20816, 
    20828, 20836, 20846, 20858, 20865, 20872, 20879, 20886, 20894, 20902, 20917, 20924, 20936, 20949, 
    20956, 20962, 20975, 20980, 20985, 20990, 20995, 21003, 21008, 21017, 21023, 21028, 21035, 21042, 
    21047, 21052, 21061, 21066, 21076, 21086, 21091, 21100, 21105, 21111, 21118, 21124, 21131, 21137, 
    21145, 21152, 21159, 21166, 21174, 21179, 21185, 21191, 21198, 21206, 21212, 21217, 21223, 21229, 
    21234, 21239, 0
  };

  const char *Strs =
    "PHI\000INLINEASM\000PROLOG_LABEL\000EH_LABEL\000GC_LABEL\000KILL\000EXT"
    "RACT_SUBREG\000INSERT_SUBREG\000IMPLICIT_DEF\000SUBREG_TO_REG\000COPY_T"
    "O_REGCLASS\000DBG_VALUE\000REG_SEQUENCE\000COPY\000ADCSSri\000ADCSSrr\000"
    "ADCSSrs\000ADCri\000ADCrr\000ADCrs\000ADDSri\000ADDSrr\000ADDSrs\000ADD"
    "ri\000ADDrr\000ADDrs\000ADJCALLSTACKDOWN\000ADJCALLSTACKUP\000ANDSri\000"
    "ANDSrr\000ANDSrs\000ANDri\000ANDrr\000ANDrs\000ATOMIC_CMP_SWAP_I16\000A"
    "TOMIC_CMP_SWAP_I32\000ATOMIC_CMP_SWAP_I8\000ATOMIC_LOAD_ADD_I16\000ATOM"
    "IC_LOAD_ADD_I32\000ATOMIC_LOAD_ADD_I8\000ATOMIC_LOAD_AND_I16\000ATOMIC_"
    "LOAD_AND_I32\000ATOMIC_LOAD_AND_I8\000ATOMIC_LOAD_NAND_I16\000ATOMIC_LO"
    "AD_NAND_I32\000ATOMIC_LOAD_NAND_I8\000ATOMIC_LOAD_OR_I16\000ATOMIC_LOAD"
    "_OR_I32\000ATOMIC_LOAD_OR_I8\000ATOMIC_LOAD_SUB_I16\000ATOMIC_LOAD_SUB_"
    "I32\000ATOMIC_LOAD_SUB_I8\000ATOMIC_LOAD_XOR_I16\000ATOMIC_LOAD_XOR_I32"
    "\000ATOMIC_LOAD_XOR_I8\000ATOMIC_SWAP_I16\000ATOMIC_SWAP_I32\000ATOMIC_"
    "SWAP_I8\000B\000BCCZi64\000BCCi64\000BFC\000BFI\000BICri\000BICrr\000BI"
    "Crs\000BKPT\000BL\000BLX\000BLXr9\000BL_pred\000BLr9\000BLr9_pred\000BM"
    "OVPCRX\000BMOVPCRXr9\000BRIND\000BR_JTadd\000BR_JTm\000BR_JTr\000BX\000"
    "BXJ\000BX_RET\000BXr9\000Bcc\000CDP\000CDP2\000CLREX\000CLZ\000CMNzri\000"
    "CMNzrr\000CMNzrs\000CMPri\000CMPrr\000CMPrs\000CMPzri\000CMPzrr\000CMPz"
    "rs\000CONSTPOOL_ENTRY\000CPS\000DBG\000DMB_MCR\000DMBsy\000DMBvar\000DS"
    "B_MCR\000DSBsy\000DSBvar\000EORri\000EORrr\000EORrs\000FCONSTD\000FCONS"
    "TS\000FMSTAT\000ISBsy\000Int_eh_sjlj_longjmp\000Int_eh_sjlj_setjmp\000I"
    "nt_eh_sjlj_setjmp_nofp\000LDC2L_OFFSET\000LDC2L_OPTION\000LDC2L_POST\000"
    "LDC2L_PRE\000LDC2_OFFSET\000LDC2_OPTION\000LDC2_POST\000LDC2_PRE\000LDC"
    "L_OFFSET\000LDCL_OPTION\000LDCL_POST\000LDCL_PRE\000LDC_OFFSET\000LDC_O"
    "PTION\000LDC_POST\000LDC_PRE\000LDM\000LDM_RET\000LDM_UPD\000LDR\000LDR"
    "B\000LDRBT\000LDRB_POST\000LDRB_PRE\000LDRD\000LDRD_POST\000LDRD_PRE\000"
    "LDREX\000LDREXB\000LDREXD\000LDREXH\000LDRH\000LDRHT\000LDRH_POST\000LD"
    "RH_PRE\000LDRSB\000LDRSBT\000LDRSB_POST\000LDRSB_PRE\000LDRSH\000LDRSHT"
    "\000LDRSH_POST\000LDRSH_PRE\000LDRT\000LDR_POST\000LDR_PRE\000LDRcp\000"
    "LEApcrel\000LEApcrelJT\000MCR\000MCR2\000MCRR\000MCRR2\000MLA\000MLS\000"
    "MOVCCi\000MOVCCr\000MOVCCs\000MOVPCLR\000MOVPCRX\000MOVTi16\000MOVi\000"
    "MOVi16\000MOVi2pieces\000MOVi32imm\000MOVr\000MOVr_TC\000MOVrx\000MOVs\000"
    "MOVsra_flag\000MOVsrl_flag\000MRC\000MRC2\000MRRC\000MRRC2\000MRS\000MR"
    "Ssys\000MSR\000MSRi\000MSRsys\000MSRsysi\000MUL\000MVNi\000MVNr\000MVNs"
    "\000NOP\000ORRri\000ORRrr\000ORRrs\000PICADD\000PICLDR\000PICLDRB\000PI"
    "CLDRH\000PICLDRSB\000PICLDRSH\000PICSTR\000PICSTRB\000PICSTRH\000PKHBT\000"
    "PKHTB\000PLDWi\000PLDWr\000PLDi\000PLDr\000PLIi\000PLIr\000QADD\000QADD"
    "16\000QADD8\000QASX\000QDADD\000QDSUB\000QSAX\000QSUB\000QSUB16\000QSUB"
    "8\000RBIT\000REV\000REV16\000REVSH\000RFE\000RFEW\000RSBSri\000RSBSrs\000"
    "RSBri\000RSBrr\000RSBrs\000RSCSri\000RSCSrs\000RSCri\000RSCrr\000RSCrs\000"
    "SADD16\000SADD8\000SASX\000SBCSSri\000SBCSSrr\000SBCSSrs\000SBCri\000SB"
    "Crr\000SBCrs\000SBFX\000SEL\000SETENDBE\000SETENDLE\000SEV\000SHADD16\000"
    "SHADD8\000SHASX\000SHSAX\000SHSUB16\000SHSUB8\000SMC\000SMLABB\000SMLAB"
    "T\000SMLAD\000SMLADX\000SMLAL\000SMLALBB\000SMLALBT\000SMLALD\000SMLALD"
    "X\000SMLALTB\000SMLALTT\000SMLATB\000SMLATT\000SMLAWB\000SMLAWT\000SMLS"
    "D\000SMLSDX\000SMLSLD\000SMLSLDX\000SMMLA\000SMMLAR\000SMMLS\000SMMLSR\000"
    "SMMUL\000SMMULR\000SMUAD\000SMUADX\000SMULBB\000SMULBT\000SMULL\000SMUL"
    "TB\000SMULTT\000SMULWB\000SMULWT\000SMUSD\000SMUSDX\000SRS\000SRSW\000S"
    "SAT\000SSAT16\000SSAX\000SSUB16\000SSUB8\000STC2L_OFFSET\000STC2L_OPTIO"
    "N\000STC2L_POST\000STC2L_PRE\000STC2_OFFSET\000STC2_OPTION\000STC2_POST"
    "\000STC2_PRE\000STCL_OFFSET\000STCL_OPTION\000STCL_POST\000STCL_PRE\000"
    "STC_OFFSET\000STC_OPTION\000STC_POST\000STC_PRE\000STM\000STM_UPD\000ST"
    "R\000STRB\000STRBT\000STRB_POST\000STRB_PRE\000STRD\000STRD_POST\000STR"
    "D_PRE\000STREX\000STREXB\000STREXD\000STREXH\000STRH\000STRHT\000STRH_P"
    "OST\000STRH_PRE\000STRT\000STR_POST\000STR_PRE\000SUBSri\000SUBSrr\000S"
    "UBSrs\000SUBri\000SUBrr\000SUBrs\000SVC\000SWP\000SWPB\000SXTAB16rr\000"
    "SXTAB16rr_rot\000SXTABrr\000SXTABrr_rot\000SXTAHrr\000SXTAHrr_rot\000SX"
    "TB16r\000SXTB16r_rot\000SXTBr\000SXTBr_rot\000SXTHr\000SXTHr_rot\000TAI"
    "LJMPd\000TAILJMPdND\000TAILJMPdNDt\000TAILJMPdt\000TAILJMPr\000TAILJMPr"
    "ND\000TCRETURNdi\000TCRETURNdiND\000TCRETURNri\000TCRETURNriND\000TEQri"
    "\000TEQrr\000TEQrs\000TPsoft\000TRAP\000TSTri\000TSTrr\000TSTrs\000UADD"
    "16\000UADD8\000UASX\000UBFX\000UHADD16\000UHADD8\000UHASX\000UHSAX\000U"
    "HSUB16\000UHSUB8\000UMAAL\000UMLAL\000UMULL\000UQADD16\000UQADD8\000UQA"
    "SX\000UQSAX\000UQSUB16\000UQSUB8\000USAD8\000USADA8\000USAT\000USAT16\000"
    "USAX\000USUB16\000USUB8\000UXTAB16rr\000UXTAB16rr_rot\000UXTABrr\000UXT"
    "ABrr_rot\000UXTAHrr\000UXTAHrr_rot\000UXTB16r\000UXTB16r_rot\000UXTBr\000"
    "UXTBr_rot\000UXTHr\000UXTHr_rot\000VABALsv2i64\000VABALsv4i32\000VABALs"
    "v8i16\000VABALuv2i64\000VABALuv4i32\000VABALuv8i16\000VABAsv16i8\000VAB"
    "Asv2i32\000VABAsv4i16\000VABAsv4i32\000VABAsv8i16\000VABAsv8i8\000VABAu"
    "v16i8\000VABAuv2i32\000VABAuv4i16\000VABAuv4i32\000VABAuv8i16\000VABAuv"
    "8i8\000VABDLsv2i64\000VABDLsv4i32\000VABDLsv8i16\000VABDLuv2i64\000VABD"
    "Luv4i32\000VABDLuv8i16\000VABDfd\000VABDfq\000VABDsv16i8\000VABDsv2i32\000"
    "VABDsv4i16\000VABDsv4i32\000VABDsv8i16\000VABDsv8i8\000VABDuv16i8\000VA"
    "BDuv2i32\000VABDuv4i16\000VABDuv4i32\000VABDuv8i16\000VABDuv8i8\000VABS"
    "D\000VABSS\000VABSfd\000VABSfd_sfp\000VABSfq\000VABSv16i8\000VABSv2i32\000"
    "VABSv4i16\000VABSv4i32\000VABSv8i16\000VABSv8i8\000VACGEd\000VACGEq\000"
    "VACGTd\000VACGTq\000VADDD\000VADDHNv2i32\000VADDHNv4i16\000VADDHNv8i8\000"
    "VADDLsv2i64\000VADDLsv4i32\000VADDLsv8i16\000VADDLuv2i64\000VADDLuv4i32"
    "\000VADDLuv8i16\000VADDS\000VADDWsv2i64\000VADDWsv4i32\000VADDWsv8i16\000"
    "VADDWuv2i64\000VADDWuv4i32\000VADDWuv8i16\000VADDfd\000VADDfd_sfp\000VA"
    "DDfq\000VADDv16i8\000VADDv1i64\000VADDv2i32\000VADDv2i64\000VADDv4i16\000"
    "VADDv4i32\000VADDv8i16\000VADDv8i8\000VANDd\000VANDq\000VBICd\000VBICq\000"
    "VBIFd\000VBIFq\000VBITd\000VBITq\000VBSLd\000VBSLq\000VCEQfd\000VCEQfq\000"
    "VCEQv16i8\000VCEQv2i32\000VCEQv4i16\000VCEQv4i32\000VCEQv8i16\000VCEQv8"
    "i8\000VCEQzv16i8\000VCEQzv2f32\000VCEQzv2i32\000VCEQzv4f32\000VCEQzv4i1"
    "6\000VCEQzv4i32\000VCEQzv8i16\000VCEQzv8i8\000VCGEfd\000VCGEfq\000VCGEs"
    "v16i8\000VCGEsv2i32\000VCGEsv4i16\000VCGEsv4i32\000VCGEsv8i16\000VCGEsv"
    "8i8\000VCGEuv16i8\000VCGEuv2i32\000VCGEuv4i16\000VCGEuv4i32\000VCGEuv8i"
    "16\000VCGEuv8i8\000VCGEzv16i8\000VCGEzv2f32\000VCGEzv2i32\000VCGEzv4f32"
    "\000VCGEzv4i16\000VCGEzv4i32\000VCGEzv8i16\000VCGEzv8i8\000VCGTfd\000VC"
    "GTfq\000VCGTsv16i8\000VCGTsv2i32\000VCGTsv4i16\000VCGTsv4i32\000VCGTsv8"
    "i16\000VCGTsv8i8\000VCGTuv16i8\000VCGTuv2i32\000VCGTuv4i16\000VCGTuv4i3"
    "2\000VCGTuv8i16\000VCGTuv8i8\000VCGTzv16i8\000VCGTzv2f32\000VCGTzv2i32\000"
    "VCGTzv4f32\000VCGTzv4i16\000VCGTzv4i32\000VCGTzv8i16\000VCGTzv8i8\000VC"
    "LEzv16i8\000VCLEzv2f32\000VCLEzv2i32\000VCLEzv4f32\000VCLEzv4i16\000VCL"
    "Ezv4i32\000VCLEzv8i16\000VCLEzv8i8\000VCLSv16i8\000VCLSv2i32\000VCLSv4i"
    "16\000VCLSv4i32\000VCLSv8i16\000VCLSv8i8\000VCLTzv16i8\000VCLTzv2f32\000"
    "VCLTzv2i32\000VCLTzv4f32\000VCLTzv4i16\000VCLTzv4i32\000VCLTzv8i16\000V"
    "CLTzv8i8\000VCLZv16i8\000VCLZv2i32\000VCLZv4i16\000VCLZv4i32\000VCLZv8i"
    "16\000VCLZv8i8\000VCMPD\000VCMPED\000VCMPES\000VCMPEZD\000VCMPEZS\000VC"
    "MPS\000VCMPZD\000VCMPZS\000VCNTd\000VCNTq\000VCVTBHS\000VCVTBSH\000VCVT"
    "DS\000VCVTSD\000VCVTTHS\000VCVTTSH\000VCVTf2sd\000VCVTf2sd_sfp\000VCVTf"
    "2sq\000VCVTf2ud\000VCVTf2ud_sfp\000VCVTf2uq\000VCVTf2xsd\000VCVTf2xsq\000"
    "VCVTf2xud\000VCVTf2xuq\000VCVTs2fd\000VCVTs2fd_sfp\000VCVTs2fq\000VCVTu"
    "2fd\000VCVTu2fd_sfp\000VCVTu2fq\000VCVTxs2fd\000VCVTxs2fq\000VCVTxu2fd\000"
    "VCVTxu2fq\000VDIVD\000VDIVS\000VDUP16d\000VDUP16q\000VDUP32d\000VDUP32q"
    "\000VDUP8d\000VDUP8q\000VDUPLN16d\000VDUPLN16q\000VDUPLN32d\000VDUPLN32"
    "q\000VDUPLN8d\000VDUPLN8q\000VDUPLNfd\000VDUPLNfq\000VDUPfd\000VDUPfdf\000"
    "VDUPfq\000VDUPfqf\000VEORd\000VEORq\000VEXTd16\000VEXTd32\000VEXTd8\000"
    "VEXTdf\000VEXTq16\000VEXTq32\000VEXTq8\000VEXTqf\000VGETLNi32\000VGETLN"
    "s16\000VGETLNs8\000VGETLNu16\000VGETLNu8\000VHADDsv16i8\000VHADDsv2i32\000"
    "VHADDsv4i16\000VHADDsv4i32\000VHADDsv8i16\000VHADDsv8i8\000VHADDuv16i8\000"
    "VHADDuv2i32\000VHADDuv4i16\000VHADDuv4i32\000VHADDuv8i16\000VHADDuv8i8\000"
    "VHSUBsv16i8\000VHSUBsv2i32\000VHSUBsv4i16\000VHSUBsv4i32\000VHSUBsv8i16"
    "\000VHSUBsv8i8\000VHSUBuv16i8\000VHSUBuv2i32\000VHSUBuv4i16\000VHSUBuv4"
    "i32\000VHSUBuv8i16\000VHSUBuv8i8\000VLD1d16\000VLD1d16Q\000VLD1d16Q_UPD"
    "\000VLD1d16T\000VLD1d16T_UPD\000VLD1d16_UPD\000VLD1d32\000VLD1d32Q\000V"
    "LD1d32Q_UPD\000VLD1d32T\000VLD1d32T_UPD\000VLD1d32_UPD\000VLD1d64\000VL"
    "D1d64Q\000VLD1d64QPseudo\000VLD1d64QPseudo_UPD\000VLD1d64Q_UPD\000VLD1d"
    "64T\000VLD1d64TPseudo\000VLD1d64TPseudo_UPD\000VLD1d64T_UPD\000VLD1d64_"
    "UPD\000VLD1d8\000VLD1d8Q\000VLD1d8Q_UPD\000VLD1d8T\000VLD1d8T_UPD\000VL"
    "D1d8_UPD\000VLD1q\000VLD1q16\000VLD1q16Pseudo\000VLD1q16Pseudo_UPD\000V"
    "LD1q16_UPD\000VLD1q32\000VLD1q32Pseudo\000VLD1q32Pseudo_UPD\000VLD1q32_"
    "UPD\000VLD1q64\000VLD1q64Pseudo\000VLD1q64Pseudo_UPD\000VLD1q64_UPD\000"
    "VLD1q8\000VLD1q8Pseudo\000VLD1q8Pseudo_UPD\000VLD1q8_UPD\000VLD2LNd16\000"
    "VLD2LNd16_UPD\000VLD2LNd32\000VLD2LNd32_UPD\000VLD2LNd8\000VLD2LNd8_UPD"
    "\000VLD2LNq16\000VLD2LNq16_UPD\000VLD2LNq16odd\000VLD2LNq32\000VLD2LNq3"
    "2_UPD\000VLD2LNq32odd\000VLD2b16\000VLD2b16_UPD\000VLD2b32\000VLD2b32_U"
    "PD\000VLD2b8\000VLD2b8_UPD\000VLD2d16\000VLD2d16Pseudo\000VLD2d16Pseudo"
    "_UPD\000VLD2d16_UPD\000VLD2d32\000VLD2d32Pseudo\000VLD2d32Pseudo_UPD\000"
    "VLD2d32_UPD\000VLD2d8\000VLD2d8Pseudo\000VLD2d8Pseudo_UPD\000VLD2d8_UPD"
    "\000VLD2q16\000VLD2q16Pseudo\000VLD2q16Pseudo_UPD\000VLD2q16_UPD\000VLD"
    "2q32\000VLD2q32Pseudo\000VLD2q32Pseudo_UPD\000VLD2q32_UPD\000VLD2q8\000"
    "VLD2q8Pseudo\000VLD2q8Pseudo_UPD\000VLD2q8_UPD\000VLD3LNd16\000VLD3LNd1"
    "6_UPD\000VLD3LNd32\000VLD3LNd32_UPD\000VLD3LNd8\000VLD3LNd8_UPD\000VLD3"
    "LNq16\000VLD3LNq16_UPD\000VLD3LNq16odd\000VLD3LNq32\000VLD3LNq32_UPD\000"
    "VLD3LNq32odd\000VLD3d16\000VLD3d16Pseudo\000VLD3d16Pseudo_UPD\000VLD3d1"
    "6_UPD\000VLD3d32\000VLD3d32Pseudo\000VLD3d32Pseudo_UPD\000VLD3d32_UPD\000"
    "VLD3d8\000VLD3d8Pseudo\000VLD3d8Pseudo_UPD\000VLD3d8_UPD\000VLD3q16\000"
    "VLD3q16Pseudo_UPD\000VLD3q16_UPD\000VLD3q16oddPseudo_UPD\000VLD3q32\000"
    "VLD3q32Pseudo_UPD\000VLD3q32_UPD\000VLD3q32oddPseudo_UPD\000VLD3q8\000V"
    "LD3q8Pseudo_UPD\000VLD3q8_UPD\000VLD3q8oddPseudo_UPD\000VLD4LNd16\000VL"
    "D4LNd16_UPD\000VLD4LNd32\000VLD4LNd32_UPD\000VLD4LNd8\000VLD4LNd8_UPD\000"
    "VLD4LNq16\000VLD4LNq16_UPD\000VLD4LNq16odd\000VLD4LNq32\000VLD4LNq32_UP"
    "D\000VLD4LNq32odd\000VLD4d16\000VLD4d16Pseudo\000VLD4d16Pseudo_UPD\000V"
    "LD4d16_UPD\000VLD4d32\000VLD4d32Pseudo\000VLD4d32Pseudo_UPD\000VLD4d32_"
    "UPD\000VLD4d8\000VLD4d8Pseudo\000VLD4d8Pseudo_UPD\000VLD4d8_UPD\000VLD4"
    "q16\000VLD4q16Pseudo_UPD\000VLD4q16_UPD\000VLD4q16oddPseudo_UPD\000VLD4"
    "q32\000VLD4q32Pseudo_UPD\000VLD4q32_UPD\000VLD4q32oddPseudo_UPD\000VLD4"
    "q8\000VLD4q8Pseudo_UPD\000VLD4q8_UPD\000VLD4q8oddPseudo_UPD\000VLDMD\000"
    "VLDMD_UPD\000VLDMQ\000VLDMS\000VLDMS_UPD\000VLDRD\000VLDRS\000VMAXfd\000"
    "VMAXfd_sfp\000VMAXfq\000VMAXsv16i8\000VMAXsv2i32\000VMAXsv4i16\000VMAXs"
    "v4i32\000VMAXsv8i16\000VMAXsv8i8\000VMAXuv16i8\000VMAXuv2i32\000VMAXuv4"
    "i16\000VMAXuv4i32\000VMAXuv8i16\000VMAXuv8i8\000VMINfd\000VMINfd_sfp\000"
    "VMINfq\000VMINsv16i8\000VMINsv2i32\000VMINsv4i16\000VMINsv4i32\000VMINs"
    "v8i16\000VMINsv8i8\000VMINuv16i8\000VMINuv2i32\000VMINuv4i16\000VMINuv4"
    "i32\000VMINuv8i16\000VMINuv8i8\000VMLAD\000VMLALslsv2i32\000VMLALslsv4i"
    "16\000VMLALsluv2i32\000VMLALsluv4i16\000VMLALsv2i64\000VMLALsv4i32\000V"
    "MLALsv8i16\000VMLALuv2i64\000VMLALuv4i32\000VMLALuv8i16\000VMLAS\000VML"
    "Afd\000VMLAfq\000VMLAslfd\000VMLAslfq\000VMLAslv2i32\000VMLAslv4i16\000"
    "VMLAslv4i32\000VMLAslv8i16\000VMLAv16i8\000VMLAv2i32\000VMLAv4i16\000VM"
    "LAv4i32\000VMLAv8i16\000VMLAv8i8\000VMLSD\000VMLSLslsv2i32\000VMLSLslsv"
    "4i16\000VMLSLsluv2i32\000VMLSLsluv4i16\000VMLSLsv2i64\000VMLSLsv4i32\000"
    "VMLSLsv8i16\000VMLSLuv2i64\000VMLSLuv4i32\000VMLSLuv8i16\000VMLSS\000VM"
    "LSfd\000VMLSfq\000VMLSslfd\000VMLSslfq\000VMLSslv2i32\000VMLSslv4i16\000"
    "VMLSslv4i32\000VMLSslv8i16\000VMLSv16i8\000VMLSv2i32\000VMLSv4i16\000VM"
    "LSv4i32\000VMLSv8i16\000VMLSv8i8\000VMOVD\000VMOVDRR\000VMOVDcc\000VMOV"
    "Dneon\000VMOVLsv2i64\000VMOVLsv4i32\000VMOVLsv8i16\000VMOVLuv2i64\000VM"
    "OVLuv4i32\000VMOVLuv8i16\000VMOVNv2i32\000VMOVNv4i16\000VMOVNv8i8\000VM"
    "OVQ\000VMOVQQ\000VMOVQQQQ\000VMOVRRD\000VMOVRRS\000VMOVRS\000VMOVS\000V"
    "MOVSR\000VMOVSRR\000VMOVScc\000VMOVv16i8\000VMOVv1i64\000VMOVv2i32\000V"
    "MOVv2i64\000VMOVv4i16\000VMOVv4i32\000VMOVv8i16\000VMOVv8i8\000VMRS\000"
    "VMSR\000VMULD\000VMULLp\000VMULLslsv2i32\000VMULLslsv4i16\000VMULLsluv2"
    "i32\000VMULLsluv4i16\000VMULLsv2i64\000VMULLsv4i32\000VMULLsv8i16\000VM"
    "ULLuv2i64\000VMULLuv4i32\000VMULLuv8i16\000VMULS\000VMULfd\000VMULfd_sf"
    "p\000VMULfq\000VMULpd\000VMULpq\000VMULslfd\000VMULslfq\000VMULslv2i32\000"
    "VMULslv4i16\000VMULslv4i32\000VMULslv8i16\000VMULv16i8\000VMULv2i32\000"
    "VMULv4i16\000VMULv4i32\000VMULv8i16\000VMULv8i8\000VMVNd\000VMVNq\000VM"
    "VNv2i32\000VMVNv4i16\000VMVNv4i32\000VMVNv8i16\000VNEGD\000VNEGDcc\000V"
    "NEGS\000VNEGScc\000VNEGf32q\000VNEGfd\000VNEGfd_sfp\000VNEGs16d\000VNEG"
    "s16q\000VNEGs32d\000VNEGs32q\000VNEGs8d\000VNEGs8q\000VNMLAD\000VNMLAS\000"
    "VNMLSD\000VNMLSS\000VNMULD\000VNMULS\000VORNd\000VORNq\000VORRd\000VORR"
    "q\000VPADALsv16i8\000VPADALsv2i32\000VPADALsv4i16\000VPADALsv4i32\000VP"
    "ADALsv8i16\000VPADALsv8i8\000VPADALuv16i8\000VPADALuv2i32\000VPADALuv4i"
    "16\000VPADALuv4i32\000VPADALuv8i16\000VPADALuv8i8\000VPADDLsv16i8\000VP"
    "ADDLsv2i32\000VPADDLsv4i16\000VPADDLsv4i32\000VPADDLsv8i16\000VPADDLsv8"
    "i8\000VPADDLuv16i8\000VPADDLuv2i32\000VPADDLuv4i16\000VPADDLuv4i32\000V"
    "PADDLuv8i16\000VPADDLuv8i8\000VPADDf\000VPADDi16\000VPADDi32\000VPADDi8"
    "\000VPMAXf\000VPMAXs16\000VPMAXs32\000VPMAXs8\000VPMAXu16\000VPMAXu32\000"
    "VPMAXu8\000VPMINf\000VPMINs16\000VPMINs32\000VPMINs8\000VPMINu16\000VPM"
    "INu32\000VPMINu8\000VQABSv16i8\000VQABSv2i32\000VQABSv4i16\000VQABSv4i3"
    "2\000VQABSv8i16\000VQABSv8i8\000VQADDsv16i8\000VQADDsv1i64\000VQADDsv2i"
    "32\000VQADDsv2i64\000VQADDsv4i16\000VQADDsv4i32\000VQADDsv8i16\000VQADD"
    "sv8i8\000VQADDuv16i8\000VQADDuv1i64\000VQADDuv2i32\000VQADDuv2i64\000VQ"
    "ADDuv4i16\000VQADDuv4i32\000VQADDuv8i16\000VQADDuv8i8\000VQDMLALslv2i32"
    "\000VQDMLALslv4i16\000VQDMLALv2i64\000VQDMLALv4i32\000VQDMLSLslv2i32\000"
    "VQDMLSLslv4i16\000VQDMLSLv2i64\000VQDMLSLv4i32\000VQDMULHslv2i32\000VQD"
    "MULHslv4i16\000VQDMULHslv4i32\000VQDMULHslv8i16\000VQDMULHv2i32\000VQDM"
    "ULHv4i16\000VQDMULHv4i32\000VQDMULHv8i16\000VQDMULLslv2i32\000VQDMULLsl"
    "v4i16\000VQDMULLv2i64\000VQDMULLv4i32\000VQMOVNsuv2i32\000VQMOVNsuv4i16"
    "\000VQMOVNsuv8i8\000VQMOVNsv2i32\000VQMOVNsv4i16\000VQMOVNsv8i8\000VQMO"
    "VNuv2i32\000VQMOVNuv4i16\000VQMOVNuv8i8\000VQNEGv16i8\000VQNEGv2i32\000"
    "VQNEGv4i16\000VQNEGv4i32\000VQNEGv8i16\000VQNEGv8i8\000VQRDMULHslv2i32\000"
    "VQRDMULHslv4i16\000VQRDMULHslv4i32\000VQRDMULHslv8i16\000VQRDMULHv2i32\000"
    "VQRDMULHv4i16\000VQRDMULHv4i32\000VQRDMULHv8i16\000VQRSHLsv16i8\000VQRS"
    "HLsv1i64\000VQRSHLsv2i32\000VQRSHLsv2i64\000VQRSHLsv4i16\000VQRSHLsv4i3"
    "2\000VQRSHLsv8i16\000VQRSHLsv8i8\000VQRSHLuv16i8\000VQRSHLuv1i64\000VQR"
    "SHLuv2i32\000VQRSHLuv2i64\000VQRSHLuv4i16\000VQRSHLuv4i32\000VQRSHLuv8i"
    "16\000VQRSHLuv8i8\000VQRSHRNsv2i32\000VQRSHRNsv4i16\000VQRSHRNsv8i8\000"
    "VQRSHRNuv2i32\000VQRSHRNuv4i16\000VQRSHRNuv8i8\000VQRSHRUNv2i32\000VQRS"
    "HRUNv4i16\000VQRSHRUNv8i8\000VQSHLsiv16i8\000VQSHLsiv1i64\000VQSHLsiv2i"
    "32\000VQSHLsiv2i64\000VQSHLsiv4i16\000VQSHLsiv4i32\000VQSHLsiv8i16\000V"
    "QSHLsiv8i8\000VQSHLsuv16i8\000VQSHLsuv1i64\000VQSHLsuv2i32\000VQSHLsuv2"
    "i64\000VQSHLsuv4i16\000VQSHLsuv4i32\000VQSHLsuv8i16\000VQSHLsuv8i8\000V"
    "QSHLsv16i8\000VQSHLsv1i64\000VQSHLsv2i32\000VQSHLsv2i64\000VQSHLsv4i16\000"
    "VQSHLsv4i32\000VQSHLsv8i16\000VQSHLsv8i8\000VQSHLuiv16i8\000VQSHLuiv1i6"
    "4\000VQSHLuiv2i32\000VQSHLuiv2i64\000VQSHLuiv4i16\000VQSHLuiv4i32\000VQ"
    "SHLuiv8i16\000VQSHLuiv8i8\000VQSHLuv16i8\000VQSHLuv1i64\000VQSHLuv2i32\000"
    "VQSHLuv2i64\000VQSHLuv4i16\000VQSHLuv4i32\000VQSHLuv8i16\000VQSHLuv8i8\000"
    "VQSHRNsv2i32\000VQSHRNsv4i16\000VQSHRNsv8i8\000VQSHRNuv2i32\000VQSHRNuv"
    "4i16\000VQSHRNuv8i8\000VQSHRUNv2i32\000VQSHRUNv4i16\000VQSHRUNv8i8\000V"
    "QSUBsv16i8\000VQSUBsv1i64\000VQSUBsv2i32\000VQSUBsv2i64\000VQSUBsv4i16\000"
    "VQSUBsv4i32\000VQSUBsv8i16\000VQSUBsv8i8\000VQSUBuv16i8\000VQSUBuv1i64\000"
    "VQSUBuv2i32\000VQSUBuv2i64\000VQSUBuv4i16\000VQSUBuv4i32\000VQSUBuv8i16"
    "\000VQSUBuv8i8\000VRADDHNv2i32\000VRADDHNv4i16\000VRADDHNv8i8\000VRECPE"
    "d\000VRECPEfd\000VRECPEfq\000VRECPEq\000VRECPSfd\000VRECPSfq\000VREV16d"
    "8\000VREV16q8\000VREV32d16\000VREV32d8\000VREV32q16\000VREV32q8\000VREV"
    "64d16\000VREV64d32\000VREV64d8\000VREV64df\000VREV64q16\000VREV64q32\000"
    "VREV64q8\000VREV64qf\000VRHADDsv16i8\000VRHADDsv2i32\000VRHADDsv4i16\000"
    "VRHADDsv4i32\000VRHADDsv8i16\000VRHADDsv8i8\000VRHADDuv16i8\000VRHADDuv"
    "2i32\000VRHADDuv4i16\000VRHADDuv4i32\000VRHADDuv8i16\000VRHADDuv8i8\000"
    "VRSHLsv16i8\000VRSHLsv1i64\000VRSHLsv2i32\000VRSHLsv2i64\000VRSHLsv4i16"
    "\000VRSHLsv4i32\000VRSHLsv8i16\000VRSHLsv8i8\000VRSHLuv16i8\000VRSHLuv1"
    "i64\000VRSHLuv2i32\000VRSHLuv2i64\000VRSHLuv4i16\000VRSHLuv4i32\000VRSH"
    "Luv8i16\000VRSHLuv8i8\000VRSHRNv2i32\000VRSHRNv4i16\000VRSHRNv8i8\000VR"
    "SHRsv16i8\000VRSHRsv1i64\000VRSHRsv2i32\000VRSHRsv2i64\000VRSHRsv4i16\000"
    "VRSHRsv4i32\000VRSHRsv8i16\000VRSHRsv8i8\000VRSHRuv16i8\000VRSHRuv1i64\000"
    "VRSHRuv2i32\000VRSHRuv2i64\000VRSHRuv4i16\000VRSHRuv4i32\000VRSHRuv8i16"
    "\000VRSHRuv8i8\000VRSQRTEd\000VRSQRTEfd\000VRSQRTEfq\000VRSQRTEq\000VRS"
    "QRTSfd\000VRSQRTSfq\000VRSRAsv16i8\000VRSRAsv1i64\000VRSRAsv2i32\000VRS"
    "RAsv2i64\000VRSRAsv4i16\000VRSRAsv4i32\000VRSRAsv8i16\000VRSRAsv8i8\000"
    "VRSRAuv16i8\000VRSRAuv1i64\000VRSRAuv2i32\000VRSRAuv2i64\000VRSRAuv4i16"
    "\000VRSRAuv4i32\000VRSRAuv8i16\000VRSRAuv8i8\000VRSUBHNv2i32\000VRSUBHN"
    "v4i16\000VRSUBHNv8i8\000VSETLNi16\000VSETLNi32\000VSETLNi8\000VSHLLi16\000"
    "VSHLLi32\000VSHLLi8\000VSHLLsv2i64\000VSHLLsv4i32\000VSHLLsv8i16\000VSH"
    "LLuv2i64\000VSHLLuv4i32\000VSHLLuv8i16\000VSHLiv16i8\000VSHLiv1i64\000V"
    "SHLiv2i32\000VSHLiv2i64\000VSHLiv4i16\000VSHLiv4i32\000VSHLiv8i16\000VS"
    "HLiv8i8\000VSHLsv16i8\000VSHLsv1i64\000VSHLsv2i32\000VSHLsv2i64\000VSHL"
    "sv4i16\000VSHLsv4i32\000VSHLsv8i16\000VSHLsv8i8\000VSHLuv16i8\000VSHLuv"
    "1i64\000VSHLuv2i32\000VSHLuv2i64\000VSHLuv4i16\000VSHLuv4i32\000VSHLuv8"
    "i16\000VSHLuv8i8\000VSHRNv2i32\000VSHRNv4i16\000VSHRNv8i8\000VSHRsv16i8"
    "\000VSHRsv1i64\000VSHRsv2i32\000VSHRsv2i64\000VSHRsv4i16\000VSHRsv4i32\000"
    "VSHRsv8i16\000VSHRsv8i8\000VSHRuv16i8\000VSHRuv1i64\000VSHRuv2i32\000VS"
    "HRuv2i64\000VSHRuv4i16\000VSHRuv4i32\000VSHRuv8i16\000VSHRuv8i8\000VSHT"
    "OD\000VSHTOS\000VSITOD\000VSITOS\000VSLIv16i8\000VSLIv1i64\000VSLIv2i32"
    "\000VSLIv2i64\000VSLIv4i16\000VSLIv4i32\000VSLIv8i16\000VSLIv8i8\000VSL"
    "TOD\000VSLTOS\000VSQRTD\000VSQRTS\000VSRAsv16i8\000VSRAsv1i64\000VSRAsv"
    "2i32\000VSRAsv2i64\000VSRAsv4i16\000VSRAsv4i32\000VSRAsv8i16\000VSRAsv8"
    "i8\000VSRAuv16i8\000VSRAuv1i64\000VSRAuv2i32\000VSRAuv2i64\000VSRAuv4i1"
    "6\000VSRAuv4i32\000VSRAuv8i16\000VSRAuv8i8\000VSRIv16i8\000VSRIv1i64\000"
    "VSRIv2i32\000VSRIv2i64\000VSRIv4i16\000VSRIv4i32\000VSRIv8i16\000VSRIv8"
    "i8\000VST1d16\000VST1d16Q\000VST1d16Q_UPD\000VST1d16T\000VST1d16T_UPD\000"
    "VST1d16_UPD\000VST1d32\000VST1d32Q\000VST1d32Q_UPD\000VST1d32T\000VST1d"
    "32T_UPD\000VST1d32_UPD\000VST1d64\000VST1d64Q\000VST1d64QPseudo\000VST1"
    "d64QPseudo_UPD\000VST1d64Q_UPD\000VST1d64T\000VST1d64TPseudo\000VST1d64"
    "TPseudo_UPD\000VST1d64T_UPD\000VST1d64_UPD\000VST1d8\000VST1d8Q\000VST1"
    "d8Q_UPD\000VST1d8T\000VST1d8T_UPD\000VST1d8_UPD\000VST1q\000VST1q16\000"
    "VST1q16Pseudo\000VST1q16Pseudo_UPD\000VST1q16_UPD\000VST1q32\000VST1q32"
    "Pseudo\000VST1q32Pseudo_UPD\000VST1q32_UPD\000VST1q64\000VST1q64Pseudo\000"
    "VST1q64Pseudo_UPD\000VST1q64_UPD\000VST1q8\000VST1q8Pseudo\000VST1q8Pse"
    "udo_UPD\000VST1q8_UPD\000VST2LNd16\000VST2LNd16_UPD\000VST2LNd32\000VST"
    "2LNd32_UPD\000VST2LNd8\000VST2LNd8_UPD\000VST2LNq16\000VST2LNq16_UPD\000"
    "VST2LNq16odd\000VST2LNq32\000VST2LNq32_UPD\000VST2LNq32odd\000VST2b16\000"
    "VST2b16_UPD\000VST2b32\000VST2b32_UPD\000VST2b8\000VST2b8_UPD\000VST2d1"
    "6\000VST2d16Pseudo\000VST2d16Pseudo_UPD\000VST2d16_UPD\000VST2d32\000VS"
    "T2d32Pseudo\000VST2d32Pseudo_UPD\000VST2d32_UPD\000VST2d8\000VST2d8Pseu"
    "do\000VST2d8Pseudo_UPD\000VST2d8_UPD\000VST2q16\000VST2q16Pseudo\000VST"
    "2q16Pseudo_UPD\000VST2q16_UPD\000VST2q32\000VST2q32Pseudo\000VST2q32Pse"
    "udo_UPD\000VST2q32_UPD\000VST2q8\000VST2q8Pseudo\000VST2q8Pseudo_UPD\000"
    "VST2q8_UPD\000VST3LNd16\000VST3LNd16_UPD\000VST3LNd32\000VST3LNd32_UPD\000"
    "VST3LNd8\000VST3LNd8_UPD\000VST3LNq16\000VST3LNq16_UPD\000VST3LNq16odd\000"
    "VST3LNq32\000VST3LNq32_UPD\000VST3LNq32odd\000VST3d16\000VST3d16Pseudo\000"
    "VST3d16Pseudo_UPD\000VST3d16_UPD\000VST3d32\000VST3d32Pseudo\000VST3d32"
    "Pseudo_UPD\000VST3d32_UPD\000VST3d8\000VST3d8Pseudo\000VST3d8Pseudo_UPD"
    "\000VST3d8_UPD\000VST3q16\000VST3q16Pseudo_UPD\000VST3q16_UPD\000VST3q1"
    "6oddPseudo_UPD\000VST3q32\000VST3q32Pseudo_UPD\000VST3q32_UPD\000VST3q3"
    "2oddPseudo_UPD\000VST3q8\000VST3q8Pseudo_UPD\000VST3q8_UPD\000VST3q8odd"
    "Pseudo_UPD\000VST4LNd16\000VST4LNd16_UPD\000VST4LNd32\000VST4LNd32_UPD\000"
    "VST4LNd8\000VST4LNd8_UPD\000VST4LNq16\000VST4LNq16_UPD\000VST4LNq16odd\000"
    "VST4LNq32\000VST4LNq32_UPD\000VST4LNq32odd\000VST4d16\000VST4d16Pseudo\000"
    "VST4d16Pseudo_UPD\000VST4d16_UPD\000VST4d32\000VST4d32Pseudo\000VST4d32"
    "Pseudo_UPD\000VST4d32_UPD\000VST4d8\000VST4d8Pseudo\000VST4d8Pseudo_UPD"
    "\000VST4d8_UPD\000VST4q16\000VST4q16Pseudo_UPD\000VST4q16_UPD\000VST4q1"
    "6oddPseudo_UPD\000VST4q32\000VST4q32Pseudo_UPD\000VST4q32_UPD\000VST4q3"
    "2oddPseudo_UPD\000VST4q8\000VST4q8Pseudo_UPD\000VST4q8_UPD\000VST4q8odd"
    "Pseudo_UPD\000VSTMD\000VSTMD_UPD\000VSTMQ\000VSTMS\000VSTMS_UPD\000VSTR"
    "D\000VSTRS\000VSUBD\000VSUBHNv2i32\000VSUBHNv4i16\000VSUBHNv8i8\000VSUB"
    "Lsv2i64\000VSUBLsv4i32\000VSUBLsv8i16\000VSUBLuv2i64\000VSUBLuv4i32\000"
    "VSUBLuv8i16\000VSUBS\000VSUBWsv2i64\000VSUBWsv4i32\000VSUBWsv8i16\000VS"
    "UBWuv2i64\000VSUBWuv4i32\000VSUBWuv8i16\000VSUBfd\000VSUBfd_sfp\000VSUB"
    "fq\000VSUBv16i8\000VSUBv1i64\000VSUBv2i32\000VSUBv2i64\000VSUBv4i16\000"
    "VSUBv4i32\000VSUBv8i16\000VSUBv8i8\000VSWPd\000VSWPq\000VTBL1\000VTBL2\000"
    "VTBL3\000VTBL4\000VTBX1\000VTBX2\000VTBX3\000VTBX4\000VTOSHD\000VTOSHS\000"
    "VTOSIRD\000VTOSIRS\000VTOSIZD\000VTOSIZS\000VTOSLD\000VTOSLS\000VTOUHD\000"
    "VTOUHS\000VTOUIRD\000VTOUIRS\000VTOUIZD\000VTOUIZS\000VTOULD\000VTOULS\000"
    "VTRNd16\000VTRNd32\000VTRNd8\000VTRNq16\000VTRNq32\000VTRNq8\000VTSTv16"
    "i8\000VTSTv2i32\000VTSTv4i16\000VTSTv4i32\000VTSTv8i16\000VTSTv8i8\000V"
    "UHTOD\000VUHTOS\000VUITOD\000VUITOS\000VULTOD\000VULTOS\000VUZPd16\000V"
    "UZPd32\000VUZPd8\000VUZPq16\000VUZPq32\000VUZPq8\000VZIPd16\000VZIPd32\000"
    "VZIPd8\000VZIPq16\000VZIPq32\000VZIPq8\000WFE\000WFI\000YIELD\000t2ADCS"
    "ri\000t2ADCSrr\000t2ADCSrs\000t2ADCri\000t2ADCrr\000t2ADCrs\000t2ADDSri"
    "\000t2ADDSrr\000t2ADDSrs\000t2ADDrSPi\000t2ADDrSPi12\000t2ADDrSPs\000t2"
    "ADDri\000t2ADDri12\000t2ADDrr\000t2ADDrs\000t2ANDSri\000t2ANDSrr\000t2A"
    "NDSrs\000t2ANDri\000t2ANDrr\000t2ANDrs\000t2ASRri\000t2ASRrr\000t2B\000"
    "t2BFC\000t2BFI\000t2BICri\000t2BICrr\000t2BICrs\000t2BR_JT\000t2BXJ\000"
    "t2Bcc\000t2CLREX\000t2CLZ\000t2CMNzri\000t2CMNzrr\000t2CMNzrs\000t2CMPr"
    "i\000t2CMPrr\000t2CMPrs\000t2CMPzri\000t2CMPzrr\000t2CMPzrs\000t2CPS\000"
    "t2DBG\000t2DMBish\000t2DMBishst\000t2DMBnsh\000t2DMBnshst\000t2DMBosh\000"
    "t2DMBoshst\000t2DMBst\000t2DMBsy\000t2DSBish\000t2DSBishst\000t2DSBnsh\000"
    "t2DSBnshst\000t2DSBosh\000t2DSBoshst\000t2DSBst\000t2DSBsy\000t2EORri\000"
    "t2EORrr\000t2EORrs\000t2ISBsy\000t2IT\000t2Int_eh_sjlj_setjmp\000t2Int_"
    "eh_sjlj_setjmp_nofp\000t2LDM\000t2LDM_RET\000t2LDM_UPD\000t2LDRBT\000t2"
    "LDRB_POST\000t2LDRB_PRE\000t2LDRBi12\000t2LDRBi8\000t2LDRBpci\000t2LDRB"
    "s\000t2LDRD_POST\000t2LDRD_PRE\000t2LDRDi8\000t2LDRDpci\000t2LDREX\000t"
    "2LDREXB\000t2LDREXD\000t2LDREXH\000t2LDRHT\000t2LDRH_POST\000t2LDRH_PRE"
    "\000t2LDRHi12\000t2LDRHi8\000t2LDRHpci\000t2LDRHs\000t2LDRSBT\000t2LDRS"
    "B_POST\000t2LDRSB_PRE\000t2LDRSBi12\000t2LDRSBi8\000t2LDRSBpci\000t2LDR"
    "SBs\000t2LDRSHT\000t2LDRSH_POST\000t2LDRSH_PRE\000t2LDRSHi12\000t2LDRSH"
    "i8\000t2LDRSHpci\000t2LDRSHs\000t2LDRT\000t2LDR_POST\000t2LDR_PRE\000t2"
    "LDRi12\000t2LDRi8\000t2LDRpci\000t2LDRpci_pic\000t2LDRs\000t2LEApcrel\000"
    "t2LEApcrelJT\000t2LSLri\000t2LSLrr\000t2LSRri\000t2LSRrr\000t2MLA\000t2"
    "MLS\000t2MOVCCasr\000t2MOVCCi\000t2MOVCClsl\000t2MOVCClsr\000t2MOVCCr\000"
    "t2MOVCCror\000t2MOVTi16\000t2MOVi\000t2MOVi16\000t2MOVi32imm\000t2MOVr\000"
    "t2MOVrx\000t2MOVsra_flag\000t2MOVsrl_flag\000t2MRS\000t2MRSsys\000t2MSR"
    "\000t2MSRsys\000t2MUL\000t2MVNi\000t2MVNr\000t2MVNs\000t2NOP\000t2ORNri"
    "\000t2ORNrr\000t2ORNrs\000t2ORRri\000t2ORRrr\000t2ORRrs\000t2PKHBT\000t"
    "2PKHTB\000t2PLDWi12\000t2PLDWi8\000t2PLDWpci\000t2PLDWr\000t2PLDWs\000t"
    "2PLDi12\000t2PLDi8\000t2PLDpci\000t2PLDr\000t2PLDs\000t2PLIi12\000t2PLI"
    "i8\000t2PLIpci\000t2PLIr\000t2PLIs\000t2QADD\000t2QADD16\000t2QADD8\000"
    "t2QASX\000t2QDADD\000t2QDSUB\000t2QSAX\000t2QSUB\000t2QSUB16\000t2QSUB8"
    "\000t2RBIT\000t2REV\000t2REV16\000t2REVSH\000t2RFEDB\000t2RFEDBW\000t2R"
    "FEIA\000t2RFEIAW\000t2RORri\000t2RORrr\000t2RSBSri\000t2RSBSrs\000t2RSB"
    "ri\000t2RSBrr\000t2RSBrs\000t2SADD16\000t2SADD8\000t2SASX\000t2SBCSri\000"
    "t2SBCSrr\000t2SBCSrs\000t2SBCri\000t2SBCrr\000t2SBCrs\000t2SBFX\000t2SD"
    "IV\000t2SEL\000t2SEV\000t2SHADD16\000t2SHADD8\000t2SHASX\000t2SHSAX\000"
    "t2SHSUB16\000t2SHSUB8\000t2SMC\000t2SMLABB\000t2SMLABT\000t2SMLAD\000t2"
    "SMLADX\000t2SMLAL\000t2SMLALBB\000t2SMLALBT\000t2SMLALD\000t2SMLALDX\000"
    "t2SMLALTB\000t2SMLALTT\000t2SMLATB\000t2SMLATT\000t2SMLAWB\000t2SMLAWT\000"
    "t2SMLSD\000t2SMLSDX\000t2SMLSLD\000t2SMLSLDX\000t2SMMLA\000t2SMMLAR\000"
    "t2SMMLS\000t2SMMLSR\000t2SMMUL\000t2SMMULR\000t2SMUAD\000t2SMUADX\000t2"
    "SMULBB\000t2SMULBT\000t2SMULL\000t2SMULTB\000t2SMULTT\000t2SMULWB\000t2"
    "SMULWT\000t2SMUSD\000t2SMUSDX\000t2SRSDB\000t2SRSDBW\000t2SRSIA\000t2SR"
    "SIAW\000t2SSAT\000t2SSAT16\000t2SSAX\000t2SSUB16\000t2SSUB8\000t2STM\000"
    "t2STM_UPD\000t2STRBT\000t2STRB_POST\000t2STRB_PRE\000t2STRBi12\000t2STR"
    "Bi8\000t2STRBs\000t2STRD_POST\000t2STRD_PRE\000t2STRDi8\000t2STREX\000t"
    "2STREXB\000t2STREXD\000t2STREXH\000t2STRHT\000t2STRH_POST\000t2STRH_PRE"
    "\000t2STRHi12\000t2STRHi8\000t2STRHs\000t2STRT\000t2STR_POST\000t2STR_P"
    "RE\000t2STRi12\000t2STRi8\000t2STRs\000t2SUBSri\000t2SUBSrr\000t2SUBSrs"
    "\000t2SUBrSPi\000t2SUBrSPi12\000t2SUBrSPs\000t2SUBri\000t2SUBri12\000t2"
    "SUBrr\000t2SUBrs\000t2SXTAB16rr\000t2SXTAB16rr_rot\000t2SXTABrr\000t2SX"
    "TABrr_rot\000t2SXTAHrr\000t2SXTAHrr_rot\000t2SXTB16r\000t2SXTB16r_rot\000"
    "t2SXTBr\000t2SXTBr_rot\000t2SXTHr\000t2SXTHr_rot\000t2TBB\000t2TBBgen\000"
    "t2TBH\000t2TBHgen\000t2TEQri\000t2TEQrr\000t2TEQrs\000t2TPsoft\000t2TST"
    "ri\000t2TSTrr\000t2TSTrs\000t2UADD16\000t2UADD8\000t2UASX\000t2UBFX\000"
    "t2UDIV\000t2UHADD16\000t2UHADD8\000t2UHASX\000t2UHSAX\000t2UHSUB16\000t"
    "2UHSUB8\000t2UMAAL\000t2UMLAL\000t2UMULL\000t2UQADD16\000t2UQADD8\000t2"
    "UQASX\000t2UQSAX\000t2UQSUB16\000t2UQSUB8\000t2USAD8\000t2USADA8\000t2U"
    "SAT\000t2USAT16\000t2USAX\000t2USUB16\000t2USUB8\000t2UXTAB16rr\000t2UX"
    "TAB16rr_rot\000t2UXTABrr\000t2UXTABrr_rot\000t2UXTAHrr\000t2UXTAHrr_rot"
    "\000t2UXTB16r\000t2UXTB16r_rot\000t2UXTBr\000t2UXTBr_rot\000t2UXTHr\000"
    "t2UXTHr_rot\000t2WFE\000t2WFI\000t2YIELD\000tADC\000tADDhirr\000tADDi3\000"
    "tADDi8\000tADDrPCi\000tADDrSP\000tADDrSPi\000tADDrr\000tADDspi\000tADDs"
    "pr\000tADJCALLSTACKDOWN\000tADJCALLSTACKUP\000tAND\000tASRri\000tASRrr\000"
    "tB\000tBIC\000tBKPT\000tBL\000tBLXi\000tBLXi_r9\000tBLXr\000tBLXr_r9\000"
    "tBLr9\000tBRIND\000tBR_JTr\000tBX\000tBX_RET\000tBX_RET_vararg\000tBXr9"
    "\000tBcc\000tBfar\000tCBNZ\000tCBZ\000tCMNz\000tCMPhir\000tCMPi8\000tCM"
    "Pr\000tCMPzhir\000tCMPzi8\000tCMPzr\000tCPS\000tEOR\000tInt_eh_sjlj_lon"
    "gjmp\000tInt_eh_sjlj_setjmp\000tLDM\000tLDM_UPD\000tLDR\000tLDRB\000tLD"
    "RBi\000tLDRH\000tLDRHi\000tLDRSB\000tLDRSH\000tLDRcp\000tLDRi\000tLDRpc"
    "i\000tLDRpci_pic\000tLDRspi\000tLEApcrel\000tLEApcrelJT\000tLSLri\000tL"
    "SLrr\000tLSRri\000tLSRrr\000tMOVCCi\000tMOVCCr\000tMOVCCr_pseudo\000tMO"
    "VSr\000tMOVgpr2gpr\000tMOVgpr2tgpr\000tMOVi8\000tMOVr\000tMOVtgpr2gpr\000"
    "tMUL\000tMVN\000tNOP\000tORR\000tPICADD\000tPOP\000tPOP_RET\000tPUSH\000"
    "tREV\000tREV16\000tREVSH\000tROR\000tRSB\000tRestore\000tSBC\000tSETEND"
    "BE\000tSETENDLE\000tSEV\000tSTM_UPD\000tSTR\000tSTRB\000tSTRBi\000tSTRH"
    "\000tSTRHi\000tSTRi\000tSTRspi\000tSUBi3\000tSUBi8\000tSUBrr\000tSUBspi"
    "\000tSVC\000tSXTB\000tSXTH\000tSpill\000tTPsoft\000tTRAP\000tTST\000tUX"
    "TB\000tUXTH\000tWFE\000tWFI\000tYIELD\000";
  return Strs+InstAsmOffset[Opcode];
}

#endif
