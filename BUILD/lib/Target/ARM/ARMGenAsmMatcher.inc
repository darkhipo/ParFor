//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Matcher Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

// Flags for subtarget features that participate in instruction matching.
enum SubtargetFeatureFlag {
  Feature_None = 0
};

static unsigned MatchRegisterName(StringRef Name) {
  switch (Name.size()) {
  default: break;
  case 2:	 // 43 strings to match.
    switch (Name[0]) {
    default: break;
    case 'd':	 // 10 strings to match.
      switch (Name[1]) {
      default: break;
      case '0':	 // 1 strings to match.
        return 2;	 // "d0"
      case '1':	 // 1 strings to match.
        return 3;	 // "d1"
      case '2':	 // 1 strings to match.
        return 4;	 // "d2"
      case '3':	 // 1 strings to match.
        return 5;	 // "d3"
      case '4':	 // 1 strings to match.
        return 6;	 // "d4"
      case '5':	 // 1 strings to match.
        return 7;	 // "d5"
      case '6':	 // 1 strings to match.
        return 8;	 // "d6"
      case '7':	 // 1 strings to match.
        return 9;	 // "d7"
      case '8':	 // 1 strings to match.
        return 10;	 // "d8"
      case '9':	 // 1 strings to match.
        return 11;	 // "d9"
      }
      break;
    case 'l':	 // 1 strings to match.
      if (Name[1] != 'r')
        break;
      return 36;	 // "lr"
    case 'p':	 // 1 strings to match.
      if (Name[1] != 'c')
        break;
      return 37;	 // "pc"
    case 'q':	 // 10 strings to match.
      switch (Name[1]) {
      default: break;
      case '0':	 // 1 strings to match.
        return 38;	 // "q0"
      case '1':	 // 1 strings to match.
        return 39;	 // "q1"
      case '2':	 // 1 strings to match.
        return 40;	 // "q2"
      case '3':	 // 1 strings to match.
        return 41;	 // "q3"
      case '4':	 // 1 strings to match.
        return 42;	 // "q4"
      case '5':	 // 1 strings to match.
        return 43;	 // "q5"
      case '6':	 // 1 strings to match.
        return 44;	 // "q6"
      case '7':	 // 1 strings to match.
        return 45;	 // "q7"
      case '8':	 // 1 strings to match.
        return 46;	 // "q8"
      case '9':	 // 1 strings to match.
        return 47;	 // "q9"
      }
      break;
    case 'r':	 // 10 strings to match.
      switch (Name[1]) {
      default: break;
      case '0':	 // 1 strings to match.
        return 66;	 // "r0"
      case '1':	 // 1 strings to match.
        return 67;	 // "r1"
      case '2':	 // 1 strings to match.
        return 68;	 // "r2"
      case '3':	 // 1 strings to match.
        return 69;	 // "r3"
      case '4':	 // 1 strings to match.
        return 70;	 // "r4"
      case '5':	 // 1 strings to match.
        return 71;	 // "r5"
      case '6':	 // 1 strings to match.
        return 72;	 // "r6"
      case '7':	 // 1 strings to match.
        return 73;	 // "r7"
      case '8':	 // 1 strings to match.
        return 74;	 // "r8"
      case '9':	 // 1 strings to match.
        return 75;	 // "r9"
      }
      break;
    case 's':	 // 11 strings to match.
      switch (Name[1]) {
      default: break;
      case '0':	 // 1 strings to match.
        return 79;	 // "s0"
      case '1':	 // 1 strings to match.
        return 80;	 // "s1"
      case '2':	 // 1 strings to match.
        return 81;	 // "s2"
      case '3':	 // 1 strings to match.
        return 82;	 // "s3"
      case '4':	 // 1 strings to match.
        return 83;	 // "s4"
      case '5':	 // 1 strings to match.
        return 84;	 // "s5"
      case '6':	 // 1 strings to match.
        return 85;	 // "s6"
      case '7':	 // 1 strings to match.
        return 86;	 // "s7"
      case '8':	 // 1 strings to match.
        return 87;	 // "s8"
      case '9':	 // 1 strings to match.
        return 88;	 // "s9"
      case 'p':	 // 1 strings to match.
        return 111;	 // "sp"
      }
      break;
    }
    break;
  case 3:	 // 61 strings to match.
    switch (Name[0]) {
    default: break;
    case 'd':	 // 22 strings to match.
      switch (Name[1]) {
      default: break;
      case '1':	 // 10 strings to match.
        switch (Name[2]) {
        default: break;
        case '0':	 // 1 strings to match.
          return 12;	 // "d10"
        case '1':	 // 1 strings to match.
          return 13;	 // "d11"
        case '2':	 // 1 strings to match.
          return 14;	 // "d12"
        case '3':	 // 1 strings to match.
          return 15;	 // "d13"
        case '4':	 // 1 strings to match.
          return 16;	 // "d14"
        case '5':	 // 1 strings to match.
          return 17;	 // "d15"
        case '6':	 // 1 strings to match.
          return 18;	 // "d16"
        case '7':	 // 1 strings to match.
          return 19;	 // "d17"
        case '8':	 // 1 strings to match.
          return 20;	 // "d18"
        case '9':	 // 1 strings to match.
          return 21;	 // "d19"
        }
        break;
      case '2':	 // 10 strings to match.
        switch (Name[2]) {
        default: break;
        case '0':	 // 1 strings to match.
          return 22;	 // "d20"
        case '1':	 // 1 strings to match.
          return 23;	 // "d21"
        case '2':	 // 1 strings to match.
          return 24;	 // "d22"
        case '3':	 // 1 strings to match.
          return 25;	 // "d23"
        case '4':	 // 1 strings to match.
          return 26;	 // "d24"
        case '5':	 // 1 strings to match.
          return 27;	 // "d25"
        case '6':	 // 1 strings to match.
          return 28;	 // "d26"
        case '7':	 // 1 strings to match.
          return 29;	 // "d27"
        case '8':	 // 1 strings to match.
          return 30;	 // "d28"
        case '9':	 // 1 strings to match.
          return 31;	 // "d29"
        }
        break;
      case '3':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case '0':	 // 1 strings to match.
          return 32;	 // "d30"
        case '1':	 // 1 strings to match.
          return 33;	 // "d31"
        }
        break;
      }
      break;
    case 'q':	 // 14 strings to match.
      switch (Name[1]) {
      default: break;
      case '1':	 // 6 strings to match.
        switch (Name[2]) {
        default: break;
        case '0':	 // 1 strings to match.
          return 48;	 // "q10"
        case '1':	 // 1 strings to match.
          return 49;	 // "q11"
        case '2':	 // 1 strings to match.
          return 50;	 // "q12"
        case '3':	 // 1 strings to match.
          return 51;	 // "q13"
        case '4':	 // 1 strings to match.
          return 52;	 // "q14"
        case '5':	 // 1 strings to match.
          return 53;	 // "q15"
        }
        break;
      case 'q':	 // 8 strings to match.
        switch (Name[2]) {
        default: break;
        case '0':	 // 1 strings to match.
          return 54;	 // "qq0"
        case '1':	 // 1 strings to match.
          return 55;	 // "qq1"
        case '2':	 // 1 strings to match.
          return 56;	 // "qq2"
        case '3':	 // 1 strings to match.
          return 57;	 // "qq3"
        case '4':	 // 1 strings to match.
          return 58;	 // "qq4"
        case '5':	 // 1 strings to match.
          return 59;	 // "qq5"
        case '6':	 // 1 strings to match.
          return 60;	 // "qq6"
        case '7':	 // 1 strings to match.
          return 61;	 // "qq7"
        }
        break;
      }
      break;
    case 'r':	 // 3 strings to match.
      if (Name[1] != '1')
        break;
      switch (Name[2]) {
      default: break;
      case '0':	 // 1 strings to match.
        return 76;	 // "r10"
      case '1':	 // 1 strings to match.
        return 77;	 // "r11"
      case '2':	 // 1 strings to match.
        return 78;	 // "r12"
      }
      break;
    case 's':	 // 22 strings to match.
      switch (Name[1]) {
      default: break;
      case '1':	 // 10 strings to match.
        switch (Name[2]) {
        default: break;
        case '0':	 // 1 strings to match.
          return 89;	 // "s10"
        case '1':	 // 1 strings to match.
          return 90;	 // "s11"
        case '2':	 // 1 strings to match.
          return 91;	 // "s12"
        case '3':	 // 1 strings to match.
          return 92;	 // "s13"
        case '4':	 // 1 strings to match.
          return 93;	 // "s14"
        case '5':	 // 1 strings to match.
          return 94;	 // "s15"
        case '6':	 // 1 strings to match.
          return 95;	 // "s16"
        case '7':	 // 1 strings to match.
          return 96;	 // "s17"
        case '8':	 // 1 strings to match.
          return 97;	 // "s18"
        case '9':	 // 1 strings to match.
          return 98;	 // "s19"
        }
        break;
      case '2':	 // 10 strings to match.
        switch (Name[2]) {
        default: break;
        case '0':	 // 1 strings to match.
          return 99;	 // "s20"
        case '1':	 // 1 strings to match.
          return 100;	 // "s21"
        case '2':	 // 1 strings to match.
          return 101;	 // "s22"
        case '3':	 // 1 strings to match.
          return 102;	 // "s23"
        case '4':	 // 1 strings to match.
          return 103;	 // "s24"
        case '5':	 // 1 strings to match.
          return 104;	 // "s25"
        case '6':	 // 1 strings to match.
          return 105;	 // "s26"
        case '7':	 // 1 strings to match.
          return 106;	 // "s27"
        case '8':	 // 1 strings to match.
          return 107;	 // "s28"
        case '9':	 // 1 strings to match.
          return 108;	 // "s29"
        }
        break;
      case '3':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case '0':	 // 1 strings to match.
          return 109;	 // "s30"
        case '1':	 // 1 strings to match.
          return 110;	 // "s31"
        }
        break;
      }
      break;
    }
    break;
  case 4:	 // 1 strings to match.
    if (Name.substr(0,4) != "cpsr")
      break;
    return 1;	 // "cpsr"
  case 5:	 // 5 strings to match.
    switch (Name[0]) {
    default: break;
    case 'f':	 // 1 strings to match.
      if (Name.substr(1,4) != "pscr")
        break;
      return 34;	 // "fpscr"
    case 'q':	 // 4 strings to match.
      if (Name.substr(1,3) != "qqq")
        break;
      switch (Name[4]) {
      default: break;
      case '0':	 // 1 strings to match.
        return 62;	 // "qqqq0"
      case '1':	 // 1 strings to match.
        return 63;	 // "qqqq1"
      case '2':	 // 1 strings to match.
        return 64;	 // "qqqq2"
      case '3':	 // 1 strings to match.
        return 65;	 // "qqqq3"
      }
      break;
    }
    break;
  case 7:	 // 1 strings to match.
    if (Name.substr(0,7) != "itstate")
      break;
    return 35;	 // "itstate"
  }
  return 0;
}

#ifndef REGISTERS_ONLY

// Unified function for converting operants to MCInst instances.

enum ConversionKind {
  Convert,
  Convert__Reg1_1,
  Convert__Imm1_1,
  Convert__CondCode2_1,
  Convert__Imm3_1,
  Convert__Reg1_1__Tie0__Reg1_2,
  Convert__Reg1_1__Tie0__Imm1_2,
  Convert__Imm1_2,
  Convert__Imm1_2__CondCode2_1,
  Convert__Reg1_2__CondCode2_1,
  Convert__Reg1_1__Imm1_2,
  Convert__Imm1_2__Imm1_1,
  Convert__Reg1_2,
  Convert__Reg1_1__Reg1_2,
  Convert__CondCode2_1__Imm1_2,
  Convert__Imm1_1__Imm1_2__Imp,
  Convert__Reg1_1__Reg1_2__Reg1_3,
  Convert__Reg1_1__Reg1_2__Imm1_3,
  Convert__Reg1_1__Reg1_2__Imm3_3,
  Convert__Reg1_1__Imm1_3,
  Convert__Reg1_2__Tie0__Reg1_3__CondCode2_1,
  Convert__Imm1_3__CondCode2_1,
  Convert__Reg1_2__Tie0__Imm1_3__CondCode2_1,
  Convert__Reg1_2__Reg1_3__CondCode2_1,
  Convert__Reg1_2__Imm1_3__CondCode2_1,
  Convert__Reg1_2__Imm3_3__CondCode2_1,
  Convert__Imm3_2__Imm1_3__Imp,
  Convert__Reg1_2__Imm2_3__CondCode2_1,
  Convert__Reg1_2__Imp__Imm2_3__CondCode2_1,
  Convert__Reg1_2__Imp__Imm1_3__CondCode2_1,
  Convert__Reg1_2__Imp__Imm3_3__CondCode2_1,
  Convert__Reg1_2__Imm1_3__Imp,
  Convert__Reg1_2__Imp__Imm1_3__Imp,
  Convert__Reg1_2__Tie0__Imm3_3__CondCode2_1,
  Convert__Reg1_3__CondCode2_1,
  Convert__Reg1_3__Imm1_1__Tie0__Reg1_4__CondCode2_2,
  Convert__Reg1_2__Reg1_3__Imm1_4__Imp,
  Convert__Reg1_3__Imm1_1__Tie0__Imm1_4__CondCode2_2,
  Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1,
  Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1,
  Convert__Reg1_2__Reg1_3__Imm3_4__CondCode2_1,
  Convert__Reg1_2__Imm1_4__CondCode2_1,
  Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_1,
  Convert__Reg1_3__Reg1_4__CondCode2_1,
  Convert__Reg1_3__Imm1_4__CondCode2_1,
  Convert__Reg1_3__Imm2_4__CondCode2_1,
  Convert__Reg1_3__Imm3_4__CondCode2_1,
  Convert__Reg1_2__Reg1_3__Tie1__Imp__Imp__CondCode2_1,
  Convert__Reg1_2__Reg1_3__Tie1__Imp__CondCode2_1,
  Convert__Reg1_3__Tie0__Reg1_4__CondCode2_1,
  Convert__Reg1_3__Tie0__Imm1_4__CondCode2_1,
  Convert__Reg1_3__Reg1_4__CondCode2_1__Imm1_2,
  Convert__Reg1_3__Imm1_4__CondCode2_1__Imm1_2,
  Convert__Reg1_3__Imm3_4__CondCode2_1__Imm1_2,
  Convert__Reg1_3__Imm1_1__Imm1_4__CondCode2_2,
  Convert__Reg1_4__Imm1_3__CondCode2_1,
  Convert__Imm1_4__Imm1_3__CondCode2_1,
  Convert__Reg1_3__Imm1_1__Reg1_4__CondCode2_2,
  Convert__Reg1_3__Imm1_4__CondCode2_2__Imm1_1,
  Convert__Reg1_2__Imm1_3,
  Convert__Reg1_3__Reg1_4__CondCode2_2__Imm1_1,
  Convert__Reg1_2__Reg1_3__Imm2_4__CondCode2_1,
  Convert__Imm1_4__CondCode2_1,
  Convert__Reg1_2__Imm1_3__Reg1_4__CondCode2_1,
  Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_1,
  Convert__Reg1_3__Reg1_4__Tie0__Tie1__CondCode2_1,
  Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__Imm1_2,
  Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__Imm1_2,
  Convert__Reg1_3__Reg1_4__Imm3_5__CondCode2_1__Imm1_2,
  Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_2__Imm1_1,
  Convert__Reg1_3__Imm1_1__Reg1_4__Reg1_5__CondCode2_2,
  Convert__Reg1_3__Imm1_1__Reg1_4__Imm1_5__CondCode2_2,
  Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1,
  Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1,
  Convert__Reg1_3__Reg1_4__Imm2_5__CondCode2_1,
  Convert__Reg1_3__Imm1_5__CondCode2_1,
  Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1,
  Convert__Reg1_2__Reg1_3__Reg1_4__Tie2__Imp__Imp__CondCode2_1,
  Convert__Reg1_2__Reg1_4__CondCode2_1,
  Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1,
  Convert__Reg1_4__Imm1_5__CondCode2_2__Imm1_1,
  Convert__Reg1_4__Reg1_5__CondCode2_2__Imm1_1,
  Convert__Reg1_4__Imm2_5__CondCode2_2__Imm1_1,
  Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_2__Imm1_1,
  Convert__Reg1_3__Reg1_4__Imm2_5__CondCode2_2__Imm1_1,
  Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_5__CondCode2_1,
  Convert__Imp__Imm1_4__CondCode2_1,
  Convert__Reg1_2__Reg1_3__Imm1_4__Imm1_5__CondCode2_1,
  Convert__Reg1_2__Imm1_3__Reg1_4__Imm1_5__CondCode2_1,
  Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_1,
  Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1,
  Convert__Reg1_4__Reg1_5__CondCode2_1,
  Convert__Reg1_4__Reg1_5__Reg1_6__CondCode2_2__Imm1_1,
  Convert__Reg1_4__Reg1_5__Imm2_6__CondCode2_2__Imm1_1,
  Convert__Reg1_4__Reg1_5__Imm1_6__CondCode2_2__Imm1_1,
  Convert__Reg1_2__Imm1_4__Imm1_6__CondCode2_1,
  Convert__Imm1_3__Imm1_5__Imm3_6__CondCode2_1,
  Convert__Reg1_2__Reg1_4__Tie1__Imm2_6__CondCode2_1,
  Convert__Reg1_2__Reg1_4__Tie1__Imm1_6__CondCode2_1,
  Convert__Reg1_2__Reg1_3__Reg1_5__CondCode2_1,
  Convert__Reg1_3,
  Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_1__Imm1_2,
  Convert__Reg1_4__Reg1_2__Tie0__Imm2_6__CondCode2_1,
  Convert__Reg1_4__Reg1_2__Tie0__Imm1_6__CondCode2_1,
  Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_1,
  Convert__Reg1_3__Reg1_4__Imm1_6__CondCode2_1,
  Convert__Reg1_4__Reg1_5__Imm1_6__CondCode2_1,
  Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1,
  Convert__Reg1_4__Imm2_6__CondCode2_1,
  Convert__Imm2_6__Reg1_4__CondCode2_1,
  Convert__Reg1_3__Imm1_5__Imm1_7__CondCode2_1,
  Convert__Reg1_2__Reg1_3__Reg1_5__Tie2__Imm2_7__CondCode2_1,
  Convert__Reg1_2__Reg1_3__Reg1_5__Imm1_7__CondCode2_1,
  Convert__Imm1_2__Imm1_3__Reg1_4__Reg1_5__Imm1_7,
  Convert__Reg1_4__Reg1_2__Tie0__Imm2_5__CondCode2_1,
  Convert__Reg1_4__Reg1_2__Tie0__Imm1_5__CondCode2_1,
  Convert__Reg1_5__Reg1_2__Reg1_3__Tie0__Imm2_7__CondCode2_1,
  Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_6__CondCode2_1,
  Convert__Reg1_4__Reg1_6__Tie1__Imp__Imm1_7__CondCode2_1,
  Convert__Reg1_4__Reg1_5__Imm2_7__CondCode2_1,
  Convert__Reg1_3__Tie0__Reg1_7__Imm1_5__CondCode2_1,
  Convert__Reg1_6__Tie0__Imp__Imm1_7__Reg1_4__CondCode2_1,
  Convert__Imm2_7__Reg1_4__Reg1_5__CondCode2_1,
  Convert__Reg1_3__Reg1_5__Reg1_7__CondCode2_1,
  Convert__Reg1_3__Tie0__Reg1_5__Reg1_7__CondCode2_1,
  Convert__Reg1_2__Reg1_3__Reg1_5__Imm1_6__CondCode2_1,
  Convert__Imm1_3__Imm1_4__Reg1_5__Reg1_6__Imm1_8__CondCode2_1,
  Convert__Reg1_5__Reg1_2__Reg1_3__Tie0__Imm2_6__CondCode2_1,
  Convert__Reg1_4__Reg1_5__Reg1_6__Imm2_8__CondCode2_1,
  Convert__Reg1_4__Reg1_5__Reg1_7__Tie2__Imp__Imm1_8__CondCode2_1,
  Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1,
  Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_7__CondCode2_1,
  Convert__Imm2_8__Reg1_4__Reg1_5__Reg1_6__CondCode2_1,
  Convert__Reg1_7__Tie0__Imp__Imm1_8__Reg1_4__Reg1_5__CondCode2_1,
  Convert__Reg1_3__Reg1_5__Reg1_6__Reg1_8__CondCode2_1,
  Convert__Reg1_3__Tie0__Reg1_5__Reg1_6__Reg1_8__CondCode2_1,
  Convert__Imm1_3__Imm1_5__Reg1_7__Imm1_9__CondCode2_1,
  Convert__Imm1_3__Imm1_5__Reg1_7__Imm2_9__CondCode2_1,
  Convert__Imm1_2__Imm1_3__Reg1_4__Imm1_6__Imm1_8__Imm1_9,
  Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie3__Imp__Imm1_9__CondCode2_1,
  Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Imm2_9__CondCode2_1,
  Convert__Reg1_8__Tie0__Imp__Imm1_9__Reg1_4__Reg1_5__Reg1_6__CondCode2_1,
  Convert__Imm2_9__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1,
  Convert__Reg1_3__Reg1_5__Reg1_6__Reg1_7__Reg1_9__CondCode2_1,
  Convert__Reg1_3__Tie0__Reg1_5__Reg1_6__Reg1_7__Reg1_9__CondCode2_1,
  Convert__Imm1_2__Imm1_3__Imm1_5__Imm1_7__Imm1_9__Imm1_10,
  Convert__Imm1_3__Imm1_4__Reg1_5__Imm1_7__Imm1_9__Imm1_10__CondCode2_1,
  Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_9__Tie4__Imp__Imm1_10__CondCode2_1,
  Convert__Reg1_9__Tie0__Imp__Imm1_10__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1,
  Convert__Reg1_3__Reg1_5__Reg1_6__Reg1_7__Reg1_8__Reg1_10__CondCode2_1,
  Convert__Reg1_3__Tie0__Reg1_5__Reg1_6__Reg1_7__Reg1_8__Reg1_10__CondCode2_1,
  Convert__Imm1_3__Imm1_4__Imm1_6__Imm1_8__Imm1_10__Imm1_11__CondCode2_1,
  NumConversionVariants
};

static void ConvertToMCInst(ConversionKind Kind, MCInst &Inst, unsigned Opcode,
                      const SmallVectorImpl<MCParsedAsmOperand*> &Operands) {
  Inst.setOpcode(Opcode);
  switch (Kind) {
  default:
  case Convert:
    return;
  case Convert__Reg1_1:
    ((ARMOperand*)Operands[1])->addRegOperands(Inst, 1);
    return;
  case Convert__Imm1_1:
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    return;
  case Convert__CondCode2_1:
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Imm3_1:
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 3);
    return;
  case Convert__Reg1_1__Tie0__Reg1_2:
    ((ARMOperand*)Operands[1])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    return;
  case Convert__Reg1_1__Tie0__Imm1_2:
    ((ARMOperand*)Operands[1])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    return;
  case Convert__Imm1_2:
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    return;
  case Convert__Imm1_2__CondCode2_1:
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_1__Imm1_2:
    ((ARMOperand*)Operands[1])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    return;
  case Convert__Imm1_2__Imm1_1:
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_2:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    return;
  case Convert__Reg1_1__Reg1_2:
    ((ARMOperand*)Operands[1])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    return;
  case Convert__CondCode2_1__Imm1_2:
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    return;
  case Convert__Imm1_1__Imm1_2__Imp:
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    Inst.addOperand(MCOperand::CreateReg(0));
    return;
  case Convert__Reg1_1__Reg1_2__Reg1_3:
    ((ARMOperand*)Operands[1])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    return;
  case Convert__Reg1_1__Reg1_2__Imm1_3:
    ((ARMOperand*)Operands[1])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_1__Reg1_2__Imm3_3:
    ((ARMOperand*)Operands[1])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 3);
    return;
  case Convert__Reg1_1__Imm1_3:
    ((ARMOperand*)Operands[1])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_2__Tie0__Reg1_3__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Imm1_3__CondCode2_1:
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Tie0__Imm1_3__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Reg1_3__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Imm1_3__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Imm3_3__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 3);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Imm3_2__Imm1_3__Imp:
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 3);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    Inst.addOperand(MCOperand::CreateReg(0));
    return;
  case Convert__Reg1_2__Imm2_3__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Imp__Imm2_3__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(MCOperand::CreateReg(0));
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Imp__Imm1_3__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(MCOperand::CreateReg(0));
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Imp__Imm3_3__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(MCOperand::CreateReg(0));
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 3);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Imm1_3__Imp:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    Inst.addOperand(MCOperand::CreateReg(0));
    return;
  case Convert__Reg1_2__Imp__Imm1_3__Imp:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(MCOperand::CreateReg(0));
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    Inst.addOperand(MCOperand::CreateReg(0));
    return;
  case Convert__Reg1_2__Tie0__Imm3_3__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 3);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Imm1_1__Tie0__Reg1_4__CondCode2_2:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Reg1_3__Imm1_4__Imp:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    Inst.addOperand(MCOperand::CreateReg(0));
    return;
  case Convert__Reg1_3__Imm1_1__Tie0__Imm1_4__CondCode2_2:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Reg1_3__Imm3_4__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 3);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Imm1_4__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Reg1_4__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Imm1_4__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Imm2_4__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Imm3_4__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 3);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Reg1_3__Tie1__Imp__Imp__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(1));
    Inst.addOperand(MCOperand::CreateReg(0));
    Inst.addOperand(MCOperand::CreateReg(0));
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Reg1_3__Tie1__Imp__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(1));
    Inst.addOperand(MCOperand::CreateReg(0));
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Tie0__Reg1_4__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Tie0__Imm1_4__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Reg1_4__CondCode2_1__Imm1_2:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_3__Imm1_4__CondCode2_1__Imm1_2:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_3__Imm3_4__CondCode2_1__Imm1_2:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 3);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_3__Imm1_1__Imm1_4__CondCode2_2:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_4__Imm1_3__CondCode2_1:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Imm1_4__Imm1_3__CondCode2_1:
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Imm1_1__Reg1_4__CondCode2_2:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Imm1_4__CondCode2_2__Imm1_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_2__Imm1_3:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_3__Reg1_4__CondCode2_2__Imm1_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_2__Reg1_3__Imm2_4__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Imm1_4__CondCode2_1:
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Imm1_3__Reg1_4__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Reg1_4__Tie0__Tie1__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    Inst.addOperand(Inst.getOperand(1));
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__Imm1_2:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__Imm1_2:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_3__Reg1_4__Imm3_5__CondCode2_1__Imm1_2:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 3);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_2__Imm1_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_3__Imm1_1__Reg1_4__Reg1_5__CondCode2_2:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Imm1_1__Reg1_4__Imm1_5__CondCode2_2:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Reg1_4__Imm2_5__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Imm1_5__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Reg1_3__Reg1_4__Tie2__Imp__Imp__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(2));
    Inst.addOperand(MCOperand::CreateReg(0));
    Inst.addOperand(MCOperand::CreateReg(0));
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Reg1_4__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_4__Imm1_5__CondCode2_2__Imm1_1:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_4__Reg1_5__CondCode2_2__Imm1_1:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_4__Imm2_5__CondCode2_2__Imm1_1:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 2);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_2__Imm1_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_3__Reg1_4__Imm2_5__CondCode2_2__Imm1_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 2);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_5__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Imp__Imm1_4__CondCode2_1:
    Inst.addOperand(MCOperand::CreateReg(0));
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Reg1_3__Imm1_4__Imm1_5__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Imm1_3__Reg1_4__Imm1_5__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_4__Reg1_5__CondCode2_1:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_4__Reg1_5__Reg1_6__CondCode2_2__Imm1_1:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_4__Reg1_5__Imm2_6__CondCode2_2__Imm1_1:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 2);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_4__Reg1_5__Imm1_6__CondCode2_2__Imm1_1:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_2__Imm1_4__Imm1_6__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Imm1_3__Imm1_5__Imm3_6__CondCode2_1:
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 3);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Reg1_4__Tie1__Imm2_6__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(1));
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Reg1_4__Tie1__Imm1_6__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(1));
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Reg1_3__Reg1_5__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    return;
  case Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_1__Imm1_2:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_4__Reg1_2__Tie0__Imm2_6__CondCode2_1:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_4__Reg1_2__Tie0__Imm1_6__CondCode2_1:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Reg1_4__Imm1_6__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_4__Reg1_5__Imm1_6__CondCode2_1:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_4__Imm2_6__CondCode2_1:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Imm2_6__Reg1_4__CondCode2_1:
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 2);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Imm1_5__Imm1_7__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Reg1_3__Reg1_5__Tie2__Imm2_7__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(2));
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Reg1_3__Reg1_5__Imm1_7__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Imm1_2__Imm1_3__Reg1_4__Reg1_5__Imm1_7:
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_4__Reg1_2__Tie0__Imm2_5__CondCode2_1:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_4__Reg1_2__Tie0__Imm1_5__CondCode2_1:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_5__Reg1_2__Reg1_3__Tie0__Imm2_7__CondCode2_1:
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_6__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_4__Reg1_6__Tie1__Imp__Imm1_7__CondCode2_1:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(1));
    Inst.addOperand(MCOperand::CreateReg(0));
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_4__Reg1_5__Imm2_7__CondCode2_1:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Tie0__Reg1_7__Imm1_5__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_6__Tie0__Imp__Imm1_7__Reg1_4__CondCode2_1:
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    Inst.addOperand(MCOperand::CreateReg(0));
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Imm2_7__Reg1_4__Reg1_5__CondCode2_1:
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 2);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Reg1_5__Reg1_7__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Tie0__Reg1_5__Reg1_7__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_2__Reg1_3__Reg1_5__Imm1_6__CondCode2_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Imm1_3__Imm1_4__Reg1_5__Reg1_6__Imm1_8__CondCode2_1:
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[8])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_5__Reg1_2__Reg1_3__Tie0__Imm2_6__CondCode2_1:
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_4__Reg1_5__Reg1_6__Imm2_8__CondCode2_1:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[8])->addImmOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_4__Reg1_5__Reg1_7__Tie2__Imp__Imm1_8__CondCode2_1:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(2));
    Inst.addOperand(MCOperand::CreateReg(0));
    ((ARMOperand*)Operands[8])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_7__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Imm2_8__Reg1_4__Reg1_5__Reg1_6__CondCode2_1:
    ((ARMOperand*)Operands[8])->addImmOperands(Inst, 2);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_7__Tie0__Imp__Imm1_8__Reg1_4__Reg1_5__CondCode2_1:
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    Inst.addOperand(MCOperand::CreateReg(0));
    ((ARMOperand*)Operands[8])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Reg1_5__Reg1_6__Reg1_8__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[8])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Tie0__Reg1_5__Reg1_6__Reg1_8__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[8])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Imm1_3__Imm1_5__Reg1_7__Imm1_9__CondCode2_1:
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[9])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Imm1_3__Imm1_5__Reg1_7__Imm2_9__CondCode2_1:
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[9])->addImmOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Imm1_2__Imm1_3__Reg1_4__Imm1_6__Imm1_8__Imm1_9:
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[8])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[9])->addImmOperands(Inst, 1);
    return;
  case Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie3__Imp__Imm1_9__CondCode2_1:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[8])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(3));
    Inst.addOperand(MCOperand::CreateReg(0));
    ((ARMOperand*)Operands[9])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Imm2_9__CondCode2_1:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[9])->addImmOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_8__Tie0__Imp__Imm1_9__Reg1_4__Reg1_5__Reg1_6__CondCode2_1:
    ((ARMOperand*)Operands[8])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    Inst.addOperand(MCOperand::CreateReg(0));
    ((ARMOperand*)Operands[9])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Imm2_9__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1:
    ((ARMOperand*)Operands[9])->addImmOperands(Inst, 2);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Reg1_5__Reg1_6__Reg1_7__Reg1_9__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[9])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Tie0__Reg1_5__Reg1_6__Reg1_7__Reg1_9__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[9])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Imm1_2__Imm1_3__Imm1_5__Imm1_7__Imm1_9__Imm1_10:
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[9])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[10])->addImmOperands(Inst, 1);
    return;
  case Convert__Imm1_3__Imm1_4__Reg1_5__Imm1_7__Imm1_9__Imm1_10__CondCode2_1:
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[9])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[10])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_9__Tie4__Imp__Imm1_10__CondCode2_1:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[9])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(4));
    Inst.addOperand(MCOperand::CreateReg(0));
    ((ARMOperand*)Operands[10])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_9__Tie0__Imp__Imm1_10__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1:
    ((ARMOperand*)Operands[9])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    Inst.addOperand(MCOperand::CreateReg(0));
    ((ARMOperand*)Operands[10])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Reg1_5__Reg1_6__Reg1_7__Reg1_8__Reg1_10__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[8])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[10])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Reg1_3__Tie0__Reg1_5__Reg1_6__Reg1_7__Reg1_8__Reg1_10__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[8])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[10])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  case Convert__Imm1_3__Imm1_4__Imm1_6__Imm1_8__Imm1_10__Imm1_11__CondCode2_1:
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[8])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[10])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[11])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return;
  }
}

namespace {

/// MatchClassKind - The kinds of classes which participate in
/// instruction matching.
enum MatchClassKind {
  InvalidMatchClass = 0,
  MCK__33_, // '!'
  MCK__35_, // '#'
  MCK__35_0, // '#0'
  MCK__35_1, // '#1'
  MCK__46_16, // '.16'
  MCK__46_32, // '.32'
  MCK__46_64, // '.64'
  MCK__46_8, // '.8'
  MCK__46_f16, // '.f16'
  MCK__46_f32, // '.f32'
  MCK__46_f64, // '.f64'
  MCK__46_i16, // '.i16'
  MCK__46_i32, // '.i32'
  MCK__46_i64, // '.i64'
  MCK__46_i8, // '.i8'
  MCK__46_n, // '.n'
  MCK__46_p8, // '.p8'
  MCK__46_s16, // '.s16'
  MCK__46_s32, // '.s32'
  MCK__46_s64, // '.s64'
  MCK__46_s8, // '.s8'
  MCK__46_u16, // '.u16'
  MCK__46_u32, // '.u32'
  MCK__46_u64, // '.u64'
  MCK__46_u8, // '.u8'
  MCK__46_w, // '.w'
  MCK_0, // '0'
  MCK_4, // '4'
  MCK_5, // '5'
  MCK__64_, // '@'
  MCK__64_TC_95_RETURN, // '@TC_RETURN'
  MCK_TAILCALL, // 'TAILCALL'
  MCK__91_, // '['
  MCK__93_, // ']'
  MCK__95_, // '_'
  MCK__95__95_aeabi_95_read_95_tp, // '__aeabi_read_tp'
  MCK_adc, // 'adc'
  MCK_adcs, // 'adcs'
  MCK_add, // 'add'
  MCK_adds, // 'adds'
  MCK_addw, // 'addw'
  MCK_adr, // 'adr'
  MCK_and, // 'and'
  MCK_ands, // 'ands'
  MCK_apsr_95_nzcv, // 'apsr_nzcv'
  MCK_asr, // 'asr'
  MCK_asrs, // 'asrs'
  MCK_b, // 'b'
  MCK_be, // 'be'
  MCK_bfc, // 'bfc'
  MCK_bfi, // 'bfi'
  MCK_bic, // 'bic'
  MCK_bkpt, // 'bkpt'
  MCK_bl, // 'bl'
  MCK_blx, // 'blx'
  MCK_bx, // 'bx'
  MCK_bxj, // 'bxj'
  MCK_c10, // 'c10'
  MCK_c7, // 'c7'
  MCK_cbnz, // 'cbnz'
  MCK_cbz, // 'cbz'
  MCK_cdp, // 'cdp'
  MCK_cdp2, // 'cdp2'
  MCK_clrex, // 'clrex'
  MCK_clz, // 'clz'
  MCK_cmn, // 'cmn'
  MCK_cmp, // 'cmp'
  MCK_cps, // 'cps'
  MCK_cpsr, // 'cpsr'
  MCK_cr, // 'cr'
  MCK_dbg, // 'dbg'
  MCK_dmb, // 'dmb'
  MCK_dsb, // 'dsb'
  MCK_eor, // 'eor'
  MCK_fpscr, // 'fpscr'
  MCK_isb, // 'isb'
  MCK_ish, // 'ish'
  MCK_ishst, // 'ishst'
  MCK_it, // 'it'
  MCK_ldc, // 'ldc'
  MCK_ldc2, // 'ldc2'
  MCK_ldc2l, // 'ldc2l'
  MCK_ldcl, // 'ldcl'
  MCK_ldr, // 'ldr'
  MCK_ldrb, // 'ldrb'
  MCK_ldrbt, // 'ldrbt'
  MCK_ldrd, // 'ldrd'
  MCK_ldrex, // 'ldrex'
  MCK_ldrexb, // 'ldrexb'
  MCK_ldrexd, // 'ldrexd'
  MCK_ldrexh, // 'ldrexh'
  MCK_ldrh, // 'ldrh'
  MCK_ldrht, // 'ldrht'
  MCK_ldrsb, // 'ldrsb'
  MCK_ldrsbt, // 'ldrsbt'
  MCK_ldrsh, // 'ldrsh'
  MCK_ldrsht, // 'ldrsht'
  MCK_ldrt, // 'ldrt'
  MCK_le, // 'le'
  MCK_lr, // 'lr'
  MCK_lsl, // 'lsl'
  MCK_lsr, // 'lsr'
  MCK_lsrs, // 'lsrs'
  MCK_mcr, // 'mcr'
  MCK_mcr2, // 'mcr2'
  MCK_mcrr, // 'mcrr'
  MCK_mcrr2, // 'mcrr2'
  MCK_mla, // 'mla'
  MCK_mls, // 'mls'
  MCK_mov, // 'mov'
  MCK_movs, // 'movs'
  MCK_movt, // 'movt'
  MCK_movw, // 'movw'
  MCK_mrc, // 'mrc'
  MCK_mrc2, // 'mrc2'
  MCK_mrrc, // 'mrrc'
  MCK_mrrc2, // 'mrrc2'
  MCK_mrs, // 'mrs'
  MCK_msr, // 'msr'
  MCK_mul, // 'mul'
  MCK_mvn, // 'mvn'
  MCK_nop, // 'nop'
  MCK_nsh, // 'nsh'
  MCK_nshst, // 'nshst'
  MCK_orn, // 'orn'
  MCK_orr, // 'orr'
  MCK_osh, // 'osh'
  MCK_oshst, // 'oshst'
  MCK_p, // 'p'
  MCK_p15, // 'p15'
  MCK_pc, // 'pc'
  MCK_pkhbt, // 'pkhbt'
  MCK_pkhtb, // 'pkhtb'
  MCK_pld, // 'pld'
  MCK_pldw, // 'pldw'
  MCK_pli, // 'pli'
  MCK_pop, // 'pop'
  MCK_push, // 'push'
  MCK_qadd, // 'qadd'
  MCK_qadd16, // 'qadd16'
  MCK_qadd8, // 'qadd8'
  MCK_qasx, // 'qasx'
  MCK_qdadd, // 'qdadd'
  MCK_qdsub, // 'qdsub'
  MCK_qsax, // 'qsax'
  MCK_qsub, // 'qsub'
  MCK_qsub16, // 'qsub16'
  MCK_qsub8, // 'qsub8'
  MCK_rbit, // 'rbit'
  MCK_rev, // 'rev'
  MCK_rev16, // 'rev16'
  MCK_revsh, // 'revsh'
  MCK_rfeab, // 'rfeab'
  MCK_rfedb, // 'rfedb'
  MCK_rfeia, // 'rfeia'
  MCK_ror, // 'ror'
  MCK_rrx, // 'rrx'
  MCK_rsb, // 'rsb'
  MCK_rsbs, // 'rsbs'
  MCK_rsc, // 'rsc'
  MCK_rscs, // 'rscs'
  MCK_sadd16, // 'sadd16'
  MCK_sadd8, // 'sadd8'
  MCK_sasx, // 'sasx'
  MCK_sbc, // 'sbc'
  MCK_sbcs, // 'sbcs'
  MCK_sbfx, // 'sbfx'
  MCK_sdiv, // 'sdiv'
  MCK_sel, // 'sel'
  MCK_setend, // 'setend'
  MCK_sev, // 'sev'
  MCK_shadd16, // 'shadd16'
  MCK_shadd8, // 'shadd8'
  MCK_shasx, // 'shasx'
  MCK_shsax, // 'shsax'
  MCK_shsub16, // 'shsub16'
  MCK_shsub8, // 'shsub8'
  MCK_smc, // 'smc'
  MCK_smlabb, // 'smlabb'
  MCK_smlabt, // 'smlabt'
  MCK_smlad, // 'smlad'
  MCK_smladx, // 'smladx'
  MCK_smlal, // 'smlal'
  MCK_smlalbb, // 'smlalbb'
  MCK_smlalbt, // 'smlalbt'
  MCK_smlald, // 'smlald'
  MCK_smlaldx, // 'smlaldx'
  MCK_smlaltb, // 'smlaltb'
  MCK_smlaltt, // 'smlaltt'
  MCK_smlatb, // 'smlatb'
  MCK_smlatt, // 'smlatt'
  MCK_smlawb, // 'smlawb'
  MCK_smlawt, // 'smlawt'
  MCK_smlsd, // 'smlsd'
  MCK_smlsdx, // 'smlsdx'
  MCK_smlsld, // 'smlsld'
  MCK_smlsldx, // 'smlsldx'
  MCK_smmla, // 'smmla'
  MCK_smmlar, // 'smmlar'
  MCK_smmls, // 'smmls'
  MCK_smmlsr, // 'smmlsr'
  MCK_smmul, // 'smmul'
  MCK_smmulr, // 'smmulr'
  MCK_smuad, // 'smuad'
  MCK_smuadx, // 'smuadx'
  MCK_smulbb, // 'smulbb'
  MCK_smulbt, // 'smulbt'
  MCK_smull, // 'smull'
  MCK_smultb, // 'smultb'
  MCK_smultt, // 'smultt'
  MCK_smulwb, // 'smulwb'
  MCK_smulwt, // 'smulwt'
  MCK_smusd, // 'smusd'
  MCK_smusdx, // 'smusdx'
  MCK_sp, // 'sp'
  MCK_spsr, // 'spsr'
  MCK_srsdb, // 'srsdb'
  MCK_srsia, // 'srsia'
  MCK_ssat, // 'ssat'
  MCK_ssat16, // 'ssat16'
  MCK_ssax, // 'ssax'
  MCK_ssub16, // 'ssub16'
  MCK_ssub8, // 'ssub8'
  MCK_st, // 'st'
  MCK_stc, // 'stc'
  MCK_stc2, // 'stc2'
  MCK_stc2l, // 'stc2l'
  MCK_stcl, // 'stcl'
  MCK_str, // 'str'
  MCK_strb, // 'strb'
  MCK_strbt, // 'strbt'
  MCK_strd, // 'strd'
  MCK_strex, // 'strex'
  MCK_strexb, // 'strexb'
  MCK_strexd, // 'strexd'
  MCK_strexh, // 'strexh'
  MCK_strh, // 'strh'
  MCK_strht, // 'strht'
  MCK_strt, // 'strt'
  MCK_sub, // 'sub'
  MCK_subs, // 'subs'
  MCK_subw, // 'subw'
  MCK_svc, // 'svc'
  MCK_swp, // 'swp'
  MCK_swpb, // 'swpb'
  MCK_sxtab, // 'sxtab'
  MCK_sxtab16, // 'sxtab16'
  MCK_sxtah, // 'sxtah'
  MCK_sxtb, // 'sxtb'
  MCK_sxtb16, // 'sxtb16'
  MCK_sxth, // 'sxth'
  MCK_tbb, // 'tbb'
  MCK_tbh, // 'tbh'
  MCK_teq, // 'teq'
  MCK_tst, // 'tst'
  MCK_uadd16, // 'uadd16'
  MCK_uadd8, // 'uadd8'
  MCK_uasx, // 'uasx'
  MCK_ubfx, // 'ubfx'
  MCK_udiv, // 'udiv'
  MCK_uhadd16, // 'uhadd16'
  MCK_uhadd8, // 'uhadd8'
  MCK_uhasx, // 'uhasx'
  MCK_uhsax, // 'uhsax'
  MCK_uhsub16, // 'uhsub16'
  MCK_uhsub8, // 'uhsub8'
  MCK_umaal, // 'umaal'
  MCK_umlal, // 'umlal'
  MCK_umull, // 'umull'
  MCK_uqadd16, // 'uqadd16'
  MCK_uqadd8, // 'uqadd8'
  MCK_uqasx, // 'uqasx'
  MCK_uqsax, // 'uqsax'
  MCK_uqsub16, // 'uqsub16'
  MCK_uqsub8, // 'uqsub8'
  MCK_usad8, // 'usad8'
  MCK_usada8, // 'usada8'
  MCK_usat, // 'usat'
  MCK_usat16, // 'usat16'
  MCK_usax, // 'usax'
  MCK_usub16, // 'usub16'
  MCK_usub8, // 'usub8'
  MCK_uxtab, // 'uxtab'
  MCK_uxtab16, // 'uxtab16'
  MCK_uxtah, // 'uxtah'
  MCK_uxtb, // 'uxtb'
  MCK_uxtb16, // 'uxtb16'
  MCK_uxth, // 'uxth'
  MCK_vaba, // 'vaba'
  MCK_vabal, // 'vabal'
  MCK_vabd, // 'vabd'
  MCK_vabdl, // 'vabdl'
  MCK_vabs, // 'vabs'
  MCK_vacge, // 'vacge'
  MCK_vacgt, // 'vacgt'
  MCK_vadd, // 'vadd'
  MCK_vaddhn, // 'vaddhn'
  MCK_vaddl, // 'vaddl'
  MCK_vaddw, // 'vaddw'
  MCK_vand, // 'vand'
  MCK_vbic, // 'vbic'
  MCK_vbif, // 'vbif'
  MCK_vbit, // 'vbit'
  MCK_vbsl, // 'vbsl'
  MCK_vceq, // 'vceq'
  MCK_vcge, // 'vcge'
  MCK_vcgt, // 'vcgt'
  MCK_vcle, // 'vcle'
  MCK_vcls, // 'vcls'
  MCK_vclt, // 'vclt'
  MCK_vclz, // 'vclz'
  MCK_vcmp, // 'vcmp'
  MCK_vcmpe, // 'vcmpe'
  MCK_vcnt, // 'vcnt'
  MCK_vcvt, // 'vcvt'
  MCK_vcvtb, // 'vcvtb'
  MCK_vcvtr, // 'vcvtr'
  MCK_vcvtt, // 'vcvtt'
  MCK_vdiv, // 'vdiv'
  MCK_vdup, // 'vdup'
  MCK_veor, // 'veor'
  MCK_vext, // 'vext'
  MCK_vhadd, // 'vhadd'
  MCK_vhsub, // 'vhsub'
  MCK_vld1, // 'vld1'
  MCK_vld2, // 'vld2'
  MCK_vld3, // 'vld3'
  MCK_vld4, // 'vld4'
  MCK_vldr, // 'vldr'
  MCK_vmax, // 'vmax'
  MCK_vmin, // 'vmin'
  MCK_vmla, // 'vmla'
  MCK_vmlal, // 'vmlal'
  MCK_vmls, // 'vmls'
  MCK_vmlsl, // 'vmlsl'
  MCK_vmov, // 'vmov'
  MCK_vmovl, // 'vmovl'
  MCK_vmovn, // 'vmovn'
  MCK_vmrs, // 'vmrs'
  MCK_vmsr, // 'vmsr'
  MCK_vmul, // 'vmul'
  MCK_vmull, // 'vmull'
  MCK_vmvn, // 'vmvn'
  MCK_vneg, // 'vneg'
  MCK_vnmla, // 'vnmla'
  MCK_vnmls, // 'vnmls'
  MCK_vnmul, // 'vnmul'
  MCK_vorn, // 'vorn'
  MCK_vorr, // 'vorr'
  MCK_vpadal, // 'vpadal'
  MCK_vpadd, // 'vpadd'
  MCK_vpaddl, // 'vpaddl'
  MCK_vpmax, // 'vpmax'
  MCK_vpmin, // 'vpmin'
  MCK_vqabs, // 'vqabs'
  MCK_vqadd, // 'vqadd'
  MCK_vqdmlal, // 'vqdmlal'
  MCK_vqdmlsl, // 'vqdmlsl'
  MCK_vqdmulh, // 'vqdmulh'
  MCK_vqdmull, // 'vqdmull'
  MCK_vqmovn, // 'vqmovn'
  MCK_vqmovun, // 'vqmovun'
  MCK_vqneg, // 'vqneg'
  MCK_vqrdmulh, // 'vqrdmulh'
  MCK_vqrshl, // 'vqrshl'
  MCK_vqrshrn, // 'vqrshrn'
  MCK_vqrshrun, // 'vqrshrun'
  MCK_vqshl, // 'vqshl'
  MCK_vqshlu, // 'vqshlu'
  MCK_vqshrn, // 'vqshrn'
  MCK_vqshrun, // 'vqshrun'
  MCK_vqsub, // 'vqsub'
  MCK_vraddhn, // 'vraddhn'
  MCK_vrecpe, // 'vrecpe'
  MCK_vrecps, // 'vrecps'
  MCK_vrev16, // 'vrev16'
  MCK_vrev32, // 'vrev32'
  MCK_vrev64, // 'vrev64'
  MCK_vrhadd, // 'vrhadd'
  MCK_vrshl, // 'vrshl'
  MCK_vrshr, // 'vrshr'
  MCK_vrshrn, // 'vrshrn'
  MCK_vrsqrte, // 'vrsqrte'
  MCK_vrsqrts, // 'vrsqrts'
  MCK_vrsra, // 'vrsra'
  MCK_vrsubhn, // 'vrsubhn'
  MCK_vshl, // 'vshl'
  MCK_vshll, // 'vshll'
  MCK_vshr, // 'vshr'
  MCK_vshrn, // 'vshrn'
  MCK_vsli, // 'vsli'
  MCK_vsqrt, // 'vsqrt'
  MCK_vsra, // 'vsra'
  MCK_vsri, // 'vsri'
  MCK_vst1, // 'vst1'
  MCK_vst2, // 'vst2'
  MCK_vst3, // 'vst3'
  MCK_vst4, // 'vst4'
  MCK_vstr, // 'vstr'
  MCK_vsub, // 'vsub'
  MCK_vsubhn, // 'vsubhn'
  MCK_vsubl, // 'vsubl'
  MCK_vsubw, // 'vsubw'
  MCK_vswp, // 'vswp'
  MCK_vtbl, // 'vtbl'
  MCK_vtbx, // 'vtbx'
  MCK_vtrn, // 'vtrn'
  MCK_vtst, // 'vtst'
  MCK_vuzp, // 'vuzp'
  MCK_vzip, // 'vzip'
  MCK_wfe, // 'wfe'
  MCK_wfi, // 'wfi'
  MCK_yield, // 'yield'
  MCK__123_, // '{'
  MCK__125_, // '}'
  MCK_Reg0, // derived register class
  MCK_tGPR, // register class 'tGPR'
  MCK_tcGPR, // register class 'tcGPR'
  MCK_rGPR, // register class 'rGPR'
  MCK_GPR, // register class 'GPR'
  MCK_SPR_8, // register class 'SPR_8'
  MCK_SPR, // register class 'SPR'
  MCK_DPR_8, // register class 'DPR_8'
  MCK_DPR_VFP2, // register class 'DPR_VFP2'
  MCK_DPR, // register class 'DPR'
  MCK_QPR_8, // register class 'QPR_8'
  MCK_QPR_VFP2, // register class 'QPR_VFP2'
  MCK_QPR, // register class 'QPR'
  MCK_QQPR_VFP2, // register class 'QQPR_VFP2'
  MCK_QQPR, // register class 'QQPR'
  MCK_QQQQPR, // register class 'QQQQPR'
  MCK_CCR, // register class 'CCR'
  MCK_CondCode, // user defined class 'CondCodeOperand'
  MCK_Imm, // user defined class 'ImmAsmOperand'
  NumMatchClassKinds
};

}

static MatchClassKind MatchTokenString(StringRef Name) {
  switch (Name.size()) {
  default: break;
  case 1:	 // 13 strings to match.
    switch (Name[0]) {
    default: break;
    case '!':	 // 1 strings to match.
      return MCK__33_;	 // "!"
    case '#':	 // 1 strings to match.
      return MCK__35_;	 // "#"
    case '0':	 // 1 strings to match.
      return MCK_0;	 // "0"
    case '4':	 // 1 strings to match.
      return MCK_4;	 // "4"
    case '5':	 // 1 strings to match.
      return MCK_5;	 // "5"
    case '@':	 // 1 strings to match.
      return MCK__64_;	 // "@"
    case '[':	 // 1 strings to match.
      return MCK__91_;	 // "["
    case ']':	 // 1 strings to match.
      return MCK__93_;	 // "]"
    case '_':	 // 1 strings to match.
      return MCK__95_;	 // "_"
    case 'b':	 // 1 strings to match.
      return MCK_b;	 // "b"
    case 'p':	 // 1 strings to match.
      return MCK_p;	 // "p"
    case '{':	 // 1 strings to match.
      return MCK__123_;	 // "{"
    case '}':	 // 1 strings to match.
      return MCK__125_;	 // "}"
    }
    break;
  case 2:	 // 16 strings to match.
    switch (Name[0]) {
    default: break;
    case '#':	 // 2 strings to match.
      switch (Name[1]) {
      default: break;
      case '0':	 // 1 strings to match.
        return MCK__35_0;	 // "#0"
      case '1':	 // 1 strings to match.
        return MCK__35_1;	 // "#1"
      }
      break;
    case '.':	 // 3 strings to match.
      switch (Name[1]) {
      default: break;
      case '8':	 // 1 strings to match.
        return MCK__46_8;	 // ".8"
      case 'n':	 // 1 strings to match.
        return MCK__46_n;	 // ".n"
      case 'w':	 // 1 strings to match.
        return MCK__46_w;	 // ".w"
      }
      break;
    case 'b':	 // 3 strings to match.
      switch (Name[1]) {
      default: break;
      case 'e':	 // 1 strings to match.
        return MCK_be;	 // "be"
      case 'l':	 // 1 strings to match.
        return MCK_bl;	 // "bl"
      case 'x':	 // 1 strings to match.
        return MCK_bx;	 // "bx"
      }
      break;
    case 'c':	 // 2 strings to match.
      switch (Name[1]) {
      default: break;
      case '7':	 // 1 strings to match.
        return MCK_c7;	 // "c7"
      case 'r':	 // 1 strings to match.
        return MCK_cr;	 // "cr"
      }
      break;
    case 'i':	 // 1 strings to match.
      if (Name[1] != 't')
        break;
      return MCK_it;	 // "it"
    case 'l':	 // 2 strings to match.
      switch (Name[1]) {
      default: break;
      case 'e':	 // 1 strings to match.
        return MCK_le;	 // "le"
      case 'r':	 // 1 strings to match.
        return MCK_lr;	 // "lr"
      }
      break;
    case 'p':	 // 1 strings to match.
      if (Name[1] != 'c')
        break;
      return MCK_pc;	 // "pc"
    case 's':	 // 2 strings to match.
      switch (Name[1]) {
      default: break;
      case 'p':	 // 1 strings to match.
        return MCK_sp;	 // "sp"
      case 't':	 // 1 strings to match.
        return MCK_st;	 // "st"
      }
      break;
    }
    break;
  case 3:	 // 72 strings to match.
    switch (Name[0]) {
    default: break;
    case '.':	 // 7 strings to match.
      switch (Name[1]) {
      default: break;
      case '1':	 // 1 strings to match.
        if (Name[2] != '6')
          break;
        return MCK__46_16;	 // ".16"
      case '3':	 // 1 strings to match.
        if (Name[2] != '2')
          break;
        return MCK__46_32;	 // ".32"
      case '6':	 // 1 strings to match.
        if (Name[2] != '4')
          break;
        return MCK__46_64;	 // ".64"
      case 'i':	 // 1 strings to match.
        if (Name[2] != '8')
          break;
        return MCK__46_i8;	 // ".i8"
      case 'p':	 // 1 strings to match.
        if (Name[2] != '8')
          break;
        return MCK__46_p8;	 // ".p8"
      case 's':	 // 1 strings to match.
        if (Name[2] != '8')
          break;
        return MCK__46_s8;	 // ".s8"
      case 'u':	 // 1 strings to match.
        if (Name[2] != '8')
          break;
        return MCK__46_u8;	 // ".u8"
      }
      break;
    case 'a':	 // 5 strings to match.
      switch (Name[1]) {
      default: break;
      case 'd':	 // 3 strings to match.
        switch (Name[2]) {
        default: break;
        case 'c':	 // 1 strings to match.
          return MCK_adc;	 // "adc"
        case 'd':	 // 1 strings to match.
          return MCK_add;	 // "add"
        case 'r':	 // 1 strings to match.
          return MCK_adr;	 // "adr"
        }
        break;
      case 'n':	 // 1 strings to match.
        if (Name[2] != 'd')
          break;
        return MCK_and;	 // "and"
      case 's':	 // 1 strings to match.
        if (Name[2] != 'r')
          break;
        return MCK_asr;	 // "asr"
      }
      break;
    case 'b':	 // 5 strings to match.
      switch (Name[1]) {
      default: break;
      case 'f':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'c':	 // 1 strings to match.
          return MCK_bfc;	 // "bfc"
        case 'i':	 // 1 strings to match.
          return MCK_bfi;	 // "bfi"
        }
        break;
      case 'i':	 // 1 strings to match.
        if (Name[2] != 'c')
          break;
        return MCK_bic;	 // "bic"
      case 'l':	 // 1 strings to match.
        if (Name[2] != 'x')
          break;
        return MCK_blx;	 // "blx"
      case 'x':	 // 1 strings to match.
        if (Name[2] != 'j')
          break;
        return MCK_bxj;	 // "bxj"
      }
      break;
    case 'c':	 // 7 strings to match.
      switch (Name[1]) {
      default: break;
      case '1':	 // 1 strings to match.
        if (Name[2] != '0')
          break;
        return MCK_c10;	 // "c10"
      case 'b':	 // 1 strings to match.
        if (Name[2] != 'z')
          break;
        return MCK_cbz;	 // "cbz"
      case 'd':	 // 1 strings to match.
        if (Name[2] != 'p')
          break;
        return MCK_cdp;	 // "cdp"
      case 'l':	 // 1 strings to match.
        if (Name[2] != 'z')
          break;
        return MCK_clz;	 // "clz"
      case 'm':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'n':	 // 1 strings to match.
          return MCK_cmn;	 // "cmn"
        case 'p':	 // 1 strings to match.
          return MCK_cmp;	 // "cmp"
        }
        break;
      case 'p':	 // 1 strings to match.
        if (Name[2] != 's')
          break;
        return MCK_cps;	 // "cps"
      }
      break;
    case 'd':	 // 3 strings to match.
      switch (Name[1]) {
      default: break;
      case 'b':	 // 1 strings to match.
        if (Name[2] != 'g')
          break;
        return MCK_dbg;	 // "dbg"
      case 'm':	 // 1 strings to match.
        if (Name[2] != 'b')
          break;
        return MCK_dmb;	 // "dmb"
      case 's':	 // 1 strings to match.
        if (Name[2] != 'b')
          break;
        return MCK_dsb;	 // "dsb"
      }
      break;
    case 'e':	 // 1 strings to match.
      if (Name.substr(1,2) != "or")
        break;
      return MCK_eor;	 // "eor"
    case 'i':	 // 2 strings to match.
      if (Name[1] != 's')
        break;
      switch (Name[2]) {
      default: break;
      case 'b':	 // 1 strings to match.
        return MCK_isb;	 // "isb"
      case 'h':	 // 1 strings to match.
        return MCK_ish;	 // "ish"
      }
      break;
    case 'l':	 // 4 strings to match.
      switch (Name[1]) {
      default: break;
      case 'd':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'c':	 // 1 strings to match.
          return MCK_ldc;	 // "ldc"
        case 'r':	 // 1 strings to match.
          return MCK_ldr;	 // "ldr"
        }
        break;
      case 's':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'l':	 // 1 strings to match.
          return MCK_lsl;	 // "lsl"
        case 'r':	 // 1 strings to match.
          return MCK_lsr;	 // "lsr"
        }
        break;
      }
      break;
    case 'm':	 // 9 strings to match.
      switch (Name[1]) {
      default: break;
      case 'c':	 // 1 strings to match.
        if (Name[2] != 'r')
          break;
        return MCK_mcr;	 // "mcr"
      case 'l':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'a':	 // 1 strings to match.
          return MCK_mla;	 // "mla"
        case 's':	 // 1 strings to match.
          return MCK_mls;	 // "mls"
        }
        break;
      case 'o':	 // 1 strings to match.
        if (Name[2] != 'v')
          break;
        return MCK_mov;	 // "mov"
      case 'r':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'c':	 // 1 strings to match.
          return MCK_mrc;	 // "mrc"
        case 's':	 // 1 strings to match.
          return MCK_mrs;	 // "mrs"
        }
        break;
      case 's':	 // 1 strings to match.
        if (Name[2] != 'r')
          break;
        return MCK_msr;	 // "msr"
      case 'u':	 // 1 strings to match.
        if (Name[2] != 'l')
          break;
        return MCK_mul;	 // "mul"
      case 'v':	 // 1 strings to match.
        if (Name[2] != 'n')
          break;
        return MCK_mvn;	 // "mvn"
      }
      break;
    case 'n':	 // 2 strings to match.
      switch (Name[1]) {
      default: break;
      case 'o':	 // 1 strings to match.
        if (Name[2] != 'p')
          break;
        return MCK_nop;	 // "nop"
      case 's':	 // 1 strings to match.
        if (Name[2] != 'h')
          break;
        return MCK_nsh;	 // "nsh"
      }
      break;
    case 'o':	 // 3 strings to match.
      switch (Name[1]) {
      default: break;
      case 'r':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'n':	 // 1 strings to match.
          return MCK_orn;	 // "orn"
        case 'r':	 // 1 strings to match.
          return MCK_orr;	 // "orr"
        }
        break;
      case 's':	 // 1 strings to match.
        if (Name[2] != 'h')
          break;
        return MCK_osh;	 // "osh"
      }
      break;
    case 'p':	 // 4 strings to match.
      switch (Name[1]) {
      default: break;
      case '1':	 // 1 strings to match.
        if (Name[2] != '5')
          break;
        return MCK_p15;	 // "p15"
      case 'l':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'd':	 // 1 strings to match.
          return MCK_pld;	 // "pld"
        case 'i':	 // 1 strings to match.
          return MCK_pli;	 // "pli"
        }
        break;
      case 'o':	 // 1 strings to match.
        if (Name[2] != 'p')
          break;
        return MCK_pop;	 // "pop"
      }
      break;
    case 'r':	 // 5 strings to match.
      switch (Name[1]) {
      default: break;
      case 'e':	 // 1 strings to match.
        if (Name[2] != 'v')
          break;
        return MCK_rev;	 // "rev"
      case 'o':	 // 1 strings to match.
        if (Name[2] != 'r')
          break;
        return MCK_ror;	 // "ror"
      case 'r':	 // 1 strings to match.
        if (Name[2] != 'x')
          break;
        return MCK_rrx;	 // "rrx"
      case 's':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'b':	 // 1 strings to match.
          return MCK_rsb;	 // "rsb"
        case 'c':	 // 1 strings to match.
          return MCK_rsc;	 // "rsc"
        }
        break;
      }
      break;
    case 's':	 // 9 strings to match.
      switch (Name[1]) {
      default: break;
      case 'b':	 // 1 strings to match.
        if (Name[2] != 'c')
          break;
        return MCK_sbc;	 // "sbc"
      case 'e':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'l':	 // 1 strings to match.
          return MCK_sel;	 // "sel"
        case 'v':	 // 1 strings to match.
          return MCK_sev;	 // "sev"
        }
        break;
      case 'm':	 // 1 strings to match.
        if (Name[2] != 'c')
          break;
        return MCK_smc;	 // "smc"
      case 't':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'c':	 // 1 strings to match.
          return MCK_stc;	 // "stc"
        case 'r':	 // 1 strings to match.
          return MCK_str;	 // "str"
        }
        break;
      case 'u':	 // 1 strings to match.
        if (Name[2] != 'b')
          break;
        return MCK_sub;	 // "sub"
      case 'v':	 // 1 strings to match.
        if (Name[2] != 'c')
          break;
        return MCK_svc;	 // "svc"
      case 'w':	 // 1 strings to match.
        if (Name[2] != 'p')
          break;
        return MCK_swp;	 // "swp"
      }
      break;
    case 't':	 // 4 strings to match.
      switch (Name[1]) {
      default: break;
      case 'b':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'b':	 // 1 strings to match.
          return MCK_tbb;	 // "tbb"
        case 'h':	 // 1 strings to match.
          return MCK_tbh;	 // "tbh"
        }
        break;
      case 'e':	 // 1 strings to match.
        if (Name[2] != 'q')
          break;
        return MCK_teq;	 // "teq"
      case 's':	 // 1 strings to match.
        if (Name[2] != 't')
          break;
        return MCK_tst;	 // "tst"
      }
      break;
    case 'w':	 // 2 strings to match.
      if (Name[1] != 'f')
        break;
      switch (Name[2]) {
      default: break;
      case 'e':	 // 1 strings to match.
        return MCK_wfe;	 // "wfe"
      case 'i':	 // 1 strings to match.
        return MCK_wfi;	 // "wfi"
      }
      break;
    }
    break;
  case 4:	 // 127 strings to match.
    switch (Name[0]) {
    default: break;
    case '.':	 // 12 strings to match.
      switch (Name[1]) {
      default: break;
      case 'f':	 // 3 strings to match.
        switch (Name[2]) {
        default: break;
        case '1':	 // 1 strings to match.
          if (Name[3] != '6')
            break;
          return MCK__46_f16;	 // ".f16"
        case '3':	 // 1 strings to match.
          if (Name[3] != '2')
            break;
          return MCK__46_f32;	 // ".f32"
        case '6':	 // 1 strings to match.
          if (Name[3] != '4')
            break;
          return MCK__46_f64;	 // ".f64"
        }
        break;
      case 'i':	 // 3 strings to match.
        switch (Name[2]) {
        default: break;
        case '1':	 // 1 strings to match.
          if (Name[3] != '6')
            break;
          return MCK__46_i16;	 // ".i16"
        case '3':	 // 1 strings to match.
          if (Name[3] != '2')
            break;
          return MCK__46_i32;	 // ".i32"
        case '6':	 // 1 strings to match.
          if (Name[3] != '4')
            break;
          return MCK__46_i64;	 // ".i64"
        }
        break;
      case 's':	 // 3 strings to match.
        switch (Name[2]) {
        default: break;
        case '1':	 // 1 strings to match.
          if (Name[3] != '6')
            break;
          return MCK__46_s16;	 // ".s16"
        case '3':	 // 1 strings to match.
          if (Name[3] != '2')
            break;
          return MCK__46_s32;	 // ".s32"
        case '6':	 // 1 strings to match.
          if (Name[3] != '4')
            break;
          return MCK__46_s64;	 // ".s64"
        }
        break;
      case 'u':	 // 3 strings to match.
        switch (Name[2]) {
        default: break;
        case '1':	 // 1 strings to match.
          if (Name[3] != '6')
            break;
          return MCK__46_u16;	 // ".u16"
        case '3':	 // 1 strings to match.
          if (Name[3] != '2')
            break;
          return MCK__46_u32;	 // ".u32"
        case '6':	 // 1 strings to match.
          if (Name[3] != '4')
            break;
          return MCK__46_u64;	 // ".u64"
        }
        break;
      }
      break;
    case 'a':	 // 5 strings to match.
      switch (Name[1]) {
      default: break;
      case 'd':	 // 3 strings to match.
        switch (Name[2]) {
        default: break;
        case 'c':	 // 1 strings to match.
          if (Name[3] != 's')
            break;
          return MCK_adcs;	 // "adcs"
        case 'd':	 // 2 strings to match.
          switch (Name[3]) {
          default: break;
          case 's':	 // 1 strings to match.
            return MCK_adds;	 // "adds"
          case 'w':	 // 1 strings to match.
            return MCK_addw;	 // "addw"
          }
          break;
        }
        break;
      case 'n':	 // 1 strings to match.
        if (Name.substr(2,2) != "ds")
          break;
        return MCK_ands;	 // "ands"
      case 's':	 // 1 strings to match.
        if (Name.substr(2,2) != "rs")
          break;
        return MCK_asrs;	 // "asrs"
      }
      break;
    case 'b':	 // 1 strings to match.
      if (Name.substr(1,3) != "kpt")
        break;
      return MCK_bkpt;	 // "bkpt"
    case 'c':	 // 3 strings to match.
      switch (Name[1]) {
      default: break;
      case 'b':	 // 1 strings to match.
        if (Name.substr(2,2) != "nz")
          break;
        return MCK_cbnz;	 // "cbnz"
      case 'd':	 // 1 strings to match.
        if (Name.substr(2,2) != "p2")
          break;
        return MCK_cdp2;	 // "cdp2"
      case 'p':	 // 1 strings to match.
        if (Name.substr(2,2) != "sr")
          break;
        return MCK_cpsr;	 // "cpsr"
      }
      break;
    case 'l':	 // 7 strings to match.
      switch (Name[1]) {
      default: break;
      case 'd':	 // 6 strings to match.
        switch (Name[2]) {
        default: break;
        case 'c':	 // 2 strings to match.
          switch (Name[3]) {
          default: break;
          case '2':	 // 1 strings to match.
            return MCK_ldc2;	 // "ldc2"
          case 'l':	 // 1 strings to match.
            return MCK_ldcl;	 // "ldcl"
          }
          break;
        case 'r':	 // 4 strings to match.
          switch (Name[3]) {
          default: break;
          case 'b':	 // 1 strings to match.
            return MCK_ldrb;	 // "ldrb"
          case 'd':	 // 1 strings to match.
            return MCK_ldrd;	 // "ldrd"
          case 'h':	 // 1 strings to match.
            return MCK_ldrh;	 // "ldrh"
          case 't':	 // 1 strings to match.
            return MCK_ldrt;	 // "ldrt"
          }
          break;
        }
        break;
      case 's':	 // 1 strings to match.
        if (Name.substr(2,2) != "rs")
          break;
        return MCK_lsrs;	 // "lsrs"
      }
      break;
    case 'm':	 // 7 strings to match.
      switch (Name[1]) {
      default: break;
      case 'c':	 // 2 strings to match.
        if (Name[2] != 'r')
          break;
        switch (Name[3]) {
        default: break;
        case '2':	 // 1 strings to match.
          return MCK_mcr2;	 // "mcr2"
        case 'r':	 // 1 strings to match.
          return MCK_mcrr;	 // "mcrr"
        }
        break;
      case 'o':	 // 3 strings to match.
        if (Name[2] != 'v')
          break;
        switch (Name[3]) {
        default: break;
        case 's':	 // 1 strings to match.
          return MCK_movs;	 // "movs"
        case 't':	 // 1 strings to match.
          return MCK_movt;	 // "movt"
        case 'w':	 // 1 strings to match.
          return MCK_movw;	 // "movw"
        }
        break;
      case 'r':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'c':	 // 1 strings to match.
          if (Name[3] != '2')
            break;
          return MCK_mrc2;	 // "mrc2"
        case 'r':	 // 1 strings to match.
          if (Name[3] != 'c')
            break;
          return MCK_mrrc;	 // "mrrc"
        }
        break;
      }
      break;
    case 'p':	 // 2 strings to match.
      switch (Name[1]) {
      default: break;
      case 'l':	 // 1 strings to match.
        if (Name.substr(2,2) != "dw")
          break;
        return MCK_pldw;	 // "pldw"
      case 'u':	 // 1 strings to match.
        if (Name.substr(2,2) != "sh")
          break;
        return MCK_push;	 // "push"
      }
      break;
    case 'q':	 // 4 strings to match.
      switch (Name[1]) {
      default: break;
      case 'a':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'd':	 // 1 strings to match.
          if (Name[3] != 'd')
            break;
          return MCK_qadd;	 // "qadd"
        case 's':	 // 1 strings to match.
          if (Name[3] != 'x')
            break;
          return MCK_qasx;	 // "qasx"
        }
        break;
      case 's':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'a':	 // 1 strings to match.
          if (Name[3] != 'x')
            break;
          return MCK_qsax;	 // "qsax"
        case 'u':	 // 1 strings to match.
          if (Name[3] != 'b')
            break;
          return MCK_qsub;	 // "qsub"
        }
        break;
      }
      break;
    case 'r':	 // 3 strings to match.
      switch (Name[1]) {
      default: break;
      case 'b':	 // 1 strings to match.
        if (Name.substr(2,2) != "it")
          break;
        return MCK_rbit;	 // "rbit"
      case 's':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'b':	 // 1 strings to match.
          if (Name[3] != 's')
            break;
          return MCK_rsbs;	 // "rsbs"
        case 'c':	 // 1 strings to match.
          if (Name[3] != 's')
            break;
          return MCK_rscs;	 // "rscs"
        }
        break;
      }
      break;
    case 's':	 // 18 strings to match.
      switch (Name[1]) {
      default: break;
      case 'a':	 // 1 strings to match.
        if (Name.substr(2,2) != "sx")
          break;
        return MCK_sasx;	 // "sasx"
      case 'b':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'c':	 // 1 strings to match.
          if (Name[3] != 's')
            break;
          return MCK_sbcs;	 // "sbcs"
        case 'f':	 // 1 strings to match.
          if (Name[3] != 'x')
            break;
          return MCK_sbfx;	 // "sbfx"
        }
        break;
      case 'd':	 // 1 strings to match.
        if (Name.substr(2,2) != "iv")
          break;
        return MCK_sdiv;	 // "sdiv"
      case 'p':	 // 1 strings to match.
        if (Name.substr(2,2) != "sr")
          break;
        return MCK_spsr;	 // "spsr"
      case 's':	 // 2 strings to match.
        if (Name[2] != 'a')
          break;
        switch (Name[3]) {
        default: break;
        case 't':	 // 1 strings to match.
          return MCK_ssat;	 // "ssat"
        case 'x':	 // 1 strings to match.
          return MCK_ssax;	 // "ssax"
        }
        break;
      case 't':	 // 6 strings to match.
        switch (Name[2]) {
        default: break;
        case 'c':	 // 2 strings to match.
          switch (Name[3]) {
          default: break;
          case '2':	 // 1 strings to match.
            return MCK_stc2;	 // "stc2"
          case 'l':	 // 1 strings to match.
            return MCK_stcl;	 // "stcl"
          }
          break;
        case 'r':	 // 4 strings to match.
          switch (Name[3]) {
          default: break;
          case 'b':	 // 1 strings to match.
            return MCK_strb;	 // "strb"
          case 'd':	 // 1 strings to match.
            return MCK_strd;	 // "strd"
          case 'h':	 // 1 strings to match.
            return MCK_strh;	 // "strh"
          case 't':	 // 1 strings to match.
            return MCK_strt;	 // "strt"
          }
          break;
        }
        break;
      case 'u':	 // 2 strings to match.
        if (Name[2] != 'b')
          break;
        switch (Name[3]) {
        default: break;
        case 's':	 // 1 strings to match.
          return MCK_subs;	 // "subs"
        case 'w':	 // 1 strings to match.
          return MCK_subw;	 // "subw"
        }
        break;
      case 'w':	 // 1 strings to match.
        if (Name.substr(2,2) != "pb")
          break;
        return MCK_swpb;	 // "swpb"
      case 'x':	 // 2 strings to match.
        if (Name[2] != 't')
          break;
        switch (Name[3]) {
        default: break;
        case 'b':	 // 1 strings to match.
          return MCK_sxtb;	 // "sxtb"
        case 'h':	 // 1 strings to match.
          return MCK_sxth;	 // "sxth"
        }
        break;
      }
      break;
    case 'u':	 // 7 strings to match.
      switch (Name[1]) {
      default: break;
      case 'a':	 // 1 strings to match.
        if (Name.substr(2,2) != "sx")
          break;
        return MCK_uasx;	 // "uasx"
      case 'b':	 // 1 strings to match.
        if (Name.substr(2,2) != "fx")
          break;
        return MCK_ubfx;	 // "ubfx"
      case 'd':	 // 1 strings to match.
        if (Name.substr(2,2) != "iv")
          break;
        return MCK_udiv;	 // "udiv"
      case 's':	 // 2 strings to match.
        if (Name[2] != 'a')
          break;
        switch (Name[3]) {
        default: break;
        case 't':	 // 1 strings to match.
          return MCK_usat;	 // "usat"
        case 'x':	 // 1 strings to match.
          return MCK_usax;	 // "usax"
        }
        break;
      case 'x':	 // 2 strings to match.
        if (Name[2] != 't')
          break;
        switch (Name[3]) {
        default: break;
        case 'b':	 // 1 strings to match.
          return MCK_uxtb;	 // "uxtb"
        case 'h':	 // 1 strings to match.
          return MCK_uxth;	 // "uxth"
        }
        break;
      }
      break;
    case 'v':	 // 58 strings to match.
      switch (Name[1]) {
      default: break;
      case 'a':	 // 5 strings to match.
        switch (Name[2]) {
        default: break;
        case 'b':	 // 3 strings to match.
          switch (Name[3]) {
          default: break;
          case 'a':	 // 1 strings to match.
            return MCK_vaba;	 // "vaba"
          case 'd':	 // 1 strings to match.
            return MCK_vabd;	 // "vabd"
          case 's':	 // 1 strings to match.
            return MCK_vabs;	 // "vabs"
          }
          break;
        case 'd':	 // 1 strings to match.
          if (Name[3] != 'd')
            break;
          return MCK_vadd;	 // "vadd"
        case 'n':	 // 1 strings to match.
          if (Name[3] != 'd')
            break;
          return MCK_vand;	 // "vand"
        }
        break;
      case 'b':	 // 4 strings to match.
        switch (Name[2]) {
        default: break;
        case 'i':	 // 3 strings to match.
          switch (Name[3]) {
          default: break;
          case 'c':	 // 1 strings to match.
            return MCK_vbic;	 // "vbic"
          case 'f':	 // 1 strings to match.
            return MCK_vbif;	 // "vbif"
          case 't':	 // 1 strings to match.
            return MCK_vbit;	 // "vbit"
          }
          break;
        case 's':	 // 1 strings to match.
          if (Name[3] != 'l')
            break;
          return MCK_vbsl;	 // "vbsl"
        }
        break;
      case 'c':	 // 10 strings to match.
        switch (Name[2]) {
        default: break;
        case 'e':	 // 1 strings to match.
          if (Name[3] != 'q')
            break;
          return MCK_vceq;	 // "vceq"
        case 'g':	 // 2 strings to match.
          switch (Name[3]) {
          default: break;
          case 'e':	 // 1 strings to match.
            return MCK_vcge;	 // "vcge"
          case 't':	 // 1 strings to match.
            return MCK_vcgt;	 // "vcgt"
          }
          break;
        case 'l':	 // 4 strings to match.
          switch (Name[3]) {
          default: break;
          case 'e':	 // 1 strings to match.
            return MCK_vcle;	 // "vcle"
          case 's':	 // 1 strings to match.
            return MCK_vcls;	 // "vcls"
          case 't':	 // 1 strings to match.
            return MCK_vclt;	 // "vclt"
          case 'z':	 // 1 strings to match.
            return MCK_vclz;	 // "vclz"
          }
          break;
        case 'm':	 // 1 strings to match.
          if (Name[3] != 'p')
            break;
          return MCK_vcmp;	 // "vcmp"
        case 'n':	 // 1 strings to match.
          if (Name[3] != 't')
            break;
          return MCK_vcnt;	 // "vcnt"
        case 'v':	 // 1 strings to match.
          if (Name[3] != 't')
            break;
          return MCK_vcvt;	 // "vcvt"
        }
        break;
      case 'd':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'i':	 // 1 strings to match.
          if (Name[3] != 'v')
            break;
          return MCK_vdiv;	 // "vdiv"
        case 'u':	 // 1 strings to match.
          if (Name[3] != 'p')
            break;
          return MCK_vdup;	 // "vdup"
        }
        break;
      case 'e':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'o':	 // 1 strings to match.
          if (Name[3] != 'r')
            break;
          return MCK_veor;	 // "veor"
        case 'x':	 // 1 strings to match.
          if (Name[3] != 't')
            break;
          return MCK_vext;	 // "vext"
        }
        break;
      case 'l':	 // 5 strings to match.
        if (Name[2] != 'd')
          break;
        switch (Name[3]) {
        default: break;
        case '1':	 // 1 strings to match.
          return MCK_vld1;	 // "vld1"
        case '2':	 // 1 strings to match.
          return MCK_vld2;	 // "vld2"
        case '3':	 // 1 strings to match.
          return MCK_vld3;	 // "vld3"
        case '4':	 // 1 strings to match.
          return MCK_vld4;	 // "vld4"
        case 'r':	 // 1 strings to match.
          return MCK_vldr;	 // "vldr"
        }
        break;
      case 'm':	 // 9 strings to match.
        switch (Name[2]) {
        default: break;
        case 'a':	 // 1 strings to match.
          if (Name[3] != 'x')
            break;
          return MCK_vmax;	 // "vmax"
        case 'i':	 // 1 strings to match.
          if (Name[3] != 'n')
            break;
          return MCK_vmin;	 // "vmin"
        case 'l':	 // 2 strings to match.
          switch (Name[3]) {
          default: break;
          case 'a':	 // 1 strings to match.
            return MCK_vmla;	 // "vmla"
          case 's':	 // 1 strings to match.
            return MCK_vmls;	 // "vmls"
          }
          break;
        case 'o':	 // 1 strings to match.
          if (Name[3] != 'v')
            break;
          return MCK_vmov;	 // "vmov"
        case 'r':	 // 1 strings to match.
          if (Name[3] != 's')
            break;
          return MCK_vmrs;	 // "vmrs"
        case 's':	 // 1 strings to match.
          if (Name[3] != 'r')
            break;
          return MCK_vmsr;	 // "vmsr"
        case 'u':	 // 1 strings to match.
          if (Name[3] != 'l')
            break;
          return MCK_vmul;	 // "vmul"
        case 'v':	 // 1 strings to match.
          if (Name[3] != 'n')
            break;
          return MCK_vmvn;	 // "vmvn"
        }
        break;
      case 'n':	 // 1 strings to match.
        if (Name.substr(2,2) != "eg")
          break;
        return MCK_vneg;	 // "vneg"
      case 'o':	 // 2 strings to match.
        if (Name[2] != 'r')
          break;
        switch (Name[3]) {
        default: break;
        case 'n':	 // 1 strings to match.
          return MCK_vorn;	 // "vorn"
        case 'r':	 // 1 strings to match.
          return MCK_vorr;	 // "vorr"
        }
        break;
      case 's':	 // 12 strings to match.
        switch (Name[2]) {
        default: break;
        case 'h':	 // 2 strings to match.
          switch (Name[3]) {
          default: break;
          case 'l':	 // 1 strings to match.
            return MCK_vshl;	 // "vshl"
          case 'r':	 // 1 strings to match.
            return MCK_vshr;	 // "vshr"
          }
          break;
        case 'l':	 // 1 strings to match.
          if (Name[3] != 'i')
            break;
          return MCK_vsli;	 // "vsli"
        case 'r':	 // 2 strings to match.
          switch (Name[3]) {
          default: break;
          case 'a':	 // 1 strings to match.
            return MCK_vsra;	 // "vsra"
          case 'i':	 // 1 strings to match.
            return MCK_vsri;	 // "vsri"
          }
          break;
        case 't':	 // 5 strings to match.
          switch (Name[3]) {
          default: break;
          case '1':	 // 1 strings to match.
            return MCK_vst1;	 // "vst1"
          case '2':	 // 1 strings to match.
            return MCK_vst2;	 // "vst2"
          case '3':	 // 1 strings to match.
            return MCK_vst3;	 // "vst3"
          case '4':	 // 1 strings to match.
            return MCK_vst4;	 // "vst4"
          case 'r':	 // 1 strings to match.
            return MCK_vstr;	 // "vstr"
          }
          break;
        case 'u':	 // 1 strings to match.
          if (Name[3] != 'b')
            break;
          return MCK_vsub;	 // "vsub"
        case 'w':	 // 1 strings to match.
          if (Name[3] != 'p')
            break;
          return MCK_vswp;	 // "vswp"
        }
        break;
      case 't':	 // 4 strings to match.
        switch (Name[2]) {
        default: break;
        case 'b':	 // 2 strings to match.
          switch (Name[3]) {
          default: break;
          case 'l':	 // 1 strings to match.
            return MCK_vtbl;	 // "vtbl"
          case 'x':	 // 1 strings to match.
            return MCK_vtbx;	 // "vtbx"
          }
          break;
        case 'r':	 // 1 strings to match.
          if (Name[3] != 'n')
            break;
          return MCK_vtrn;	 // "vtrn"
        case 's':	 // 1 strings to match.
          if (Name[3] != 't')
            break;
          return MCK_vtst;	 // "vtst"
        }
        break;
      case 'u':	 // 1 strings to match.
        if (Name.substr(2,2) != "zp")
          break;
        return MCK_vuzp;	 // "vuzp"
      case 'z':	 // 1 strings to match.
        if (Name.substr(2,2) != "ip")
          break;
        return MCK_vzip;	 // "vzip"
      }
      break;
    }
    break;
  case 5:	 // 94 strings to match.
    switch (Name[0]) {
    default: break;
    case 'c':	 // 1 strings to match.
      if (Name.substr(1,4) != "lrex")
        break;
      return MCK_clrex;	 // "clrex"
    case 'f':	 // 1 strings to match.
      if (Name.substr(1,4) != "pscr")
        break;
      return MCK_fpscr;	 // "fpscr"
    case 'i':	 // 1 strings to match.
      if (Name.substr(1,4) != "shst")
        break;
      return MCK_ishst;	 // "ishst"
    case 'l':	 // 6 strings to match.
      if (Name[1] != 'd')
        break;
      switch (Name[2]) {
      default: break;
      case 'c':	 // 1 strings to match.
        if (Name.substr(3,2) != "2l")
          break;
        return MCK_ldc2l;	 // "ldc2l"
      case 'r':	 // 5 strings to match.
        switch (Name[3]) {
        default: break;
        case 'b':	 // 1 strings to match.
          if (Name[4] != 't')
            break;
          return MCK_ldrbt;	 // "ldrbt"
        case 'e':	 // 1 strings to match.
          if (Name[4] != 'x')
            break;
          return MCK_ldrex;	 // "ldrex"
        case 'h':	 // 1 strings to match.
          if (Name[4] != 't')
            break;
          return MCK_ldrht;	 // "ldrht"
        case 's':	 // 2 strings to match.
          switch (Name[4]) {
          default: break;
          case 'b':	 // 1 strings to match.
            return MCK_ldrsb;	 // "ldrsb"
          case 'h':	 // 1 strings to match.
            return MCK_ldrsh;	 // "ldrsh"
          }
          break;
        }
        break;
      }
      break;
    case 'm':	 // 2 strings to match.
      switch (Name[1]) {
      default: break;
      case 'c':	 // 1 strings to match.
        if (Name.substr(2,3) != "rr2")
          break;
        return MCK_mcrr2;	 // "mcrr2"
      case 'r':	 // 1 strings to match.
        if (Name.substr(2,3) != "rc2")
          break;
        return MCK_mrrc2;	 // "mrrc2"
      }
      break;
    case 'n':	 // 1 strings to match.
      if (Name.substr(1,4) != "shst")
        break;
      return MCK_nshst;	 // "nshst"
    case 'o':	 // 1 strings to match.
      if (Name.substr(1,4) != "shst")
        break;
      return MCK_oshst;	 // "oshst"
    case 'p':	 // 2 strings to match.
      if (Name.substr(1,2) != "kh")
        break;
      switch (Name[3]) {
      default: break;
      case 'b':	 // 1 strings to match.
        if (Name[4] != 't')
          break;
        return MCK_pkhbt;	 // "pkhbt"
      case 't':	 // 1 strings to match.
        if (Name[4] != 'b')
          break;
        return MCK_pkhtb;	 // "pkhtb"
      }
      break;
    case 'q':	 // 4 strings to match.
      switch (Name[1]) {
      default: break;
      case 'a':	 // 1 strings to match.
        if (Name.substr(2,3) != "dd8")
          break;
        return MCK_qadd8;	 // "qadd8"
      case 'd':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'a':	 // 1 strings to match.
          if (Name.substr(3,2) != "dd")
            break;
          return MCK_qdadd;	 // "qdadd"
        case 's':	 // 1 strings to match.
          if (Name.substr(3,2) != "ub")
            break;
          return MCK_qdsub;	 // "qdsub"
        }
        break;
      case 's':	 // 1 strings to match.
        if (Name.substr(2,3) != "ub8")
          break;
        return MCK_qsub8;	 // "qsub8"
      }
      break;
    case 'r':	 // 5 strings to match.
      switch (Name[1]) {
      default: break;
      case 'e':	 // 2 strings to match.
        if (Name[2] != 'v')
          break;
        switch (Name[3]) {
        default: break;
        case '1':	 // 1 strings to match.
          if (Name[4] != '6')
            break;
          return MCK_rev16;	 // "rev16"
        case 's':	 // 1 strings to match.
          if (Name[4] != 'h')
            break;
          return MCK_revsh;	 // "revsh"
        }
        break;
      case 'f':	 // 3 strings to match.
        if (Name[2] != 'e')
          break;
        switch (Name[3]) {
        default: break;
        case 'a':	 // 1 strings to match.
          if (Name[4] != 'b')
            break;
          return MCK_rfeab;	 // "rfeab"
        case 'd':	 // 1 strings to match.
          if (Name[4] != 'b')
            break;
          return MCK_rfedb;	 // "rfedb"
        case 'i':	 // 1 strings to match.
          if (Name[4] != 'a')
            break;
          return MCK_rfeia;	 // "rfeia"
        }
        break;
      }
      break;
    case 's':	 // 21 strings to match.
      switch (Name[1]) {
      default: break;
      case 'a':	 // 1 strings to match.
        if (Name.substr(2,3) != "dd8")
          break;
        return MCK_sadd8;	 // "sadd8"
      case 'h':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'a':	 // 1 strings to match.
          if (Name.substr(3,2) != "sx")
            break;
          return MCK_shasx;	 // "shasx"
        case 's':	 // 1 strings to match.
          if (Name.substr(3,2) != "ax")
            break;
          return MCK_shsax;	 // "shsax"
        }
        break;
      case 'm':	 // 9 strings to match.
        switch (Name[2]) {
        default: break;
        case 'l':	 // 3 strings to match.
          switch (Name[3]) {
          default: break;
          case 'a':	 // 2 strings to match.
            switch (Name[4]) {
            default: break;
            case 'd':	 // 1 strings to match.
              return MCK_smlad;	 // "smlad"
            case 'l':	 // 1 strings to match.
              return MCK_smlal;	 // "smlal"
            }
            break;
          case 's':	 // 1 strings to match.
            if (Name[4] != 'd')
              break;
            return MCK_smlsd;	 // "smlsd"
          }
          break;
        case 'm':	 // 3 strings to match.
          switch (Name[3]) {
          default: break;
          case 'l':	 // 2 strings to match.
            switch (Name[4]) {
            default: break;
            case 'a':	 // 1 strings to match.
              return MCK_smmla;	 // "smmla"
            case 's':	 // 1 strings to match.
              return MCK_smmls;	 // "smmls"
            }
            break;
          case 'u':	 // 1 strings to match.
            if (Name[4] != 'l')
              break;
            return MCK_smmul;	 // "smmul"
          }
          break;
        case 'u':	 // 3 strings to match.
          switch (Name[3]) {
          default: break;
          case 'a':	 // 1 strings to match.
            if (Name[4] != 'd')
              break;
            return MCK_smuad;	 // "smuad"
          case 'l':	 // 1 strings to match.
            if (Name[4] != 'l')
              break;
            return MCK_smull;	 // "smull"
          case 's':	 // 1 strings to match.
            if (Name[4] != 'd')
              break;
            return MCK_smusd;	 // "smusd"
          }
          break;
        }
        break;
      case 'r':	 // 2 strings to match.
        if (Name[2] != 's')
          break;
        switch (Name[3]) {
        default: break;
        case 'd':	 // 1 strings to match.
          if (Name[4] != 'b')
            break;
          return MCK_srsdb;	 // "srsdb"
        case 'i':	 // 1 strings to match.
          if (Name[4] != 'a')
            break;
          return MCK_srsia;	 // "srsia"
        }
        break;
      case 's':	 // 1 strings to match.
        if (Name.substr(2,3) != "ub8")
          break;
        return MCK_ssub8;	 // "ssub8"
      case 't':	 // 4 strings to match.
        switch (Name[2]) {
        default: break;
        case 'c':	 // 1 strings to match.
          if (Name.substr(3,2) != "2l")
            break;
          return MCK_stc2l;	 // "stc2l"
        case 'r':	 // 3 strings to match.
          switch (Name[3]) {
          default: break;
          case 'b':	 // 1 strings to match.
            if (Name[4] != 't')
              break;
            return MCK_strbt;	 // "strbt"
          case 'e':	 // 1 strings to match.
            if (Name[4] != 'x')
              break;
            return MCK_strex;	 // "strex"
          case 'h':	 // 1 strings to match.
            if (Name[4] != 't')
              break;
            return MCK_strht;	 // "strht"
          }
          break;
        }
        break;
      case 'x':	 // 2 strings to match.
        if (Name.substr(2,2) != "ta")
          break;
        switch (Name[4]) {
        default: break;
        case 'b':	 // 1 strings to match.
          return MCK_sxtab;	 // "sxtab"
        case 'h':	 // 1 strings to match.
          return MCK_sxtah;	 // "sxtah"
        }
        break;
      }
      break;
    case 'u':	 // 12 strings to match.
      switch (Name[1]) {
      default: break;
      case 'a':	 // 1 strings to match.
        if (Name.substr(2,3) != "dd8")
          break;
        return MCK_uadd8;	 // "uadd8"
      case 'h':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'a':	 // 1 strings to match.
          if (Name.substr(3,2) != "sx")
            break;
          return MCK_uhasx;	 // "uhasx"
        case 's':	 // 1 strings to match.
          if (Name.substr(3,2) != "ax")
            break;
          return MCK_uhsax;	 // "uhsax"
        }
        break;
      case 'm':	 // 3 strings to match.
        switch (Name[2]) {
        default: break;
        case 'a':	 // 1 strings to match.
          if (Name.substr(3,2) != "al")
            break;
          return MCK_umaal;	 // "umaal"
        case 'l':	 // 1 strings to match.
          if (Name.substr(3,2) != "al")
            break;
          return MCK_umlal;	 // "umlal"
        case 'u':	 // 1 strings to match.
          if (Name.substr(3,2) != "ll")
            break;
          return MCK_umull;	 // "umull"
        }
        break;
      case 'q':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'a':	 // 1 strings to match.
          if (Name.substr(3,2) != "sx")
            break;
          return MCK_uqasx;	 // "uqasx"
        case 's':	 // 1 strings to match.
          if (Name.substr(3,2) != "ax")
            break;
          return MCK_uqsax;	 // "uqsax"
        }
        break;
      case 's':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'a':	 // 1 strings to match.
          if (Name.substr(3,2) != "d8")
            break;
          return MCK_usad8;	 // "usad8"
        case 'u':	 // 1 strings to match.
          if (Name.substr(3,2) != "b8")
            break;
          return MCK_usub8;	 // "usub8"
        }
        break;
      case 'x':	 // 2 strings to match.
        if (Name.substr(2,2) != "ta")
          break;
        switch (Name[4]) {
        default: break;
        case 'b':	 // 1 strings to match.
          return MCK_uxtab;	 // "uxtab"
        case 'h':	 // 1 strings to match.
          return MCK_uxtah;	 // "uxtah"
        }
        break;
      }
      break;
    case 'v':	 // 36 strings to match.
      switch (Name[1]) {
      default: break;
      case 'a':	 // 6 strings to match.
        switch (Name[2]) {
        default: break;
        case 'b':	 // 2 strings to match.
          switch (Name[3]) {
          default: break;
          case 'a':	 // 1 strings to match.
            if (Name[4] != 'l')
              break;
            return MCK_vabal;	 // "vabal"
          case 'd':	 // 1 strings to match.
            if (Name[4] != 'l')
              break;
            return MCK_vabdl;	 // "vabdl"
          }
          break;
        case 'c':	 // 2 strings to match.
          if (Name[3] != 'g')
            break;
          switch (Name[4]) {
          default: break;
          case 'e':	 // 1 strings to match.
            return MCK_vacge;	 // "vacge"
          case 't':	 // 1 strings to match.
            return MCK_vacgt;	 // "vacgt"
          }
          break;
        case 'd':	 // 2 strings to match.
          if (Name[3] != 'd')
            break;
          switch (Name[4]) {
          default: break;
          case 'l':	 // 1 strings to match.
            return MCK_vaddl;	 // "vaddl"
          case 'w':	 // 1 strings to match.
            return MCK_vaddw;	 // "vaddw"
          }
          break;
        }
        break;
      case 'c':	 // 4 strings to match.
        switch (Name[2]) {
        default: break;
        case 'm':	 // 1 strings to match.
          if (Name.substr(3,2) != "pe")
            break;
          return MCK_vcmpe;	 // "vcmpe"
        case 'v':	 // 3 strings to match.
          if (Name[3] != 't')
            break;
          switch (Name[4]) {
          default: break;
          case 'b':	 // 1 strings to match.
            return MCK_vcvtb;	 // "vcvtb"
          case 'r':	 // 1 strings to match.
            return MCK_vcvtr;	 // "vcvtr"
          case 't':	 // 1 strings to match.
            return MCK_vcvtt;	 // "vcvtt"
          }
          break;
        }
        break;
      case 'h':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'a':	 // 1 strings to match.
          if (Name.substr(3,2) != "dd")
            break;
          return MCK_vhadd;	 // "vhadd"
        case 's':	 // 1 strings to match.
          if (Name.substr(3,2) != "ub")
            break;
          return MCK_vhsub;	 // "vhsub"
        }
        break;
      case 'm':	 // 5 strings to match.
        switch (Name[2]) {
        default: break;
        case 'l':	 // 2 strings to match.
          switch (Name[3]) {
          default: break;
          case 'a':	 // 1 strings to match.
            if (Name[4] != 'l')
              break;
            return MCK_vmlal;	 // "vmlal"
          case 's':	 // 1 strings to match.
            if (Name[4] != 'l')
              break;
            return MCK_vmlsl;	 // "vmlsl"
          }
          break;
        case 'o':	 // 2 strings to match.
          if (Name[3] != 'v')
            break;
          switch (Name[4]) {
          default: break;
          case 'l':	 // 1 strings to match.
            return MCK_vmovl;	 // "vmovl"
          case 'n':	 // 1 strings to match.
            return MCK_vmovn;	 // "vmovn"
          }
          break;
        case 'u':	 // 1 strings to match.
          if (Name.substr(3,2) != "ll")
            break;
          return MCK_vmull;	 // "vmull"
        }
        break;
      case 'n':	 // 3 strings to match.
        if (Name[2] != 'm')
          break;
        switch (Name[3]) {
        default: break;
        case 'l':	 // 2 strings to match.
          switch (Name[4]) {
          default: break;
          case 'a':	 // 1 strings to match.
            return MCK_vnmla;	 // "vnmla"
          case 's':	 // 1 strings to match.
            return MCK_vnmls;	 // "vnmls"
          }
          break;
        case 'u':	 // 1 strings to match.
          if (Name[4] != 'l')
            break;
          return MCK_vnmul;	 // "vnmul"
        }
        break;
      case 'p':	 // 3 strings to match.
        switch (Name[2]) {
        default: break;
        case 'a':	 // 1 strings to match.
          if (Name.substr(3,2) != "dd")
            break;
          return MCK_vpadd;	 // "vpadd"
        case 'm':	 // 2 strings to match.
          switch (Name[3]) {
          default: break;
          case 'a':	 // 1 strings to match.
            if (Name[4] != 'x')
              break;
            return MCK_vpmax;	 // "vpmax"
          case 'i':	 // 1 strings to match.
            if (Name[4] != 'n')
              break;
            return MCK_vpmin;	 // "vpmin"
          }
          break;
        }
        break;
      case 'q':	 // 5 strings to match.
        switch (Name[2]) {
        default: break;
        case 'a':	 // 2 strings to match.
          switch (Name[3]) {
          default: break;
          case 'b':	 // 1 strings to match.
            if (Name[4] != 's')
              break;
            return MCK_vqabs;	 // "vqabs"
          case 'd':	 // 1 strings to match.
            if (Name[4] != 'd')
              break;
            return MCK_vqadd;	 // "vqadd"
          }
          break;
        case 'n':	 // 1 strings to match.
          if (Name.substr(3,2) != "eg")
            break;
          return MCK_vqneg;	 // "vqneg"
        case 's':	 // 2 strings to match.
          switch (Name[3]) {
          default: break;
          case 'h':	 // 1 strings to match.
            if (Name[4] != 'l')
              break;
            return MCK_vqshl;	 // "vqshl"
          case 'u':	 // 1 strings to match.
            if (Name[4] != 'b')
              break;
            return MCK_vqsub;	 // "vqsub"
          }
          break;
        }
        break;
      case 'r':	 // 3 strings to match.
        if (Name[2] != 's')
          break;
        switch (Name[3]) {
        default: break;
        case 'h':	 // 2 strings to match.
          switch (Name[4]) {
          default: break;
          case 'l':	 // 1 strings to match.
            return MCK_vrshl;	 // "vrshl"
          case 'r':	 // 1 strings to match.
            return MCK_vrshr;	 // "vrshr"
          }
          break;
        case 'r':	 // 1 strings to match.
          if (Name[4] != 'a')
            break;
          return MCK_vrsra;	 // "vrsra"
        }
        break;
      case 's':	 // 5 strings to match.
        switch (Name[2]) {
        default: break;
        case 'h':	 // 2 strings to match.
          switch (Name[3]) {
          default: break;
          case 'l':	 // 1 strings to match.
            if (Name[4] != 'l')
              break;
            return MCK_vshll;	 // "vshll"
          case 'r':	 // 1 strings to match.
            if (Name[4] != 'n')
              break;
            return MCK_vshrn;	 // "vshrn"
          }
          break;
        case 'q':	 // 1 strings to match.
          if (Name.substr(3,2) != "rt")
            break;
          return MCK_vsqrt;	 // "vsqrt"
        case 'u':	 // 2 strings to match.
          if (Name[3] != 'b')
            break;
          switch (Name[4]) {
          default: break;
          case 'l':	 // 1 strings to match.
            return MCK_vsubl;	 // "vsubl"
          case 'w':	 // 1 strings to match.
            return MCK_vsubw;	 // "vsubw"
          }
          break;
        }
        break;
      }
      break;
    case 'y':	 // 1 strings to match.
      if (Name.substr(1,4) != "ield")
        break;
      return MCK_yield;	 // "yield"
    }
    break;
  case 6:	 // 62 strings to match.
    switch (Name[0]) {
    default: break;
    case 'l':	 // 5 strings to match.
      if (Name.substr(1,2) != "dr")
        break;
      switch (Name[3]) {
      default: break;
      case 'e':	 // 3 strings to match.
        if (Name[4] != 'x')
          break;
        switch (Name[5]) {
        default: break;
        case 'b':	 // 1 strings to match.
          return MCK_ldrexb;	 // "ldrexb"
        case 'd':	 // 1 strings to match.
          return MCK_ldrexd;	 // "ldrexd"
        case 'h':	 // 1 strings to match.
          return MCK_ldrexh;	 // "ldrexh"
        }
        break;
      case 's':	 // 2 strings to match.
        switch (Name[4]) {
        default: break;
        case 'b':	 // 1 strings to match.
          if (Name[5] != 't')
            break;
          return MCK_ldrsbt;	 // "ldrsbt"
        case 'h':	 // 1 strings to match.
          if (Name[5] != 't')
            break;
          return MCK_ldrsht;	 // "ldrsht"
        }
        break;
      }
      break;
    case 'q':	 // 2 strings to match.
      switch (Name[1]) {
      default: break;
      case 'a':	 // 1 strings to match.
        if (Name.substr(2,4) != "dd16")
          break;
        return MCK_qadd16;	 // "qadd16"
      case 's':	 // 1 strings to match.
        if (Name.substr(2,4) != "ub16")
          break;
        return MCK_qsub16;	 // "qsub16"
      }
      break;
    case 's':	 // 31 strings to match.
      switch (Name[1]) {
      default: break;
      case 'a':	 // 1 strings to match.
        if (Name.substr(2,4) != "dd16")
          break;
        return MCK_sadd16;	 // "sadd16"
      case 'e':	 // 1 strings to match.
        if (Name.substr(2,4) != "tend")
          break;
        return MCK_setend;	 // "setend"
      case 'h':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'a':	 // 1 strings to match.
          if (Name.substr(3,3) != "dd8")
            break;
          return MCK_shadd8;	 // "shadd8"
        case 's':	 // 1 strings to match.
          if (Name.substr(3,3) != "ub8")
            break;
          return MCK_shsub8;	 // "shsub8"
        }
        break;
      case 'm':	 // 21 strings to match.
        switch (Name[2]) {
        default: break;
        case 'l':	 // 10 strings to match.
          switch (Name[3]) {
          default: break;
          case 'a':	 // 8 strings to match.
            switch (Name[4]) {
            default: break;
            case 'b':	 // 2 strings to match.
              switch (Name[5]) {
              default: break;
              case 'b':	 // 1 strings to match.
                return MCK_smlabb;	 // "smlabb"
              case 't':	 // 1 strings to match.
                return MCK_smlabt;	 // "smlabt"
              }
              break;
            case 'd':	 // 1 strings to match.
              if (Name[5] != 'x')
                break;
              return MCK_smladx;	 // "smladx"
            case 'l':	 // 1 strings to match.
              if (Name[5] != 'd')
                break;
              return MCK_smlald;	 // "smlald"
            case 't':	 // 2 strings to match.
              switch (Name[5]) {
              default: break;
              case 'b':	 // 1 strings to match.
                return MCK_smlatb;	 // "smlatb"
              case 't':	 // 1 strings to match.
                return MCK_smlatt;	 // "smlatt"
              }
              break;
            case 'w':	 // 2 strings to match.
              switch (Name[5]) {
              default: break;
              case 'b':	 // 1 strings to match.
                return MCK_smlawb;	 // "smlawb"
              case 't':	 // 1 strings to match.
                return MCK_smlawt;	 // "smlawt"
              }
              break;
            }
            break;
          case 's':	 // 2 strings to match.
            switch (Name[4]) {
            default: break;
            case 'd':	 // 1 strings to match.
              if (Name[5] != 'x')
                break;
              return MCK_smlsdx;	 // "smlsdx"
            case 'l':	 // 1 strings to match.
              if (Name[5] != 'd')
                break;
              return MCK_smlsld;	 // "smlsld"
            }
            break;
          }
          break;
        case 'm':	 // 3 strings to match.
          switch (Name[3]) {
          default: break;
          case 'l':	 // 2 strings to match.
            switch (Name[4]) {
            default: break;
            case 'a':	 // 1 strings to match.
              if (Name[5] != 'r')
                break;
              return MCK_smmlar;	 // "smmlar"
            case 's':	 // 1 strings to match.
              if (Name[5] != 'r')
                break;
              return MCK_smmlsr;	 // "smmlsr"
            }
            break;
          case 'u':	 // 1 strings to match.
            if (Name.substr(4,2) != "lr")
              break;
            return MCK_smmulr;	 // "smmulr"
          }
          break;
        case 'u':	 // 8 strings to match.
          switch (Name[3]) {
          default: break;
          case 'a':	 // 1 strings to match.
            if (Name.substr(4,2) != "dx")
              break;
            return MCK_smuadx;	 // "smuadx"
          case 'l':	 // 6 strings to match.
            switch (Name[4]) {
            default: break;
            case 'b':	 // 2 strings to match.
              switch (Name[5]) {
              default: break;
              case 'b':	 // 1 strings to match.
                return MCK_smulbb;	 // "smulbb"
              case 't':	 // 1 strings to match.
                return MCK_smulbt;	 // "smulbt"
              }
              break;
            case 't':	 // 2 strings to match.
              switch (Name[5]) {
              default: break;
              case 'b':	 // 1 strings to match.
                return MCK_smultb;	 // "smultb"
              case 't':	 // 1 strings to match.
                return MCK_smultt;	 // "smultt"
              }
              break;
            case 'w':	 // 2 strings to match.
              switch (Name[5]) {
              default: break;
              case 'b':	 // 1 strings to match.
                return MCK_smulwb;	 // "smulwb"
              case 't':	 // 1 strings to match.
                return MCK_smulwt;	 // "smulwt"
              }
              break;
            }
            break;
          case 's':	 // 1 strings to match.
            if (Name.substr(4,2) != "dx")
              break;
            return MCK_smusdx;	 // "smusdx"
          }
          break;
        }
        break;
      case 's':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'a':	 // 1 strings to match.
          if (Name.substr(3,3) != "t16")
            break;
          return MCK_ssat16;	 // "ssat16"
        case 'u':	 // 1 strings to match.
          if (Name.substr(3,3) != "b16")
            break;
          return MCK_ssub16;	 // "ssub16"
        }
        break;
      case 't':	 // 3 strings to match.
        if (Name.substr(2,3) != "rex")
          break;
        switch (Name[5]) {
        default: break;
        case 'b':	 // 1 strings to match.
          return MCK_strexb;	 // "strexb"
        case 'd':	 // 1 strings to match.
          return MCK_strexd;	 // "strexd"
        case 'h':	 // 1 strings to match.
          return MCK_strexh;	 // "strexh"
        }
        break;
      case 'x':	 // 1 strings to match.
        if (Name.substr(2,4) != "tb16")
          break;
        return MCK_sxtb16;	 // "sxtb16"
      }
      break;
    case 'u':	 // 9 strings to match.
      switch (Name[1]) {
      default: break;
      case 'a':	 // 1 strings to match.
        if (Name.substr(2,4) != "dd16")
          break;
        return MCK_uadd16;	 // "uadd16"
      case 'h':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'a':	 // 1 strings to match.
          if (Name.substr(3,3) != "dd8")
            break;
          return MCK_uhadd8;	 // "uhadd8"
        case 's':	 // 1 strings to match.
          if (Name.substr(3,3) != "ub8")
            break;
          return MCK_uhsub8;	 // "uhsub8"
        }
        break;
      case 'q':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'a':	 // 1 strings to match.
          if (Name.substr(3,3) != "dd8")
            break;
          return MCK_uqadd8;	 // "uqadd8"
        case 's':	 // 1 strings to match.
          if (Name.substr(3,3) != "ub8")
            break;
          return MCK_uqsub8;	 // "uqsub8"
        }
        break;
      case 's':	 // 3 strings to match.
        switch (Name[2]) {
        default: break;
        case 'a':	 // 2 strings to match.
          switch (Name[3]) {
          default: break;
          case 'd':	 // 1 strings to match.
            if (Name.substr(4,2) != "a8")
              break;
            return MCK_usada8;	 // "usada8"
          case 't':	 // 1 strings to match.
            if (Name.substr(4,2) != "16")
              break;
            return MCK_usat16;	 // "usat16"
          }
          break;
        case 'u':	 // 1 strings to match.
          if (Name.substr(3,3) != "b16")
            break;
          return MCK_usub16;	 // "usub16"
        }
        break;
      case 'x':	 // 1 strings to match.
        if (Name.substr(2,4) != "tb16")
          break;
        return MCK_uxtb16;	 // "uxtb16"
      }
      break;
    case 'v':	 // 15 strings to match.
      switch (Name[1]) {
      default: break;
      case 'a':	 // 1 strings to match.
        if (Name.substr(2,4) != "ddhn")
          break;
        return MCK_vaddhn;	 // "vaddhn"
      case 'p':	 // 2 strings to match.
        if (Name.substr(2,2) != "ad")
          break;
        switch (Name[4]) {
        default: break;
        case 'a':	 // 1 strings to match.
          if (Name[5] != 'l')
            break;
          return MCK_vpadal;	 // "vpadal"
        case 'd':	 // 1 strings to match.
          if (Name[5] != 'l')
            break;
          return MCK_vpaddl;	 // "vpaddl"
        }
        break;
      case 'q':	 // 4 strings to match.
        switch (Name[2]) {
        default: break;
        case 'm':	 // 1 strings to match.
          if (Name.substr(3,3) != "ovn")
            break;
          return MCK_vqmovn;	 // "vqmovn"
        case 'r':	 // 1 strings to match.
          if (Name.substr(3,3) != "shl")
            break;
          return MCK_vqrshl;	 // "vqrshl"
        case 's':	 // 2 strings to match.
          if (Name[3] != 'h')
            break;
          switch (Name[4]) {
          default: break;
          case 'l':	 // 1 strings to match.
            if (Name[5] != 'u')
              break;
            return MCK_vqshlu;	 // "vqshlu"
          case 'r':	 // 1 strings to match.
            if (Name[5] != 'n')
              break;
            return MCK_vqshrn;	 // "vqshrn"
          }
          break;
        }
        break;
      case 'r':	 // 7 strings to match.
        switch (Name[2]) {
        default: break;
        case 'e':	 // 5 strings to match.
          switch (Name[3]) {
          default: break;
          case 'c':	 // 2 strings to match.
            if (Name[4] != 'p')
              break;
            switch (Name[5]) {
            default: break;
            case 'e':	 // 1 strings to match.
              return MCK_vrecpe;	 // "vrecpe"
            case 's':	 // 1 strings to match.
              return MCK_vrecps;	 // "vrecps"
            }
            break;
          case 'v':	 // 3 strings to match.
            switch (Name[4]) {
            default: break;
            case '1':	 // 1 strings to match.
              if (Name[5] != '6')
                break;
              return MCK_vrev16;	 // "vrev16"
            case '3':	 // 1 strings to match.
              if (Name[5] != '2')
                break;
              return MCK_vrev32;	 // "vrev32"
            case '6':	 // 1 strings to match.
              if (Name[5] != '4')
                break;
              return MCK_vrev64;	 // "vrev64"
            }
            break;
          }
          break;
        case 'h':	 // 1 strings to match.
          if (Name.substr(3,3) != "add")
            break;
          return MCK_vrhadd;	 // "vrhadd"
        case 's':	 // 1 strings to match.
          if (Name.substr(3,3) != "hrn")
            break;
          return MCK_vrshrn;	 // "vrshrn"
        }
        break;
      case 's':	 // 1 strings to match.
        if (Name.substr(2,4) != "ubhn")
          break;
        return MCK_vsubhn;	 // "vsubhn"
      }
      break;
    }
    break;
  case 7:	 // 25 strings to match.
    switch (Name[0]) {
    default: break;
    case 's':	 // 9 strings to match.
      switch (Name[1]) {
      default: break;
      case 'h':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'a':	 // 1 strings to match.
          if (Name.substr(3,4) != "dd16")
            break;
          return MCK_shadd16;	 // "shadd16"
        case 's':	 // 1 strings to match.
          if (Name.substr(3,4) != "ub16")
            break;
          return MCK_shsub16;	 // "shsub16"
        }
        break;
      case 'm':	 // 6 strings to match.
        if (Name[2] != 'l')
          break;
        switch (Name[3]) {
        default: break;
        case 'a':	 // 5 strings to match.
          if (Name[4] != 'l')
            break;
          switch (Name[5]) {
          default: break;
          case 'b':	 // 2 strings to match.
            switch (Name[6]) {
            default: break;
            case 'b':	 // 1 strings to match.
              return MCK_smlalbb;	 // "smlalbb"
            case 't':	 // 1 strings to match.
              return MCK_smlalbt;	 // "smlalbt"
            }
            break;
          case 'd':	 // 1 strings to match.
            if (Name[6] != 'x')
              break;
            return MCK_smlaldx;	 // "smlaldx"
          case 't':	 // 2 strings to match.
            switch (Name[6]) {
            default: break;
            case 'b':	 // 1 strings to match.
              return MCK_smlaltb;	 // "smlaltb"
            case 't':	 // 1 strings to match.
              return MCK_smlaltt;	 // "smlaltt"
            }
            break;
          }
          break;
        case 's':	 // 1 strings to match.
          if (Name.substr(4,3) != "ldx")
            break;
          return MCK_smlsldx;	 // "smlsldx"
        }
        break;
      case 'x':	 // 1 strings to match.
        if (Name.substr(2,5) != "tab16")
          break;
        return MCK_sxtab16;	 // "sxtab16"
      }
      break;
    case 'u':	 // 5 strings to match.
      switch (Name[1]) {
      default: break;
      case 'h':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'a':	 // 1 strings to match.
          if (Name.substr(3,4) != "dd16")
            break;
          return MCK_uhadd16;	 // "uhadd16"
        case 's':	 // 1 strings to match.
          if (Name.substr(3,4) != "ub16")
            break;
          return MCK_uhsub16;	 // "uhsub16"
        }
        break;
      case 'q':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case 'a':	 // 1 strings to match.
          if (Name.substr(3,4) != "dd16")
            break;
          return MCK_uqadd16;	 // "uqadd16"
        case 's':	 // 1 strings to match.
          if (Name.substr(3,4) != "ub16")
            break;
          return MCK_uqsub16;	 // "uqsub16"
        }
        break;
      case 'x':	 // 1 strings to match.
        if (Name.substr(2,5) != "tab16")
          break;
        return MCK_uxtab16;	 // "uxtab16"
      }
      break;
    case 'v':	 // 11 strings to match.
      switch (Name[1]) {
      default: break;
      case 'q':	 // 7 strings to match.
        switch (Name[2]) {
        default: break;
        case 'd':	 // 4 strings to match.
          if (Name[3] != 'm')
            break;
          switch (Name[4]) {
          default: break;
          case 'l':	 // 2 strings to match.
            switch (Name[5]) {
            default: break;
            case 'a':	 // 1 strings to match.
              if (Name[6] != 'l')
                break;
              return MCK_vqdmlal;	 // "vqdmlal"
            case 's':	 // 1 strings to match.
              if (Name[6] != 'l')
                break;
              return MCK_vqdmlsl;	 // "vqdmlsl"
            }
            break;
          case 'u':	 // 2 strings to match.
            if (Name[5] != 'l')
              break;
            switch (Name[6]) {
            default: break;
            case 'h':	 // 1 strings to match.
              return MCK_vqdmulh;	 // "vqdmulh"
            case 'l':	 // 1 strings to match.
              return MCK_vqdmull;	 // "vqdmull"
            }
            break;
          }
          break;
        case 'm':	 // 1 strings to match.
          if (Name.substr(3,4) != "ovun")
            break;
          return MCK_vqmovun;	 // "vqmovun"
        case 'r':	 // 1 strings to match.
          if (Name.substr(3,4) != "shrn")
            break;
          return MCK_vqrshrn;	 // "vqrshrn"
        case 's':	 // 1 strings to match.
          if (Name.substr(3,4) != "hrun")
            break;
          return MCK_vqshrun;	 // "vqshrun"
        }
        break;
      case 'r':	 // 4 strings to match.
        switch (Name[2]) {
        default: break;
        case 'a':	 // 1 strings to match.
          if (Name.substr(3,4) != "ddhn")
            break;
          return MCK_vraddhn;	 // "vraddhn"
        case 's':	 // 3 strings to match.
          switch (Name[3]) {
          default: break;
          case 'q':	 // 2 strings to match.
            if (Name.substr(4,2) != "rt")
              break;
            switch (Name[6]) {
            default: break;
            case 'e':	 // 1 strings to match.
              return MCK_vrsqrte;	 // "vrsqrte"
            case 's':	 // 1 strings to match.
              return MCK_vrsqrts;	 // "vrsqrts"
            }
            break;
          case 'u':	 // 1 strings to match.
            if (Name.substr(4,3) != "bhn")
              break;
            return MCK_vrsubhn;	 // "vrsubhn"
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 8:	 // 3 strings to match.
    switch (Name[0]) {
    default: break;
    case 'T':	 // 1 strings to match.
      if (Name.substr(1,7) != "AILCALL")
        break;
      return MCK_TAILCALL;	 // "TAILCALL"
    case 'v':	 // 2 strings to match.
      if (Name.substr(1,2) != "qr")
        break;
      switch (Name[3]) {
      default: break;
      case 'd':	 // 1 strings to match.
        if (Name.substr(4,4) != "mulh")
          break;
        return MCK_vqrdmulh;	 // "vqrdmulh"
      case 's':	 // 1 strings to match.
        if (Name.substr(4,4) != "hrun")
          break;
        return MCK_vqrshrun;	 // "vqrshrun"
      }
      break;
    }
    break;
  case 9:	 // 1 strings to match.
    if (Name.substr(0,9) != "apsr_nzcv")
      break;
    return MCK_apsr_95_nzcv;	 // "apsr_nzcv"
  case 10:	 // 1 strings to match.
    if (Name.substr(0,10) != "@TC_RETURN")
      break;
    return MCK__64_TC_95_RETURN;	 // "@TC_RETURN"
  case 15:	 // 1 strings to match.
    if (Name.substr(0,15) != "__aeabi_read_tp")
      break;
    return MCK__95__95_aeabi_95_read_95_tp;	 // "__aeabi_read_tp"
  }
  return InvalidMatchClass;
}

static MatchClassKind ClassifyOperand(MCParsedAsmOperand *GOp) {
  ARMOperand &Operand = *(ARMOperand*)GOp;
  if (Operand.isToken())
    return MatchTokenString(Operand.getToken());

  if (Operand.isReg()) {
    switch (Operand.getReg()) {
    default: return InvalidMatchClass;
    case ARM::R0: return MCK_Reg0;
    case ARM::R1: return MCK_Reg0;
    case ARM::R2: return MCK_Reg0;
    case ARM::R3: return MCK_Reg0;
    case ARM::R4: return MCK_tGPR;
    case ARM::R5: return MCK_tGPR;
    case ARM::R6: return MCK_tGPR;
    case ARM::R7: return MCK_tGPR;
    case ARM::R8: return MCK_rGPR;
    case ARM::R9: return MCK_tcGPR;
    case ARM::R10: return MCK_rGPR;
    case ARM::R11: return MCK_rGPR;
    case ARM::R12: return MCK_tcGPR;
    case ARM::SP: return MCK_GPR;
    case ARM::LR: return MCK_rGPR;
    case ARM::PC: return MCK_GPR;
    case ARM::S0: return MCK_SPR_8;
    case ARM::S1: return MCK_SPR_8;
    case ARM::S2: return MCK_SPR_8;
    case ARM::S3: return MCK_SPR_8;
    case ARM::S4: return MCK_SPR_8;
    case ARM::S5: return MCK_SPR_8;
    case ARM::S6: return MCK_SPR_8;
    case ARM::S7: return MCK_SPR_8;
    case ARM::S8: return MCK_SPR_8;
    case ARM::S9: return MCK_SPR_8;
    case ARM::S10: return MCK_SPR_8;
    case ARM::S11: return MCK_SPR_8;
    case ARM::S12: return MCK_SPR_8;
    case ARM::S13: return MCK_SPR_8;
    case ARM::S14: return MCK_SPR_8;
    case ARM::S15: return MCK_SPR_8;
    case ARM::S16: return MCK_SPR;
    case ARM::S17: return MCK_SPR;
    case ARM::S18: return MCK_SPR;
    case ARM::S19: return MCK_SPR;
    case ARM::S20: return MCK_SPR;
    case ARM::S21: return MCK_SPR;
    case ARM::S22: return MCK_SPR;
    case ARM::S23: return MCK_SPR;
    case ARM::S24: return MCK_SPR;
    case ARM::S25: return MCK_SPR;
    case ARM::S26: return MCK_SPR;
    case ARM::S27: return MCK_SPR;
    case ARM::S28: return MCK_SPR;
    case ARM::S29: return MCK_SPR;
    case ARM::S30: return MCK_SPR;
    case ARM::S31: return MCK_SPR;
    case ARM::D0: return MCK_DPR_8;
    case ARM::D1: return MCK_DPR_8;
    case ARM::D2: return MCK_DPR_8;
    case ARM::D3: return MCK_DPR_8;
    case ARM::D4: return MCK_DPR_8;
    case ARM::D5: return MCK_DPR_8;
    case ARM::D6: return MCK_DPR_8;
    case ARM::D7: return MCK_DPR_8;
    case ARM::D8: return MCK_DPR_VFP2;
    case ARM::D9: return MCK_DPR_VFP2;
    case ARM::D10: return MCK_DPR_VFP2;
    case ARM::D11: return MCK_DPR_VFP2;
    case ARM::D12: return MCK_DPR_VFP2;
    case ARM::D13: return MCK_DPR_VFP2;
    case ARM::D14: return MCK_DPR_VFP2;
    case ARM::D15: return MCK_DPR_VFP2;
    case ARM::D16: return MCK_DPR;
    case ARM::D17: return MCK_DPR;
    case ARM::D18: return MCK_DPR;
    case ARM::D19: return MCK_DPR;
    case ARM::D20: return MCK_DPR;
    case ARM::D21: return MCK_DPR;
    case ARM::D22: return MCK_DPR;
    case ARM::D23: return MCK_DPR;
    case ARM::D24: return MCK_DPR;
    case ARM::D25: return MCK_DPR;
    case ARM::D26: return MCK_DPR;
    case ARM::D27: return MCK_DPR;
    case ARM::D28: return MCK_DPR;
    case ARM::D29: return MCK_DPR;
    case ARM::D30: return MCK_DPR;
    case ARM::D31: return MCK_DPR;
    case ARM::Q9: return MCK_QPR;
    case ARM::Q8: return MCK_QPR;
    case ARM::Q0: return MCK_QPR_8;
    case ARM::Q1: return MCK_QPR_8;
    case ARM::Q2: return MCK_QPR_8;
    case ARM::Q3: return MCK_QPR_8;
    case ARM::Q4: return MCK_QPR_VFP2;
    case ARM::Q5: return MCK_QPR_VFP2;
    case ARM::Q6: return MCK_QPR_VFP2;
    case ARM::Q7: return MCK_QPR_VFP2;
    case ARM::Q10: return MCK_QPR;
    case ARM::Q11: return MCK_QPR;
    case ARM::Q12: return MCK_QPR;
    case ARM::Q13: return MCK_QPR;
    case ARM::Q14: return MCK_QPR;
    case ARM::Q15: return MCK_QPR;
    case ARM::QQ0: return MCK_QQPR_VFP2;
    case ARM::QQ1: return MCK_QQPR_VFP2;
    case ARM::QQ2: return MCK_QQPR_VFP2;
    case ARM::QQ3: return MCK_QQPR_VFP2;
    case ARM::QQ4: return MCK_QQPR;
    case ARM::QQ5: return MCK_QQPR;
    case ARM::QQ6: return MCK_QQPR;
    case ARM::QQ7: return MCK_QQPR;
    case ARM::QQQQ0: return MCK_QQQQPR;
    case ARM::QQQQ1: return MCK_QQQQPR;
    case ARM::QQQQ2: return MCK_QQQQPR;
    case ARM::QQQQ3: return MCK_QQQQPR;
    case ARM::CPSR: return MCK_CCR;
    }
  }

  // 'CondCode' class
  if (Operand.isCondCode()) {
    return MCK_CondCode;
  }

  // 'Imm' class
  if (Operand.isImm()) {
    return MCK_Imm;
  }

  return InvalidMatchClass;
}

/// IsSubclass - Compute whether \arg A is a subclass of \arg B.
static bool IsSubclass(MatchClassKind A, MatchClassKind B) {
  if (A == B)
    return true;

  switch (A) {
  default:
    return false;

  case MCK_Reg0:
    switch (B) {
    default: return false;
    case MCK_tGPR: return true;
    case MCK_tcGPR: return true;
    case MCK_rGPR: return true;
    case MCK_GPR: return true;
    }

  case MCK_tGPR:
    switch (B) {
    default: return false;
    case MCK_rGPR: return true;
    case MCK_GPR: return true;
    }

  case MCK_tcGPR:
    switch (B) {
    default: return false;
    case MCK_rGPR: return true;
    case MCK_GPR: return true;
    }

  case MCK_rGPR:
    return B == MCK_GPR;

  case MCK_SPR_8:
    return B == MCK_SPR;

  case MCK_DPR_8:
    switch (B) {
    default: return false;
    case MCK_DPR_VFP2: return true;
    case MCK_DPR: return true;
    }

  case MCK_DPR_VFP2:
    return B == MCK_DPR;

  case MCK_QPR_8:
    switch (B) {
    default: return false;
    case MCK_QPR_VFP2: return true;
    case MCK_QPR: return true;
    }

  case MCK_QPR_VFP2:
    return B == MCK_QPR;

  case MCK_QQPR_VFP2:
    return B == MCK_QQPR;
  }
}

unsigned ARMAsmParser::
ComputeAvailableFeatures(const ARMSubtarget *Subtarget) const {
  unsigned Features = 0;
  return Features;
}

bool ARMAsmParser::
MatchInstructionImpl(const SmallVectorImpl<MCParsedAsmOperand*> &Operands,
                     MCInst &Inst) {
  static const struct MatchEntry {
    unsigned Opcode;
    ConversionKind ConvertFn;
    MatchClassKind Classes[12];
    unsigned RequiredFeatures;
  } MatchTable[1847] = {
    { ARM::CLREX, Convert, { MCK_clrex }, 0},
    { ARM::DMBsy, Convert, { MCK_dmb }, 0},
    { ARM::t2DMBsy, Convert, { MCK_dmb }, 0},
    { ARM::DSBsy, Convert, { MCK_dsb }, 0},
    { ARM::t2DSBsy, Convert, { MCK_dsb }, 0},
    { ARM::ISBsy, Convert, { MCK_isb }, 0},
    { ARM::TCRETURNri, Convert__Reg1_1, { MCK__64_TC_95_RETURN, MCK_tcGPR }, 0},
    { ARM::TCRETURNriND, Convert__Reg1_1, { MCK__64_TC_95_RETURN, MCK_tcGPR }, 0},
    { ARM::TCRETURNdi, Convert__Imm1_1, { MCK__64_TC_95_RETURN, MCK_Imm }, 0},
    { ARM::TCRETURNdiND, Convert__Imm1_1, { MCK__64_TC_95_RETURN, MCK_Imm }, 0},
    { ARM::B, Convert__Imm1_1, { MCK_b, MCK_Imm }, 0},
    { ARM::tB, Convert__Imm1_1, { MCK_b, MCK_Imm }, 0},
    { ARM::tBKPT, Convert__Imm1_1, { MCK_bkpt, MCK_Imm }, 0},
    { ARM::TPsoft, Convert, { MCK_bl, MCK__95__95_aeabi_95_read_95_tp }, 0},
    { ARM::t2TPsoft, Convert, { MCK_bl, MCK__95__95_aeabi_95_read_95_tp }, 0},
    { ARM::tTPsoft, Convert, { MCK_bl, MCK__95__95_aeabi_95_read_95_tp }, 0},
    { ARM::BLX, Convert__Reg1_1, { MCK_blx, MCK_GPR }, 0},
    { ARM::BLXr9, Convert__Reg1_1, { MCK_blx, MCK_GPR }, 0},
    { ARM::tBLXr, Convert__Reg1_1, { MCK_blx, MCK_GPR }, 0},
    { ARM::tBLXr_r9, Convert__Reg1_1, { MCK_blx, MCK_GPR }, 0},
    { ARM::tBX_RET, Convert, { MCK_bx, MCK_lr }, 0},
    { ARM::tBX_RET_vararg, Convert__Reg1_1, { MCK_bx, MCK_tGPR }, 0},
    { ARM::BRIND, Convert__Reg1_1, { MCK_bx, MCK_GPR }, 0},
    { ARM::t2CLREX, Convert__CondCode2_1, { MCK_clrex, MCK_CondCode }, 0},
    { ARM::CPS, Convert__Imm1_1, { MCK_cps, MCK_Imm }, 0},
    { ARM::t2CPS, Convert__Imm1_1, { MCK_cps, MCK_Imm }, 0},
    { ARM::tCPS, Convert__Imm1_1, { MCK_cps, MCK_Imm }, 0},
    { ARM::DMBvar, Convert__Imm1_1, { MCK_dmb, MCK_Imm }, 0},
    { ARM::DSBvar, Convert__Imm1_1, { MCK_dsb, MCK_Imm }, 0},
    { ARM::t2ISBsy, Convert__CondCode2_1, { MCK_isb, MCK_CondCode }, 0},
    { ARM::NOP, Convert__CondCode2_1, { MCK_nop, MCK_CondCode }, 0},
    { ARM::tNOP, Convert__CondCode2_1, { MCK_nop, MCK_CondCode }, 0},
    { ARM::PLDr, Convert__Imm3_1, { MCK_pld, MCK_Imm }, 0},
    { ARM::PLDWr, Convert__Imm3_1, { MCK_pldw, MCK_Imm }, 0},
    { ARM::PLIr, Convert__Imm3_1, { MCK_pli, MCK_Imm }, 0},
    { ARM::SETENDBE, Convert, { MCK_setend, MCK_be }, 0},
    { ARM::tSETENDBE, Convert, { MCK_setend, MCK_be }, 0},
    { ARM::SETENDLE, Convert, { MCK_setend, MCK_le }, 0},
    { ARM::tSETENDLE, Convert, { MCK_setend, MCK_le }, 0},
    { ARM::SEV, Convert__CondCode2_1, { MCK_sev, MCK_CondCode }, 0},
    { ARM::tSEV, Convert__CondCode2_1, { MCK_sev, MCK_CondCode }, 0},
    { ARM::WFE, Convert__CondCode2_1, { MCK_wfe, MCK_CondCode }, 0},
    { ARM::tWFE, Convert__CondCode2_1, { MCK_wfe, MCK_CondCode }, 0},
    { ARM::WFI, Convert__CondCode2_1, { MCK_wfi, MCK_CondCode }, 0},
    { ARM::tWFI, Convert__CondCode2_1, { MCK_wfi, MCK_CondCode }, 0},
    { ARM::YIELD, Convert__CondCode2_1, { MCK_yield, MCK_CondCode }, 0},
    { ARM::tYIELD, Convert__CondCode2_1, { MCK_yield, MCK_CondCode }, 0},
    { ARM::tADDrSP, Convert__Reg1_1__Tie0__Reg1_2, { MCK_add, MCK_GPR, MCK_GPR }, 0},
    { ARM::tADDspr, Convert__Reg1_1__Tie0__Reg1_2, { MCK_add, MCK_GPR, MCK_GPR }, 0},
    { ARM::tADDspi, Convert__Reg1_1__Tie0__Imm1_2, { MCK_add, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2B, Convert__Imm1_2, { MCK_b, MCK__46_w, MCK_Imm }, 0},
    { ARM::Bcc, Convert__Imm1_2__CondCode2_1, { MCK_b, MCK_CondCode, MCK_Imm }, 0},
    { ARM::tBcc, Convert__Imm1_2__CondCode2_1, { MCK_b, MCK_CondCode, MCK_Imm }, 0},
    { ARM::BKPT, Convert__Imm1_2__CondCode2_1, { MCK_bkpt, MCK_CondCode, MCK_Imm }, 0},
    { ARM::BX_RET, Convert__CondCode2_1, { MCK_bx, MCK_CondCode, MCK_lr }, 0},
    { ARM::t2BXJ, Convert__Reg1_2__CondCode2_1, { MCK_bxj, MCK_CondCode, MCK_rGPR }, 0},
    { ARM::BXJ, Convert__Reg1_2__CondCode2_1, { MCK_bxj, MCK_CondCode, MCK_GPR }, 0},
    { ARM::tCBNZ, Convert__Reg1_1__Imm1_2, { MCK_cbnz, MCK_tGPR, MCK_Imm }, 0},
    { ARM::tCBZ, Convert__Reg1_1__Imm1_2, { MCK_cbz, MCK_tGPR, MCK_Imm }, 0},
    { ARM::DBG, Convert__Imm1_2__CondCode2_1, { MCK_dbg, MCK_CondCode, MCK_Imm }, 0},
    { ARM::t2DBG, Convert__Imm1_2__CondCode2_1, { MCK_dbg, MCK_CondCode, MCK_Imm }, 0},
    { ARM::t2DMBish, Convert__CondCode2_1, { MCK_dmb, MCK_CondCode, MCK_ish }, 0},
    { ARM::t2DMBishst, Convert__CondCode2_1, { MCK_dmb, MCK_CondCode, MCK_ishst }, 0},
    { ARM::t2DMBnsh, Convert__CondCode2_1, { MCK_dmb, MCK_CondCode, MCK_nsh }, 0},
    { ARM::t2DMBnshst, Convert__CondCode2_1, { MCK_dmb, MCK_CondCode, MCK_nshst }, 0},
    { ARM::t2DMBosh, Convert__CondCode2_1, { MCK_dmb, MCK_CondCode, MCK_osh }, 0},
    { ARM::t2DMBoshst, Convert__CondCode2_1, { MCK_dmb, MCK_CondCode, MCK_oshst }, 0},
    { ARM::t2DMBst, Convert__CondCode2_1, { MCK_dmb, MCK_CondCode, MCK_st }, 0},
    { ARM::t2DSBish, Convert__CondCode2_1, { MCK_dsb, MCK_CondCode, MCK_ish }, 0},
    { ARM::t2DSBishst, Convert__CondCode2_1, { MCK_dsb, MCK_CondCode, MCK_ishst }, 0},
    { ARM::t2DSBnsh, Convert__CondCode2_1, { MCK_dsb, MCK_CondCode, MCK_nsh }, 0},
    { ARM::t2DSBnshst, Convert__CondCode2_1, { MCK_dsb, MCK_CondCode, MCK_nshst }, 0},
    { ARM::t2DSBosh, Convert__CondCode2_1, { MCK_dsb, MCK_CondCode, MCK_osh }, 0},
    { ARM::t2DSBoshst, Convert__CondCode2_1, { MCK_dsb, MCK_CondCode, MCK_oshst }, 0},
    { ARM::t2DSBst, Convert__CondCode2_1, { MCK_dsb, MCK_CondCode, MCK_st }, 0},
    { ARM::t2IT, Convert__Imm1_2__Imm1_1, { MCK_it, MCK_Imm, MCK_Imm }, 0},
    { ARM::MOVPCRX, Convert__Reg1_2, { MCK_mov, MCK_pc, MCK_GPR }, 0},
    { ARM::tBRIND, Convert__Reg1_2, { MCK_mov, MCK_pc, MCK_GPR }, 0},
    { ARM::tMOVr, Convert__Reg1_1__Reg1_2, { MCK_mov, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::tMOVgpr2tgpr, Convert__Reg1_1__Reg1_2, { MCK_mov, MCK_tGPR, MCK_GPR }, 0},
    { ARM::tMOVtgpr2gpr, Convert__Reg1_1__Reg1_2, { MCK_mov, MCK_GPR, MCK_tGPR }, 0},
    { ARM::tMOVgpr2gpr, Convert__Reg1_1__Reg1_2, { MCK_mov, MCK_GPR, MCK_GPR }, 0},
    { ARM::tMOVSr, Convert__Reg1_1__Reg1_2, { MCK_movs, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::t2NOP, Convert__CondCode2_1, { MCK_nop, MCK_CondCode, MCK__46_w }, 0},
    { ARM::tPOP, Convert__CondCode2_1__Imm1_2, { MCK_pop, MCK_CondCode, MCK_Imm }, 0},
    { ARM::tPOP_RET, Convert__CondCode2_1__Imm1_2, { MCK_pop, MCK_CondCode, MCK_Imm }, 0},
    { ARM::tPUSH, Convert__CondCode2_1__Imm1_2, { MCK_push, MCK_CondCode, MCK_Imm }, 0},
    { ARM::t2RFEDB, Convert__Reg1_2__CondCode2_1, { MCK_rfeab, MCK_CondCode, MCK_rGPR }, 0},
    { ARM::t2RFEIA, Convert__Reg1_2__CondCode2_1, { MCK_rfeia, MCK_CondCode, MCK_rGPR }, 0},
    { ARM::t2SEV, Convert__CondCode2_1, { MCK_sev, MCK_CondCode, MCK__46_w }, 0},
    { ARM::SMC, Convert__Imm1_2__CondCode2_1, { MCK_smc, MCK_CondCode, MCK_Imm }, 0},
    { ARM::t2SMC, Convert__Imm1_2__CondCode2_1, { MCK_smc, MCK_CondCode, MCK_Imm }, 0},
    { ARM::tSUBspi, Convert__Reg1_1__Tie0__Imm1_2, { MCK_sub, MCK_GPR, MCK_Imm }, 0},
    { ARM::SVC, Convert__Imm1_2__CondCode2_1, { MCK_svc, MCK_CondCode, MCK_Imm }, 0},
    { ARM::tSVC, Convert__Imm1_2__CondCode2_1, { MCK_svc, MCK_CondCode, MCK_Imm }, 0},
    { ARM::t2TBB, Convert__Imm1_1__Imm1_2__Imp, { MCK_tbb, MCK_Imm, MCK_Imm }, 0},
    { ARM::t2TBH, Convert__Imm1_1__Imm1_2__Imp, { MCK_tbh, MCK_Imm, MCK_Imm }, 0},
    { ARM::t2WFE, Convert__CondCode2_1, { MCK_wfe, MCK_CondCode, MCK__46_w }, 0},
    { ARM::t2WFI, Convert__CondCode2_1, { MCK_wfi, MCK_CondCode, MCK__46_w }, 0},
    { ARM::t2YIELD, Convert__CondCode2_1, { MCK_yield, MCK_CondCode, MCK__46_w }, 0},
    { ARM::ADCSSrr, Convert__Reg1_1__Reg1_2__Reg1_3, { MCK_adcs, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::ADCSSri, Convert__Reg1_1__Reg1_2__Imm1_3, { MCK_adcs, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::ADCSSrs, Convert__Reg1_1__Reg1_2__Imm3_3, { MCK_adcs, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::tADDrPCi, Convert__Reg1_1__Imm1_3, { MCK_add, MCK_tGPR, MCK_pc, MCK_Imm }, 0},
    { ARM::tADDrSPi, Convert__Reg1_1__Reg1_2__Imm1_3, { MCK_add, MCK_tGPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::tADDhirr, Convert__Reg1_2__Tie0__Reg1_3__CondCode2_1, { MCK_add, MCK_CondCode, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2Bcc, Convert__Imm1_3__CondCode2_1, { MCK_b, MCK_CondCode, MCK__46_w, MCK_Imm }, 0},
    { ARM::TAILJMPd, Convert__Imm1_1, { MCK_b, MCK_Imm, MCK__64_, MCK_TAILCALL }, 0},
    { ARM::TAILJMPdND, Convert__Imm1_1, { MCK_b, MCK_Imm, MCK__64_, MCK_TAILCALL }, 0},
    { ARM::t2BFC, Convert__Reg1_2__Tie0__Imm1_3__CondCode2_1, { MCK_bfc, MCK_CondCode, MCK_rGPR, MCK_Imm }, 0},
    { ARM::BFC, Convert__Reg1_2__Tie0__Imm1_3__CondCode2_1, { MCK_bfc, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::TAILJMPr, Convert__Reg1_1, { MCK_bx, MCK_tcGPR, MCK__64_, MCK_TAILCALL }, 0},
    { ARM::TAILJMPrND, Convert__Reg1_1, { MCK_bx, MCK_tcGPR, MCK__64_, MCK_TAILCALL }, 0},
    { ARM::t2CLZ, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_clz, MCK_CondCode, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::CLZ, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_clz, MCK_CondCode, MCK_GPR, MCK_GPR }, 0},
    { ARM::tCMNz, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_cmn, MCK_CondCode, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::CMNzrr, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_cmn, MCK_CondCode, MCK_GPR, MCK_GPR }, 0},
    { ARM::CMNzri, Convert__Reg1_2__Imm1_3__CondCode2_1, { MCK_cmn, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::CMNzrs, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_cmn, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::tCMPr, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_cmp, MCK_CondCode, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::tCMPzr, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_cmp, MCK_CondCode, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::tCMPi8, Convert__Reg1_2__Imm1_3__CondCode2_1, { MCK_cmp, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::tCMPzi8, Convert__Reg1_2__Imm1_3__CondCode2_1, { MCK_cmp, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::CMPrr, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_cmp, MCK_CondCode, MCK_GPR, MCK_GPR }, 0},
    { ARM::CMPzrr, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_cmp, MCK_CondCode, MCK_GPR, MCK_GPR }, 0},
    { ARM::tCMPhir, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_cmp, MCK_CondCode, MCK_GPR, MCK_GPR }, 0},
    { ARM::tCMPzhir, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_cmp, MCK_CondCode, MCK_GPR, MCK_GPR }, 0},
    { ARM::CMPri, Convert__Reg1_2__Imm1_3__CondCode2_1, { MCK_cmp, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::CMPrs, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_cmp, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::CMPzri, Convert__Reg1_2__Imm1_3__CondCode2_1, { MCK_cmp, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::CMPzrs, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_cmp, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::BR_JTm, Convert__Imm3_2__Imm1_3__Imp, { MCK_ldr, MCK_pc, MCK_Imm, MCK_Imm }, 0},
    { ARM::tLDR, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_ldr, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::tLDRcp, Convert__Reg1_2__Imm1_3__CondCode2_1, { MCK_ldr, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::tLDRi, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_ldr, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::tLDRspi, Convert__Reg1_2__Imm2_3__CondCode2_1, { MCK_ldr, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::tRestore, Convert__Reg1_2__Imm2_3__CondCode2_1, { MCK_ldr, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::LDR, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_ldr, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::LDRcp, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_ldr, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2LDRi8, Convert__Reg1_2__Imm2_3__CondCode2_1, { MCK_ldr, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::tLDRB, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_ldrb, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::tLDRBi, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_ldrb, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::LDRB, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_ldrb, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2LDRBi8, Convert__Reg1_2__Imm2_3__CondCode2_1, { MCK_ldrb, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2LDRBT, Convert__Reg1_2__Imm2_3__CondCode2_1, { MCK_ldrbt, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2LDRDi8, Convert__Reg1_2__Imp__Imm2_3__CondCode2_1, { MCK_ldrd, MCK_CondCode, MCK_rGPR, MCK_Imm }, 0},
    { ARM::t2LDRDpci, Convert__Reg1_2__Imp__Imm1_3__CondCode2_1, { MCK_ldrd, MCK_CondCode, MCK_rGPR, MCK_Imm }, 0},
    { ARM::LDRD, Convert__Reg1_2__Imp__Imm3_3__CondCode2_1, { MCK_ldrd, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::tLDRH, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_ldrh, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::tLDRHi, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_ldrh, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::LDRH, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_ldrh, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2LDRHi8, Convert__Reg1_2__Imm2_3__CondCode2_1, { MCK_ldrh, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2LDRHT, Convert__Reg1_2__Imm2_3__CondCode2_1, { MCK_ldrht, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::tLDRSB, Convert__Reg1_2__Imm2_3__CondCode2_1, { MCK_ldrsb, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::LDRSB, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_ldrsb, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2LDRSBi8, Convert__Reg1_2__Imm2_3__CondCode2_1, { MCK_ldrsb, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2LDRSBT, Convert__Reg1_2__Imm2_3__CondCode2_1, { MCK_ldrsbt, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::tLDRSH, Convert__Reg1_2__Imm2_3__CondCode2_1, { MCK_ldrsh, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::LDRSH, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_ldrsh, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2LDRSHi8, Convert__Reg1_2__Imm2_3__CondCode2_1, { MCK_ldrsh, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2LDRSHT, Convert__Reg1_2__Imm2_3__CondCode2_1, { MCK_ldrsht, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2LDRT, Convert__Reg1_2__Imm2_3__CondCode2_1, { MCK_ldrt, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::BR_JTr, Convert__Reg1_2__Imm1_3__Imp, { MCK_mov, MCK_pc, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2BR_JT, Convert__Reg1_2__Imp__Imm1_3__Imp, { MCK_mov, MCK_pc, MCK_GPR, MCK_Imm }, 0},
    { ARM::MOVPCLR, Convert__CondCode2_1, { MCK_mov, MCK_CondCode, MCK_pc, MCK_lr }, 0},
    { ARM::tMOVCCi, Convert__Reg1_2__Tie0__Imm1_3__CondCode2_1, { MCK_mov, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::MOVCCr, Convert__Reg1_2__Tie0__Reg1_3__CondCode2_1, { MCK_mov, MCK_CondCode, MCK_GPR, MCK_GPR }, 0},
    { ARM::tMOVCCr, Convert__Reg1_2__Tie0__Reg1_3__CondCode2_1, { MCK_mov, MCK_CondCode, MCK_GPR, MCK_GPR }, 0},
    { ARM::MOVCCi, Convert__Reg1_2__Tie0__Imm1_3__CondCode2_1, { MCK_mov, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::MOVCCs, Convert__Reg1_2__Tie0__Imm3_3__CondCode2_1, { MCK_mov, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::MOVi2pieces, Convert__Reg1_2__Imm1_3__CondCode2_1, { MCK_mov, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2MOVTi16, Convert__Reg1_2__Tie0__Imm1_3__CondCode2_1, { MCK_movt, MCK_CondCode, MCK_rGPR, MCK_Imm }, 0},
    { ARM::MOVTi16, Convert__Reg1_2__Tie0__Imm1_3__CondCode2_1, { MCK_movt, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2MOVi16, Convert__Reg1_2__Imm1_3__CondCode2_1, { MCK_movw, MCK_CondCode, MCK_rGPR, MCK_Imm }, 0},
    { ARM::MOVi16, Convert__Reg1_2__Imm1_3__CondCode2_1, { MCK_movw, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2MRS, Convert__Reg1_2__CondCode2_1, { MCK_mrs, MCK_CondCode, MCK_rGPR, MCK_cpsr }, 0},
    { ARM::t2MRSsys, Convert__Reg1_2__CondCode2_1, { MCK_mrs, MCK_CondCode, MCK_rGPR, MCK_spsr }, 0},
    { ARM::MRS, Convert__Reg1_2__CondCode2_1, { MCK_mrs, MCK_CondCode, MCK_GPR, MCK_cpsr }, 0},
    { ARM::MRSsys, Convert__Reg1_2__CondCode2_1, { MCK_mrs, MCK_CondCode, MCK_GPR, MCK_spsr }, 0},
    { ARM::t2RBIT, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_rbit, MCK_CondCode, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::RBIT, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_rbit, MCK_CondCode, MCK_GPR, MCK_GPR }, 0},
    { ARM::tREV, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_rev, MCK_CondCode, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::REV, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_rev, MCK_CondCode, MCK_GPR, MCK_GPR }, 0},
    { ARM::tREV16, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_rev16, MCK_CondCode, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::REV16, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_rev16, MCK_CondCode, MCK_GPR, MCK_GPR }, 0},
    { ARM::tREVSH, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_revsh, MCK_CondCode, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::REVSH, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_revsh, MCK_CondCode, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2RFEDBW, Convert__Reg1_2__CondCode2_1, { MCK_rfedb, MCK_CondCode, MCK_rGPR, MCK__33_ }, 0},
    { ARM::t2RFEIAW, Convert__Reg1_2__CondCode2_1, { MCK_rfeia, MCK_CondCode, MCK_rGPR, MCK__33_ }, 0},
    { ARM::RSCSri, Convert__Reg1_1__Reg1_2__Imm1_3, { MCK_rscs, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::RSCSrs, Convert__Reg1_1__Reg1_2__Imm3_3, { MCK_rscs, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::SBCSSrr, Convert__Reg1_1__Reg1_2__Reg1_3, { MCK_sbcs, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::SBCSSri, Convert__Reg1_1__Reg1_2__Imm1_3, { MCK_sbcs, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::SBCSSrs, Convert__Reg1_1__Reg1_2__Imm3_3, { MCK_sbcs, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2SRSDB, Convert__Imm1_3__CondCode2_1, { MCK_srsdb, MCK_CondCode, MCK_sp, MCK_Imm }, 0},
    { ARM::t2SRSIA, Convert__Imm1_3__CondCode2_1, { MCK_srsia, MCK_CondCode, MCK_sp, MCK_Imm }, 0},
    { ARM::tSTR, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_str, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::tSTRi, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_str, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::tSTRspi, Convert__Reg1_2__Imm2_3__CondCode2_1, { MCK_str, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::tSpill, Convert__Reg1_2__Imm2_3__CondCode2_1, { MCK_str, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::STR, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_str, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2STRi8, Convert__Reg1_2__Imm2_3__CondCode2_1, { MCK_str, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::tSTRB, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_strb, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::tSTRBi, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_strb, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::STRB, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_strb, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2STRBi8, Convert__Reg1_2__Imm2_3__CondCode2_1, { MCK_strb, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2STRBT, Convert__Reg1_2__Imm2_3__CondCode2_1, { MCK_strbt, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::STRD, Convert__Reg1_2__Imp__Imm3_3__CondCode2_1, { MCK_strd, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2STRDi8, Convert__Reg1_2__Imp__Imm2_3__CondCode2_1, { MCK_strd, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::tSTRH, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_strh, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::tSTRHi, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_strh, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::STRH, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_strh, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2STRHi8, Convert__Reg1_2__Imm2_3__CondCode2_1, { MCK_strh, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2STRHT, Convert__Reg1_2__Imm2_3__CondCode2_1, { MCK_strht, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2STRT, Convert__Reg1_2__Imm2_3__CondCode2_1, { MCK_strt, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::tSXTB, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_sxtb, MCK_CondCode, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::SXTBr, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_sxtb, MCK_CondCode, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SXTB16r, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_sxtb16, MCK_CondCode, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SXTB16r, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_sxtb16, MCK_CondCode, MCK_GPR, MCK_GPR }, 0},
    { ARM::tSXTH, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_sxth, MCK_CondCode, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::SXTHr, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_sxth, MCK_CondCode, MCK_GPR, MCK_GPR }, 0},
    { ARM::TEQrr, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_teq, MCK_CondCode, MCK_GPR, MCK_GPR }, 0},
    { ARM::TEQri, Convert__Reg1_2__Imm1_3__CondCode2_1, { MCK_teq, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::TEQrs, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_teq, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::tTST, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_tst, MCK_CondCode, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::TSTrr, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_tst, MCK_CondCode, MCK_GPR, MCK_GPR }, 0},
    { ARM::TSTri, Convert__Reg1_2__Imm1_3__CondCode2_1, { MCK_tst, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::TSTrs, Convert__Reg1_2__Imm3_3__CondCode2_1, { MCK_tst, MCK_CondCode, MCK_GPR, MCK_Imm }, 0},
    { ARM::tUXTB, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_uxtb, MCK_CondCode, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::UXTBr, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_uxtb, MCK_CondCode, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2UXTB16r, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_uxtb16, MCK_CondCode, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::UXTB16r, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_uxtb16, MCK_CondCode, MCK_GPR, MCK_GPR }, 0},
    { ARM::tUXTH, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_uxth, MCK_CondCode, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::UXTHr, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_uxth, MCK_CondCode, MCK_GPR, MCK_GPR }, 0},
    { ARM::VMOVRS, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK_GPR, MCK_SPR }, 0},
    { ARM::VMOVSR, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK_SPR, MCK_GPR }, 0},
    { ARM::VMOVDneon, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMOVQ, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK_QPR, MCK_QPR }, 0},
    { ARM::FMSTAT, Convert__CondCode2_1, { MCK_vmrs, MCK_CondCode, MCK_apsr_95_nzcv, MCK_fpscr }, 0},
    { ARM::VMRS, Convert__Reg1_2__CondCode2_1, { MCK_vmrs, MCK_CondCode, MCK_GPR, MCK_fpscr }, 0},
    { ARM::VMSR, Convert__Reg1_3__CondCode2_1, { MCK_vmsr, MCK_CondCode, MCK_fpscr, MCK_GPR }, 0},
    { ARM::VMVNd, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_vmvn, MCK_CondCode, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMVNq, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_vmvn, MCK_CondCode, MCK_QPR, MCK_QPR }, 0},
    { ARM::VSWPd, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_vswp, MCK_CondCode, MCK_DPR, MCK_DPR }, 0},
    { ARM::VSWPq, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_vswp, MCK_CondCode, MCK_QPR, MCK_QPR }, 0},
    { ARM::tADC, Convert__Reg1_3__Imm1_1__Tie0__Reg1_4__CondCode2_2, { MCK_adc, MCK_Imm, MCK_CondCode, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::BR_JTadd, Convert__Reg1_2__Reg1_3__Imm1_4__Imp, { MCK_add, MCK_pc, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::tADDi8, Convert__Reg1_3__Imm1_1__Tie0__Imm1_4__CondCode2_2, { MCK_add, MCK_Imm, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::ADDSrr, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_adds, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::ADDSri, Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1, { MCK_adds, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::ADDSrs, Convert__Reg1_2__Reg1_3__Imm3_4__CondCode2_1, { MCK_adds, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2ADDri12, Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1, { MCK_addw, MCK_CondCode, MCK_rGPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2ADDrSPi12, Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1, { MCK_addw, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::tLEApcrel, Convert__Reg1_2__Imm1_4__CondCode2_1, { MCK_adr, MCK_CondCode, MCK_tGPR, MCK__35_, MCK_Imm }, 0},
    { ARM::LEApcrel, Convert__Reg1_2__Imm1_4__CondCode2_1, { MCK_adr, MCK_CondCode, MCK_GPR, MCK__35_, MCK_Imm }, 0},
    { ARM::ANDSrr, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_and, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::ANDSri, Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1, { MCK_and, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::ANDSrs, Convert__Reg1_2__Reg1_3__Imm3_4__CondCode2_1, { MCK_and, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::tAND, Convert__Reg1_3__Imm1_1__Tie0__Reg1_4__CondCode2_2, { MCK_and, MCK_Imm, MCK_CondCode, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::tASRrr, Convert__Reg1_3__Imm1_1__Tie0__Reg1_4__CondCode2_2, { MCK_asr, MCK_Imm, MCK_CondCode, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::TAILJMPdNDt, Convert__Imm1_2, { MCK_b, MCK__46_w, MCK_Imm, MCK__64_, MCK_TAILCALL }, 0},
    { ARM::TAILJMPdt, Convert__Imm1_2, { MCK_b, MCK__46_w, MCK_Imm, MCK__64_, MCK_TAILCALL }, 0},
    { ARM::t2BFI, Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_1, { MCK_bfi, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::BFI, Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_1, { MCK_bfi, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::tBIC, Convert__Reg1_3__Imm1_1__Tie0__Reg1_4__CondCode2_2, { MCK_bic, MCK_Imm, MCK_CondCode, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::t2CMNzrr, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_cmn, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_rGPR }, 0},
    { ARM::t2CMNzri, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_cmn, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2CMNzrs, Convert__Reg1_3__Imm2_4__CondCode2_1, { MCK_cmn, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2CMPrr, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_cmp, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_rGPR }, 0},
    { ARM::t2CMPzrr, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_cmp, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_rGPR }, 0},
    { ARM::t2CMPri, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_cmp, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2CMPrs, Convert__Reg1_3__Imm2_4__CondCode2_1, { MCK_cmp, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2CMPzri, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_cmp, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2CMPzrs, Convert__Reg1_3__Imm2_4__CondCode2_1, { MCK_cmp, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::tEOR, Convert__Reg1_3__Imm1_1__Tie0__Reg1_4__CondCode2_2, { MCK_eor, MCK_Imm, MCK_CondCode, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::tLDRpci, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_ldr, MCK_CondCode, MCK__46_n, MCK_tGPR, MCK_Imm }, 0},
    { ARM::t2LDRi12, Convert__Reg1_3__Imm2_4__CondCode2_1, { MCK_ldr, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2LDRpci, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_ldr, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2LDRs, Convert__Reg1_3__Imm3_4__CondCode2_1, { MCK_ldr, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::LDR_PRE, Convert__Reg1_2__Reg1_3__Tie1__Imp__Imp__CondCode2_1, { MCK_ldr, MCK_CondCode, MCK_GPR, MCK_GPR, MCK__33_ }, 0},
    { ARM::t2LDR_PRE, Convert__Reg1_2__Reg1_3__Tie1__Imp__CondCode2_1, { MCK_ldr, MCK_CondCode, MCK_GPR, MCK_GPR, MCK__33_ }, 0},
    { ARM::t2LDRBi12, Convert__Reg1_3__Imm2_4__CondCode2_1, { MCK_ldrb, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2LDRBpci, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_ldrb, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2LDRBs, Convert__Reg1_3__Imm3_4__CondCode2_1, { MCK_ldrb, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::LDRB_PRE, Convert__Reg1_2__Reg1_3__Tie1__Imp__Imp__CondCode2_1, { MCK_ldrb, MCK_CondCode, MCK_GPR, MCK_GPR, MCK__33_ }, 0},
    { ARM::t2LDRB_PRE, Convert__Reg1_2__Reg1_3__Tie1__Imp__CondCode2_1, { MCK_ldrb, MCK_CondCode, MCK_GPR, MCK_GPR, MCK__33_ }, 0},
    { ARM::t2LDRHi12, Convert__Reg1_3__Imm2_4__CondCode2_1, { MCK_ldrh, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2LDRHpci, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_ldrh, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2LDRHs, Convert__Reg1_3__Imm3_4__CondCode2_1, { MCK_ldrh, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::LDRH_PRE, Convert__Reg1_2__Reg1_3__Tie1__Imp__Imp__CondCode2_1, { MCK_ldrh, MCK_CondCode, MCK_GPR, MCK_GPR, MCK__33_ }, 0},
    { ARM::t2LDRH_PRE, Convert__Reg1_2__Reg1_3__Tie1__Imp__CondCode2_1, { MCK_ldrh, MCK_CondCode, MCK_GPR, MCK_GPR, MCK__33_ }, 0},
    { ARM::t2LDRSBi12, Convert__Reg1_3__Imm2_4__CondCode2_1, { MCK_ldrsb, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2LDRSBpci, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_ldrsb, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2LDRSBs, Convert__Reg1_3__Imm3_4__CondCode2_1, { MCK_ldrsb, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::LDRSB_PRE, Convert__Reg1_2__Reg1_3__Tie1__Imp__Imp__CondCode2_1, { MCK_ldrsb, MCK_CondCode, MCK_GPR, MCK_GPR, MCK__33_ }, 0},
    { ARM::t2LDRSB_PRE, Convert__Reg1_2__Reg1_3__Tie1__Imp__CondCode2_1, { MCK_ldrsb, MCK_CondCode, MCK_GPR, MCK_GPR, MCK__33_ }, 0},
    { ARM::t2LDRSHi12, Convert__Reg1_3__Imm2_4__CondCode2_1, { MCK_ldrsh, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2LDRSHpci, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_ldrsh, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2LDRSHs, Convert__Reg1_3__Imm3_4__CondCode2_1, { MCK_ldrsh, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::LDRSH_PRE, Convert__Reg1_2__Reg1_3__Tie1__Imp__Imp__CondCode2_1, { MCK_ldrsh, MCK_CondCode, MCK_GPR, MCK_GPR, MCK__33_ }, 0},
    { ARM::t2LDRSH_PRE, Convert__Reg1_2__Reg1_3__Tie1__Imp__CondCode2_1, { MCK_ldrsh, MCK_CondCode, MCK_GPR, MCK_GPR, MCK__33_ }, 0},
    { ARM::tLSLrr, Convert__Reg1_3__Imm1_1__Tie0__Reg1_4__CondCode2_2, { MCK_lsl, MCK_Imm, MCK_CondCode, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::tLSRrr, Convert__Reg1_3__Imm1_1__Tie0__Reg1_4__CondCode2_2, { MCK_lsr, MCK_Imm, MCK_CondCode, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::t2MOVCCr, Convert__Reg1_3__Tie0__Reg1_4__CondCode2_1, { MCK_mov, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2MOVCCi, Convert__Reg1_3__Tie0__Imm1_4__CondCode2_1, { MCK_mov, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_Imm }, 0},
    { ARM::MOVr_TC, Convert__Reg1_3__Reg1_4__CondCode2_1__Imm1_2, { MCK_mov, MCK_CondCode, MCK_Imm, MCK_tcGPR, MCK_tcGPR }, 0},
    { ARM::MOVr, Convert__Reg1_3__Reg1_4__CondCode2_1__Imm1_2, { MCK_mov, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR }, 0},
    { ARM::MOVi, Convert__Reg1_3__Imm1_4__CondCode2_1__Imm1_2, { MCK_mov, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_Imm }, 0},
    { ARM::MOVs, Convert__Reg1_3__Imm3_4__CondCode2_1__Imm1_2, { MCK_mov, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_Imm }, 0},
    { ARM::tMOVi8, Convert__Reg1_3__Imm1_1__Imm1_4__CondCode2_2, { MCK_mov, MCK_Imm, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::t2MSR, Convert__Reg1_4__Imm1_3__CondCode2_1, { MCK_msr, MCK_CondCode, MCK_cpsr, MCK_Imm, MCK_rGPR }, 0},
    { ARM::MSR, Convert__Reg1_4__Imm1_3__CondCode2_1, { MCK_msr, MCK_CondCode, MCK_cpsr, MCK_Imm, MCK_GPR }, 0},
    { ARM::MSRi, Convert__Imm1_4__Imm1_3__CondCode2_1, { MCK_msr, MCK_CondCode, MCK_cpsr, MCK_Imm, MCK_Imm }, 0},
    { ARM::t2MSRsys, Convert__Reg1_4__Imm1_3__CondCode2_1, { MCK_msr, MCK_CondCode, MCK_spsr, MCK_Imm, MCK_rGPR }, 0},
    { ARM::MSRsys, Convert__Reg1_4__Imm1_3__CondCode2_1, { MCK_msr, MCK_CondCode, MCK_spsr, MCK_Imm, MCK_GPR }, 0},
    { ARM::MSRsysi, Convert__Imm1_4__Imm1_3__CondCode2_1, { MCK_msr, MCK_CondCode, MCK_spsr, MCK_Imm, MCK_Imm }, 0},
    { ARM::t2MUL, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_mul, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::MVNr, Convert__Reg1_3__Reg1_4__CondCode2_1__Imm1_2, { MCK_mvn, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR }, 0},
    { ARM::MVNi, Convert__Reg1_3__Imm1_4__CondCode2_1__Imm1_2, { MCK_mvn, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_Imm }, 0},
    { ARM::MVNs, Convert__Reg1_3__Imm3_4__CondCode2_1__Imm1_2, { MCK_mvn, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_Imm }, 0},
    { ARM::tMVN, Convert__Reg1_3__Imm1_1__Reg1_4__CondCode2_2, { MCK_mvn, MCK_Imm, MCK_CondCode, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::t2MVNi, Convert__Reg1_3__Imm1_4__CondCode2_2__Imm1_1, { MCK_mvn, MCK_Imm, MCK_CondCode, MCK_rGPR, MCK_Imm }, 0},
    { ARM::tORR, Convert__Reg1_3__Imm1_1__Tie0__Reg1_4__CondCode2_2, { MCK_orr, MCK_Imm, MCK_CondCode, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::PLDi, Convert__Reg1_2__Imm1_3, { MCK_pld, MCK__91_, MCK_GPR, MCK_Imm, MCK__93_ }, 0},
    { ARM::PLDWi, Convert__Reg1_2__Imm1_3, { MCK_pldw, MCK__91_, MCK_GPR, MCK_Imm, MCK__93_ }, 0},
    { ARM::PLIi, Convert__Reg1_2__Imm1_3, { MCK_pli, MCK__91_, MCK_GPR, MCK_Imm, MCK__93_ }, 0},
    { ARM::t2QADD, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_qadd, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::QADD, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_qadd, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2QADD16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_qadd16, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::QADD16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_qadd16, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2QADD8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_qadd8, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::QADD8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_qadd8, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2QASX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_qasx, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::QASX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_qasx, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2QDADD, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_qdadd, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::QDADD, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_qdadd, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2QDSUB, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_qdsub, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::QDSUB, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_qdsub, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2QSAX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_qsax, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::QSAX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_qsax, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2QSUB, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_qsub, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::QSUB, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_qsub, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2QSUB16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_qsub16, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::QSUB16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_qsub16, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2QSUB8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_qsub8, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::QSUB8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_qsub8, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2REV, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_rev, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2REV16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_rev16, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2REVSH, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_revsh, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::tROR, Convert__Reg1_3__Imm1_1__Tie0__Reg1_4__CondCode2_2, { MCK_ror, MCK_Imm, MCK_CondCode, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::t2MOVrx, Convert__Reg1_3__Reg1_4__CondCode2_2__Imm1_1, { MCK_rrx, MCK_Imm, MCK_CondCode, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2RSBSrs, Convert__Reg1_2__Reg1_3__Imm2_4__CondCode2_1, { MCK_rsbs, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::RSBSri, Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1, { MCK_rsbs, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::RSBSrs, Convert__Reg1_2__Reg1_3__Imm3_4__CondCode2_1, { MCK_rsbs, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2SADD16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_sadd16, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SADD16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_sadd16, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SADD8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_sadd8, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SADD8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_sadd8, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SASX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_sasx, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SASX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_sasx, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::tSBC, Convert__Reg1_3__Imm1_1__Tie0__Reg1_4__CondCode2_2, { MCK_sbc, MCK_Imm, MCK_CondCode, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::t2SDIV, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_sdiv, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SEL, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_sel, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SEL, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_sel, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SHADD16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_shadd16, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SHADD16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_shadd16, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SHADD8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_shadd8, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SHADD8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_shadd8, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SHASX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_shasx, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SHASX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_shasx, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SHSAX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_shsax, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SHSAX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_shsax, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SHSUB16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_shsub16, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SHSUB16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_shsub16, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SHSUB8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_shsub8, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SHSUB8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_shsub8, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMMUL, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smmul, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMMUL, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smmul, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMMULR, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smmulr, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMMULR, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smmulr, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMUAD, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smuad, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMUAD, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smuad, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMUADX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smuadx, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMUADX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smuadx, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMULBB, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smulbb, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMULBB, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smulbb, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMULBT, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smulbt, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMULBT, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smulbt, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMULTB, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smultb, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMULTB, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smultb, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMULTT, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smultt, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMULTT, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smultt, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMULWB, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smulwb, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMULWB, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smulwb, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMULWT, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smulwt, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMULWT, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smulwt, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMUSD, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smusd, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMUSD, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smusd, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMUSDX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smusdx, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMUSDX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_smusdx, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SRSDBW, Convert__Imm1_4__CondCode2_1, { MCK_srsdb, MCK_CondCode, MCK_sp, MCK__33_, MCK_Imm }, 0},
    { ARM::t2SRSIAW, Convert__Imm1_4__CondCode2_1, { MCK_srsia, MCK_CondCode, MCK_sp, MCK__33_, MCK_Imm }, 0},
    { ARM::t2SSAT16, Convert__Reg1_2__Imm1_3__Reg1_4__CondCode2_1, { MCK_ssat16, MCK_CondCode, MCK_rGPR, MCK_Imm, MCK_rGPR }, 0},
    { ARM::SSAT16, Convert__Reg1_2__Imm1_3__Reg1_4__CondCode2_1, { MCK_ssat16, MCK_CondCode, MCK_GPR, MCK_Imm, MCK_GPR }, 0},
    { ARM::t2SSAX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_ssax, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SSAX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_ssax, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SSUB16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_ssub16, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SSUB16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_ssub16, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SSUB8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_ssub8, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SSUB8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_ssub8, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2STRi12, Convert__Reg1_3__Imm2_4__CondCode2_1, { MCK_str, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2STRs, Convert__Reg1_3__Imm3_4__CondCode2_1, { MCK_str, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2STRBi12, Convert__Reg1_3__Imm2_4__CondCode2_1, { MCK_strb, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2STRBs, Convert__Reg1_3__Imm3_4__CondCode2_1, { MCK_strb, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2STRHi12, Convert__Reg1_3__Imm2_4__CondCode2_1, { MCK_strh, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2STRHs, Convert__Reg1_3__Imm3_4__CondCode2_1, { MCK_strh, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::tSUBi8, Convert__Reg1_3__Imm1_1__Tie0__Imm1_4__CondCode2_2, { MCK_sub, MCK_Imm, MCK_CondCode, MCK_tGPR, MCK_Imm }, 0},
    { ARM::SUBSrr, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_subs, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::SUBSri, Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1, { MCK_subs, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::SUBSrs, Convert__Reg1_2__Reg1_3__Imm3_4__CondCode2_1, { MCK_subs, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2SUBri12, Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1, { MCK_subw, MCK_CondCode, MCK_rGPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2SUBrSPi12, Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1, { MCK_subw, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2SXTABrr, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_sxtab, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SXTABrr, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_sxtab, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SXTAB16rr, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_sxtab16, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SXTAB16rr, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_sxtab16, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SXTAHrr, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_sxtah, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SXTAHrr, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_sxtah, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SXTBr, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_sxtb, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2SXTHr, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_sxth, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2TEQrr, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_teq, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_rGPR }, 0},
    { ARM::t2TEQri, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_teq, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2TEQrs, Convert__Reg1_3__Imm2_4__CondCode2_1, { MCK_teq, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2TSTrr, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_tst, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_rGPR }, 0},
    { ARM::t2TSTri, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_tst, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2TSTrs, Convert__Reg1_3__Imm2_4__CondCode2_1, { MCK_tst, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2UADD16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uadd16, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::UADD16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uadd16, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2UADD8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uadd8, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::UADD8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uadd8, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2UASX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uasx, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::UASX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uasx, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2UDIV, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_udiv, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2UHADD16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uhadd16, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::UHADD16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uhadd16, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2UHADD8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uhadd8, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::UHADD8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uhadd8, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2UHASX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uhasx, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::UHASX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uhasx, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2UHSAX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uhsax, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::UHSAX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uhsax, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2UHSUB16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uhsub16, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::UHSUB16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uhsub16, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2UHSUB8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uhsub8, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::UHSUB8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uhsub8, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2UQADD16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uqadd16, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::UQADD16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uqadd16, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2UQADD8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uqadd8, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::UQADD8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uqadd8, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2UQASX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uqasx, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::UQASX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uqasx, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2UQSAX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uqsax, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::UQSAX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uqsax, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2UQSUB16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uqsub16, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::UQSUB16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uqsub16, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2UQSUB8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uqsub8, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::UQSUB8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uqsub8, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2USAD8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_usad8, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::USAD8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_usad8, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2USAT16, Convert__Reg1_2__Imm1_3__Reg1_4__CondCode2_1, { MCK_usat16, MCK_CondCode, MCK_rGPR, MCK_Imm, MCK_rGPR }, 0},
    { ARM::USAT16, Convert__Reg1_2__Imm1_3__Reg1_4__CondCode2_1, { MCK_usat16, MCK_CondCode, MCK_GPR, MCK_Imm, MCK_GPR }, 0},
    { ARM::t2USAX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_usax, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::USAX, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_usax, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2USUB16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_usub16, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::USUB16, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_usub16, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2USUB8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_usub8, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::USUB8, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_usub8, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2UXTABrr, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uxtab, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::UXTABrr, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uxtab, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2UXTAB16rr, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uxtab16, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::UXTAB16rr, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uxtab16, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2UXTAHrr, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uxtah, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::UXTAHrr, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_uxtah, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2UXTBr, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_uxtb, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2UXTHr, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_uxth, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::VABSS, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vabs, MCK_CondCode, MCK__46_f32, MCK_SPR, MCK_SPR }, 0},
    { ARM::VABSfd_sfp, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vabs, MCK_CondCode, MCK__46_f32, MCK_DPR_VFP2, MCK_DPR_VFP2 }, 0},
    { ARM::VABSfd, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vabs, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABSfq, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vabs, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VABSD, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vabs, MCK_CondCode, MCK__46_f64, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABSv4i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vabs, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABSv8i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vabs, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR }, 0},
    { ARM::VABSv2i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vabs, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABSv4i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vabs, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VABSv8i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vabs, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABSv16i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vabs, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR }, 0},
    { ARM::VANDd, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_vand, MCK_CondCode, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VANDq, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_vand, MCK_CondCode, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VBICd, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_vbic, MCK_CondCode, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VBICq, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_vbic, MCK_CondCode, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VBIFd, Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_1, { MCK_vbif, MCK_CondCode, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VBIFq, Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_1, { MCK_vbif, MCK_CondCode, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VBITd, Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_1, { MCK_vbit, MCK_CondCode, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VBITq, Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_1, { MCK_vbit, MCK_CondCode, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VBSLd, Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_1, { MCK_vbsl, MCK_CondCode, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VBSLq, Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_1, { MCK_vbsl, MCK_CondCode, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCLSv4i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcls, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCLSv8i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcls, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCLSv2i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcls, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCLSv4i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcls, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCLSv8i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcls, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCLSv16i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcls, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCLZv4i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vclz, MCK_CondCode, MCK__46_i16, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCLZv8i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vclz, MCK_CondCode, MCK__46_i16, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCLZv2i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vclz, MCK_CondCode, MCK__46_i32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCLZv4i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vclz, MCK_CondCode, MCK__46_i32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCLZv8i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vclz, MCK_CondCode, MCK__46_i8, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCLZv16i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vclz, MCK_CondCode, MCK__46_i8, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCMPZS, Convert__Reg1_3__CondCode2_1, { MCK_vcmp, MCK_CondCode, MCK__46_f32, MCK_SPR, MCK__35_0 }, 0},
    { ARM::VCMPS, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcmp, MCK_CondCode, MCK__46_f32, MCK_SPR, MCK_SPR }, 0},
    { ARM::VCMPZD, Convert__Reg1_3__CondCode2_1, { MCK_vcmp, MCK_CondCode, MCK__46_f64, MCK_DPR, MCK__35_0 }, 0},
    { ARM::VCMPD, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcmp, MCK_CondCode, MCK__46_f64, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCMPEZS, Convert__Reg1_3__CondCode2_1, { MCK_vcmpe, MCK_CondCode, MCK__46_f32, MCK_SPR, MCK__35_0 }, 0},
    { ARM::VCMPES, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcmpe, MCK_CondCode, MCK__46_f32, MCK_SPR, MCK_SPR }, 0},
    { ARM::VCMPEZD, Convert__Reg1_3__CondCode2_1, { MCK_vcmpe, MCK_CondCode, MCK__46_f64, MCK_DPR, MCK__35_0 }, 0},
    { ARM::VCMPED, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcmpe, MCK_CondCode, MCK__46_f64, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCNTd, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcnt, MCK_CondCode, MCK__46_8, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCNTq, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcnt, MCK_CondCode, MCK__46_8, MCK_QPR, MCK_QPR }, 0},
    { ARM::VDUP16d, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vdup, MCK_CondCode, MCK__46_16, MCK_DPR, MCK_GPR }, 0},
    { ARM::VDUP16q, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vdup, MCK_CondCode, MCK__46_16, MCK_QPR, MCK_GPR }, 0},
    { ARM::VDUP32d, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vdup, MCK_CondCode, MCK__46_32, MCK_DPR, MCK_GPR }, 0},
    { ARM::VDUPfd, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vdup, MCK_CondCode, MCK__46_32, MCK_DPR, MCK_GPR }, 0},
    { ARM::VDUP32q, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vdup, MCK_CondCode, MCK__46_32, MCK_QPR, MCK_GPR }, 0},
    { ARM::VDUPfq, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vdup, MCK_CondCode, MCK__46_32, MCK_QPR, MCK_GPR }, 0},
    { ARM::VDUP8d, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vdup, MCK_CondCode, MCK__46_8, MCK_DPR, MCK_GPR }, 0},
    { ARM::VDUP8q, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vdup, MCK_CondCode, MCK__46_8, MCK_QPR, MCK_GPR }, 0},
    { ARM::VEORd, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_veor, MCK_CondCode, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VEORq, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_veor, MCK_CondCode, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VLDRS, Convert__Reg1_3__Imm2_4__CondCode2_1, { MCK_vldr, MCK_CondCode, MCK__46_32, MCK_SPR, MCK_Imm }, 0},
    { ARM::VLDRD, Convert__Reg1_3__Imm2_4__CondCode2_1, { MCK_vldr, MCK_CondCode, MCK__46_64, MCK_DPR, MCK_Imm }, 0},
    { ARM::VMOVS, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK__46_f32, MCK_SPR, MCK_SPR }, 0},
    { ARM::VMOVScc, Convert__Reg1_3__Tie0__Reg1_4__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK__46_f32, MCK_SPR, MCK_SPR }, 0},
    { ARM::FCONSTS, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK__46_f32, MCK_SPR, MCK_Imm }, 0},
    { ARM::VMOVD, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK__46_f64, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMOVDcc, Convert__Reg1_3__Tie0__Reg1_4__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK__46_f64, MCK_DPR, MCK_DPR }, 0},
    { ARM::FCONSTD, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK__46_f64, MCK_DPR, MCK_Imm }, 0},
    { ARM::VMOVv4i16, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK__46_i16, MCK_DPR, MCK_Imm }, 0},
    { ARM::VMOVv8i16, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK__46_i16, MCK_QPR, MCK_Imm }, 0},
    { ARM::VMOVv2i32, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK__46_i32, MCK_DPR, MCK_Imm }, 0},
    { ARM::VMOVv4i32, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK__46_i32, MCK_QPR, MCK_Imm }, 0},
    { ARM::VMOVv1i64, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK__46_i64, MCK_DPR, MCK_Imm }, 0},
    { ARM::VMOVv2i64, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK__46_i64, MCK_QPR, MCK_Imm }, 0},
    { ARM::VMOVv8i8, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK__46_i8, MCK_DPR, MCK_Imm }, 0},
    { ARM::VMOVv16i8, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK__46_i8, MCK_QPR, MCK_Imm }, 0},
    { ARM::VMOVRRD, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_DPR }, 0},
    { ARM::VMOVDRR, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK_DPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::VMOVLsv4i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vmovl, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_DPR }, 0},
    { ARM::VMOVLsv2i64, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vmovl, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_DPR }, 0},
    { ARM::VMOVLsv8i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vmovl, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_DPR }, 0},
    { ARM::VMOVLuv4i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vmovl, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_DPR }, 0},
    { ARM::VMOVLuv2i64, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vmovl, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_DPR }, 0},
    { ARM::VMOVLuv8i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vmovl, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_DPR }, 0},
    { ARM::VMOVNv8i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vmovn, MCK_CondCode, MCK__46_i16, MCK_DPR, MCK_QPR }, 0},
    { ARM::VMOVNv4i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vmovn, MCK_CondCode, MCK__46_i32, MCK_DPR, MCK_QPR }, 0},
    { ARM::VMOVNv2i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vmovn, MCK_CondCode, MCK__46_i64, MCK_DPR, MCK_QPR }, 0},
    { ARM::VMVNv4i16, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_vmvn, MCK_CondCode, MCK__46_i16, MCK_DPR, MCK_Imm }, 0},
    { ARM::VMVNv8i16, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_vmvn, MCK_CondCode, MCK__46_i16, MCK_QPR, MCK_Imm }, 0},
    { ARM::VMVNv2i32, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_vmvn, MCK_CondCode, MCK__46_i32, MCK_DPR, MCK_Imm }, 0},
    { ARM::VMVNv4i32, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_vmvn, MCK_CondCode, MCK__46_i32, MCK_QPR, MCK_Imm }, 0},
    { ARM::VNEGS, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vneg, MCK_CondCode, MCK__46_f32, MCK_SPR, MCK_SPR }, 0},
    { ARM::VNEGScc, Convert__Reg1_3__Tie0__Reg1_4__CondCode2_1, { MCK_vneg, MCK_CondCode, MCK__46_f32, MCK_SPR, MCK_SPR }, 0},
    { ARM::VNEGfd_sfp, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vneg, MCK_CondCode, MCK__46_f32, MCK_DPR_VFP2, MCK_DPR_VFP2 }, 0},
    { ARM::VNEGfd, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vneg, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VNEGf32q, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vneg, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VNEGD, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vneg, MCK_CondCode, MCK__46_f64, MCK_DPR, MCK_DPR }, 0},
    { ARM::VNEGDcc, Convert__Reg1_3__Tie0__Reg1_4__CondCode2_1, { MCK_vneg, MCK_CondCode, MCK__46_f64, MCK_DPR, MCK_DPR }, 0},
    { ARM::VNEGs16d, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vneg, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR }, 0},
    { ARM::VNEGs16q, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vneg, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR }, 0},
    { ARM::VNEGs32d, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vneg, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VNEGs32q, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vneg, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VNEGs8d, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vneg, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR }, 0},
    { ARM::VNEGs8q, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vneg, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR }, 0},
    { ARM::VORNd, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_vorn, MCK_CondCode, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VORNq, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_vorn, MCK_CondCode, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VORRd, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_vorr, MCK_CondCode, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VORRq, Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1, { MCK_vorr, MCK_CondCode, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VPADALsv4i16, Convert__Reg1_3__Tie0__Reg1_4__CondCode2_1, { MCK_vpadal, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPADALsv8i16, Convert__Reg1_3__Tie0__Reg1_4__CondCode2_1, { MCK_vpadal, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR }, 0},
    { ARM::VPADALsv2i32, Convert__Reg1_3__Tie0__Reg1_4__CondCode2_1, { MCK_vpadal, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPADALsv4i32, Convert__Reg1_3__Tie0__Reg1_4__CondCode2_1, { MCK_vpadal, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VPADALsv8i8, Convert__Reg1_3__Tie0__Reg1_4__CondCode2_1, { MCK_vpadal, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPADALsv16i8, Convert__Reg1_3__Tie0__Reg1_4__CondCode2_1, { MCK_vpadal, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR }, 0},
    { ARM::VPADALuv4i16, Convert__Reg1_3__Tie0__Reg1_4__CondCode2_1, { MCK_vpadal, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPADALuv8i16, Convert__Reg1_3__Tie0__Reg1_4__CondCode2_1, { MCK_vpadal, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR }, 0},
    { ARM::VPADALuv2i32, Convert__Reg1_3__Tie0__Reg1_4__CondCode2_1, { MCK_vpadal, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPADALuv4i32, Convert__Reg1_3__Tie0__Reg1_4__CondCode2_1, { MCK_vpadal, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VPADALuv8i8, Convert__Reg1_3__Tie0__Reg1_4__CondCode2_1, { MCK_vpadal, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPADALuv16i8, Convert__Reg1_3__Tie0__Reg1_4__CondCode2_1, { MCK_vpadal, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR }, 0},
    { ARM::VPADDLsv4i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vpaddl, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPADDLsv8i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vpaddl, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR }, 0},
    { ARM::VPADDLsv2i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vpaddl, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPADDLsv4i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vpaddl, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VPADDLsv8i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vpaddl, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPADDLsv16i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vpaddl, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR }, 0},
    { ARM::VPADDLuv4i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vpaddl, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPADDLuv8i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vpaddl, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR }, 0},
    { ARM::VPADDLuv2i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vpaddl, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPADDLuv4i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vpaddl, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VPADDLuv8i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vpaddl, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPADDLuv16i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vpaddl, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQABSv4i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vqabs, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQABSv8i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vqabs, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQABSv2i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vqabs, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQABSv4i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vqabs, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQABSv8i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vqabs, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQABSv16i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vqabs, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQMOVNsv8i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vqmovn, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_QPR }, 0},
    { ARM::VQMOVNsv4i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vqmovn, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_QPR }, 0},
    { ARM::VQMOVNsv2i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vqmovn, MCK_CondCode, MCK__46_s64, MCK_DPR, MCK_QPR }, 0},
    { ARM::VQMOVNuv8i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vqmovn, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_QPR }, 0},
    { ARM::VQMOVNuv4i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vqmovn, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_QPR }, 0},
    { ARM::VQMOVNuv2i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vqmovn, MCK_CondCode, MCK__46_u64, MCK_DPR, MCK_QPR }, 0},
    { ARM::VQMOVNsuv8i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vqmovun, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_QPR }, 0},
    { ARM::VQMOVNsuv4i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vqmovun, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_QPR }, 0},
    { ARM::VQMOVNsuv2i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vqmovun, MCK_CondCode, MCK__46_s64, MCK_DPR, MCK_QPR }, 0},
    { ARM::VQNEGv4i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vqneg, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQNEGv8i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vqneg, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQNEGv2i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vqneg, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQNEGv4i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vqneg, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQNEGv8i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vqneg, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQNEGv16i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vqneg, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRECPEfd, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vrecpe, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VRECPEfq, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vrecpe, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRECPEd, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vrecpe, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VRECPEq, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vrecpe, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VREV16d8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vrev16, MCK_CondCode, MCK__46_8, MCK_DPR, MCK_DPR }, 0},
    { ARM::VREV16q8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vrev16, MCK_CondCode, MCK__46_8, MCK_QPR, MCK_QPR }, 0},
    { ARM::VREV32d16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vrev32, MCK_CondCode, MCK__46_16, MCK_DPR, MCK_DPR }, 0},
    { ARM::VREV32q16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vrev32, MCK_CondCode, MCK__46_16, MCK_QPR, MCK_QPR }, 0},
    { ARM::VREV32d8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vrev32, MCK_CondCode, MCK__46_8, MCK_DPR, MCK_DPR }, 0},
    { ARM::VREV32q8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vrev32, MCK_CondCode, MCK__46_8, MCK_QPR, MCK_QPR }, 0},
    { ARM::VREV64d16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vrev64, MCK_CondCode, MCK__46_16, MCK_DPR, MCK_DPR }, 0},
    { ARM::VREV64q16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vrev64, MCK_CondCode, MCK__46_16, MCK_QPR, MCK_QPR }, 0},
    { ARM::VREV64d32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vrev64, MCK_CondCode, MCK__46_32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VREV64df, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vrev64, MCK_CondCode, MCK__46_32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VREV64q32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vrev64, MCK_CondCode, MCK__46_32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VREV64qf, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vrev64, MCK_CondCode, MCK__46_32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VREV64d8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vrev64, MCK_CondCode, MCK__46_8, MCK_DPR, MCK_DPR }, 0},
    { ARM::VREV64q8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vrev64, MCK_CondCode, MCK__46_8, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRSQRTEfd, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vrsqrte, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VRSQRTEfq, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vrsqrte, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRSQRTEd, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vrsqrte, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VRSQRTEq, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vrsqrte, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VSQRTS, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vsqrt, MCK_CondCode, MCK__46_f32, MCK_SPR, MCK_SPR }, 0},
    { ARM::VSQRTD, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vsqrt, MCK_CondCode, MCK__46_f64, MCK_DPR, MCK_DPR }, 0},
    { ARM::VSTRS, Convert__Reg1_3__Imm2_4__CondCode2_1, { MCK_vstr, MCK_CondCode, MCK__46_32, MCK_SPR, MCK_Imm }, 0},
    { ARM::VSTRD, Convert__Reg1_3__Imm2_4__CondCode2_1, { MCK_vstr, MCK_CondCode, MCK__46_64, MCK_DPR, MCK_Imm }, 0},
    { ARM::VTRNd16, Convert__Reg1_3__Reg1_4__Tie0__Tie1__CondCode2_1, { MCK_vtrn, MCK_CondCode, MCK__46_16, MCK_DPR, MCK_DPR }, 0},
    { ARM::VTRNq16, Convert__Reg1_3__Reg1_4__Tie0__Tie1__CondCode2_1, { MCK_vtrn, MCK_CondCode, MCK__46_16, MCK_QPR, MCK_QPR }, 0},
    { ARM::VTRNd32, Convert__Reg1_3__Reg1_4__Tie0__Tie1__CondCode2_1, { MCK_vtrn, MCK_CondCode, MCK__46_32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VTRNq32, Convert__Reg1_3__Reg1_4__Tie0__Tie1__CondCode2_1, { MCK_vtrn, MCK_CondCode, MCK__46_32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VTRNd8, Convert__Reg1_3__Reg1_4__Tie0__Tie1__CondCode2_1, { MCK_vtrn, MCK_CondCode, MCK__46_8, MCK_DPR, MCK_DPR }, 0},
    { ARM::VTRNq8, Convert__Reg1_3__Reg1_4__Tie0__Tie1__CondCode2_1, { MCK_vtrn, MCK_CondCode, MCK__46_8, MCK_QPR, MCK_QPR }, 0},
    { ARM::VUZPd16, Convert__Reg1_3__Reg1_4__Tie0__Tie1__CondCode2_1, { MCK_vuzp, MCK_CondCode, MCK__46_16, MCK_DPR, MCK_DPR }, 0},
    { ARM::VUZPq16, Convert__Reg1_3__Reg1_4__Tie0__Tie1__CondCode2_1, { MCK_vuzp, MCK_CondCode, MCK__46_16, MCK_QPR, MCK_QPR }, 0},
    { ARM::VUZPd32, Convert__Reg1_3__Reg1_4__Tie0__Tie1__CondCode2_1, { MCK_vuzp, MCK_CondCode, MCK__46_32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VUZPq32, Convert__Reg1_3__Reg1_4__Tie0__Tie1__CondCode2_1, { MCK_vuzp, MCK_CondCode, MCK__46_32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VUZPd8, Convert__Reg1_3__Reg1_4__Tie0__Tie1__CondCode2_1, { MCK_vuzp, MCK_CondCode, MCK__46_8, MCK_DPR, MCK_DPR }, 0},
    { ARM::VUZPq8, Convert__Reg1_3__Reg1_4__Tie0__Tie1__CondCode2_1, { MCK_vuzp, MCK_CondCode, MCK__46_8, MCK_QPR, MCK_QPR }, 0},
    { ARM::VZIPd16, Convert__Reg1_3__Reg1_4__Tie0__Tie1__CondCode2_1, { MCK_vzip, MCK_CondCode, MCK__46_16, MCK_DPR, MCK_DPR }, 0},
    { ARM::VZIPq16, Convert__Reg1_3__Reg1_4__Tie0__Tie1__CondCode2_1, { MCK_vzip, MCK_CondCode, MCK__46_16, MCK_QPR, MCK_QPR }, 0},
    { ARM::VZIPd32, Convert__Reg1_3__Reg1_4__Tie0__Tie1__CondCode2_1, { MCK_vzip, MCK_CondCode, MCK__46_32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VZIPq32, Convert__Reg1_3__Reg1_4__Tie0__Tie1__CondCode2_1, { MCK_vzip, MCK_CondCode, MCK__46_32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VZIPd8, Convert__Reg1_3__Reg1_4__Tie0__Tie1__CondCode2_1, { MCK_vzip, MCK_CondCode, MCK__46_8, MCK_DPR, MCK_DPR }, 0},
    { ARM::VZIPq8, Convert__Reg1_3__Reg1_4__Tie0__Tie1__CondCode2_1, { MCK_vzip, MCK_CondCode, MCK__46_8, MCK_QPR, MCK_QPR }, 0},
    { ARM::ADCrr, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__Imm1_2, { MCK_adc, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::ADCri, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__Imm1_2, { MCK_adc, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::ADCrs, Convert__Reg1_3__Reg1_4__Imm3_5__CondCode2_1__Imm1_2, { MCK_adc, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2ADCSri, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_2__Imm1_1, { MCK_adc, MCK_Imm, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::t2ADCri, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_2__Imm1_1, { MCK_adc, MCK_Imm, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::ADDrr, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__Imm1_2, { MCK_add, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::ADDri, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__Imm1_2, { MCK_add, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::ADDrs, Convert__Reg1_3__Reg1_4__Imm3_5__CondCode2_1__Imm1_2, { MCK_add, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::tADDrr, Convert__Reg1_3__Imm1_1__Reg1_4__Reg1_5__CondCode2_2, { MCK_add, MCK_Imm, MCK_CondCode, MCK_tGPR, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::tADDi3, Convert__Reg1_3__Imm1_1__Reg1_4__Imm1_5__CondCode2_2, { MCK_add, MCK_Imm, MCK_CondCode, MCK_tGPR, MCK_tGPR, MCK_Imm }, 0},
    { ARM::t2ADDSrr, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_adds, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_GPR, MCK_rGPR }, 0},
    { ARM::t2ADDSri, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_adds, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2ADDSrs, Convert__Reg1_3__Reg1_4__Imm2_5__CondCode2_1, { MCK_adds, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2LEApcrel, Convert__Reg1_3__Imm1_5__CondCode2_1, { MCK_adr, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK__35_, MCK_Imm }, 0},
    { ARM::ANDrr, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__Imm1_2, { MCK_and, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::ANDri, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__Imm1_2, { MCK_and, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::ANDrs, Convert__Reg1_3__Reg1_4__Imm3_5__CondCode2_1__Imm1_2, { MCK_and, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2ANDri, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_2__Imm1_1, { MCK_and, MCK_Imm, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::t2ANDSrr, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_ands, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_GPR, MCK_rGPR }, 0},
    { ARM::t2ANDSri, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_ands, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2ANDSrs, Convert__Reg1_3__Reg1_4__Imm2_5__CondCode2_1, { MCK_ands, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2MOVCCasr, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_asr, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::tASRri, Convert__Reg1_3__Imm1_1__Reg1_4__Imm1_5__CondCode2_2, { MCK_asr, MCK_Imm, MCK_CondCode, MCK_tGPR, MCK_tGPR, MCK_Imm }, 0},
    { ARM::t2MOVsra_flag, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_asrs, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK__35_1 }, 0},
    { ARM::BICrr, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__Imm1_2, { MCK_bic, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::BICri, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__Imm1_2, { MCK_bic, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::BICrs, Convert__Reg1_3__Reg1_4__Imm3_5__CondCode2_1__Imm1_2, { MCK_bic, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2BICri, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_2__Imm1_1, { MCK_bic, MCK_Imm, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::EORrr, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__Imm1_2, { MCK_eor, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::EORri, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__Imm1_2, { MCK_eor, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::EORrs, Convert__Reg1_3__Reg1_4__Imm3_5__CondCode2_1__Imm1_2, { MCK_eor, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2EORri, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_2__Imm1_1, { MCK_eor, MCK_Imm, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::LDRD_PRE, Convert__Reg1_2__Reg1_3__Reg1_4__Tie2__Imp__Imp__CondCode2_1, { MCK_ldrd, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK__33_ }, 0},
    { ARM::t2LDREX, Convert__Reg1_2__Reg1_4__CondCode2_1, { MCK_ldrex, MCK_CondCode, MCK_rGPR, MCK__91_, MCK_rGPR, MCK__93_ }, 0},
    { ARM::LDREX, Convert__Reg1_2__Reg1_4__CondCode2_1, { MCK_ldrex, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_ }, 0},
    { ARM::t2LDREXB, Convert__Reg1_2__Reg1_4__CondCode2_1, { MCK_ldrexb, MCK_CondCode, MCK_rGPR, MCK__91_, MCK_rGPR, MCK__93_ }, 0},
    { ARM::LDREXB, Convert__Reg1_2__Reg1_4__CondCode2_1, { MCK_ldrexb, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_ }, 0},
    { ARM::t2LDREXH, Convert__Reg1_2__Reg1_4__CondCode2_1, { MCK_ldrexh, MCK_CondCode, MCK_rGPR, MCK__91_, MCK_rGPR, MCK__93_ }, 0},
    { ARM::LDREXH, Convert__Reg1_2__Reg1_4__CondCode2_1, { MCK_ldrexh, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_ }, 0},
    { ARM::t2MOVCClsl, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_lsl, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::tLSLri, Convert__Reg1_3__Imm1_1__Reg1_4__Imm1_5__CondCode2_2, { MCK_lsl, MCK_Imm, MCK_CondCode, MCK_tGPR, MCK_tGPR, MCK_Imm }, 0},
    { ARM::t2MOVCClsr, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_lsr, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::tLSRri, Convert__Reg1_3__Imm1_1__Reg1_4__Imm1_5__CondCode2_2, { MCK_lsr, MCK_Imm, MCK_CondCode, MCK_tGPR, MCK_tGPR, MCK_Imm }, 0},
    { ARM::t2MOVsrl_flag, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_lsrs, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK__35_1 }, 0},
    { ARM::t2MLA, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_mla, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2MLS, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_mls, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::MLS, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_mls, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::MOVrx, Convert__Reg1_3__Reg1_4__CondCode2_1__Imm1_2, { MCK_mov, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_rrx }, 0},
    { ARM::t2MOVi, Convert__Reg1_4__Imm1_5__CondCode2_2__Imm1_1, { MCK_mov, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_Imm }, 0},
    { ARM::t2MOVr, Convert__Reg1_4__Reg1_5__CondCode2_2__Imm1_1, { MCK_mov, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_GPR }, 0},
    { ARM::MOVsra_flag, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_movs, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_asr, MCK__35_1 }, 0},
    { ARM::MOVsrl_flag, Convert__Reg1_2__Reg1_3__CondCode2_1, { MCK_movs, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_lsr, MCK__35_1 }, 0},
    { ARM::MUL, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__Imm1_2, { MCK_mul, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2MVNr, Convert__Reg1_4__Reg1_5__CondCode2_2__Imm1_1, { MCK_mvn, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2MVNs, Convert__Reg1_4__Imm2_5__CondCode2_2__Imm1_1, { MCK_mvn, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_Imm }, 0},
    { ARM::t2ORNrr, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_2__Imm1_1, { MCK_orn, MCK_Imm, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2ORNri, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_2__Imm1_1, { MCK_orn, MCK_Imm, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::t2ORNrs, Convert__Reg1_3__Reg1_4__Imm2_5__CondCode2_2__Imm1_1, { MCK_orn, MCK_Imm, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::ORRrr, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__Imm1_2, { MCK_orr, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::ORRri, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__Imm1_2, { MCK_orr, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::ORRrs, Convert__Reg1_3__Reg1_4__Imm3_5__CondCode2_1__Imm1_2, { MCK_orr, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2ORRri, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_2__Imm1_1, { MCK_orr, MCK_Imm, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::t2PKHBT, Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_pkhbt, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::PKHBT, Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_pkhbt, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2PKHTB, Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_pkhtb, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::PKHTB, Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_pkhtb, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2PLDpci, Convert__Imp__Imm1_4__CondCode2_1, { MCK_pld, MCK_CondCode, MCK__91_, MCK_pc, MCK_Imm, MCK__93_ }, 0},
    { ARM::t2PLDr, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_pld, MCK_CondCode, MCK__91_, MCK_GPR, MCK_GPR, MCK__93_ }, 0},
    { ARM::t2PLDi12, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_pld, MCK_CondCode, MCK__91_, MCK_GPR, MCK_Imm, MCK__93_ }, 0},
    { ARM::t2PLDi8, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_pld, MCK_CondCode, MCK__91_, MCK_GPR, MCK_Imm, MCK__93_ }, 0},
    { ARM::t2PLDWpci, Convert__Imp__Imm1_4__CondCode2_1, { MCK_pldw, MCK_CondCode, MCK__91_, MCK_pc, MCK_Imm, MCK__93_ }, 0},
    { ARM::t2PLDWr, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_pldw, MCK_CondCode, MCK__91_, MCK_GPR, MCK_GPR, MCK__93_ }, 0},
    { ARM::t2PLDWi12, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_pldw, MCK_CondCode, MCK__91_, MCK_GPR, MCK_Imm, MCK__93_ }, 0},
    { ARM::t2PLDWi8, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_pldw, MCK_CondCode, MCK__91_, MCK_GPR, MCK_Imm, MCK__93_ }, 0},
    { ARM::t2PLIpci, Convert__Imp__Imm1_4__CondCode2_1, { MCK_pli, MCK_CondCode, MCK__91_, MCK_pc, MCK_Imm, MCK__93_ }, 0},
    { ARM::t2PLIr, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_pli, MCK_CondCode, MCK__91_, MCK_GPR, MCK_GPR, MCK__93_ }, 0},
    { ARM::t2PLIi12, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_pli, MCK_CondCode, MCK__91_, MCK_GPR, MCK_Imm, MCK__93_ }, 0},
    { ARM::t2PLIi8, Convert__Reg1_3__Imm1_4__CondCode2_1, { MCK_pli, MCK_CondCode, MCK__91_, MCK_GPR, MCK_Imm, MCK__93_ }, 0},
    { ARM::t2MOVCCror, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_ror, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::RSBrr, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__Imm1_2, { MCK_rsb, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::RSBri, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__Imm1_2, { MCK_rsb, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::RSBrs, Convert__Reg1_3__Reg1_4__Imm3_5__CondCode2_1__Imm1_2, { MCK_rsb, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::tRSB, Convert__Reg1_3__Imm1_1__Reg1_4__CondCode2_2, { MCK_rsb, MCK_Imm, MCK_CondCode, MCK_tGPR, MCK_tGPR, MCK__35_0 }, 0},
    { ARM::t2RSBrr, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_2__Imm1_1, { MCK_rsb, MCK_Imm, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2RSBrs, Convert__Reg1_3__Reg1_4__Imm2_5__CondCode2_2__Imm1_1, { MCK_rsb, MCK_Imm, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::t2RSBSri, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_rsbs, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::RSCrr, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__Imm1_2, { MCK_rsc, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::RSCri, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__Imm1_2, { MCK_rsc, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::RSCrs, Convert__Reg1_3__Reg1_4__Imm3_5__CondCode2_1__Imm1_2, { MCK_rsc, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::SBCrr, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__Imm1_2, { MCK_sbc, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::SBCri, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__Imm1_2, { MCK_sbc, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::SBCrs, Convert__Reg1_3__Reg1_4__Imm3_5__CondCode2_1__Imm1_2, { MCK_sbc, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2SBCSri, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_2__Imm1_1, { MCK_sbc, MCK_Imm, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::t2SBCri, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_2__Imm1_1, { MCK_sbc, MCK_Imm, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::t2SBFX, Convert__Reg1_2__Reg1_3__Imm1_4__Imm1_5__CondCode2_1, { MCK_sbfx, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm, MCK_Imm }, 0},
    { ARM::SBFX, Convert__Reg1_2__Reg1_3__Imm1_4__Imm1_5__CondCode2_1, { MCK_sbfx, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm, MCK_Imm }, 0},
    { ARM::t2SMLABB, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlabb, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMLABB, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlabb, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMLABT, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlabt, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMLABT, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlabt, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMLAD, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlad, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMLAD, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlad, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMLADX, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smladx, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMLADX, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smladx, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMLAL, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlal, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2SMLALBB, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlalbb, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMLALBB, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlalbb, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMLALBT, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlalbt, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMLALBT, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlalbt, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMLALD, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlald, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMLALD, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlald, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMLALDX, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlaldx, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMLALDX, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlaldx, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMLALTB, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlaltb, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMLALTB, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlaltb, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMLALTT, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlaltt, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMLALTT, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlaltt, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMLATB, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlatb, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMLATB, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlatb, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMLATT, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlatt, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMLATT, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlatt, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMLAWB, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlawb, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMLAWB, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlawb, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMLAWT, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlawt, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMLAWT, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlawt, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMLSD, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlsd, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMLSD, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlsd, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMLSDX, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlsdx, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMLSDX, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlsdx, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMLSLD, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlsld, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMLSLD, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlsld, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMLSLDX, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlsldx, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMLSLDX, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smlsldx, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMMLA, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smmla, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMMLA, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smmla, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMMLAR, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smmlar, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMMLAR, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smmlar, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMMLS, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smmls, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMMLS, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smmls, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMMLSR, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smmlsr, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::SMMLSR, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smmlsr, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2SMULL, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_smull, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2SSAT, Convert__Reg1_2__Imm1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_ssat, MCK_CondCode, MCK_rGPR, MCK_Imm, MCK_rGPR, MCK_Imm }, 0},
    { ARM::SSAT, Convert__Reg1_2__Imm1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_ssat, MCK_CondCode, MCK_GPR, MCK_Imm, MCK_GPR, MCK_Imm }, 0},
    { ARM::SUBrr, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__Imm1_2, { MCK_sub, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::SUBri, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__Imm1_2, { MCK_sub, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::SUBrs, Convert__Reg1_3__Reg1_4__Imm3_5__CondCode2_1__Imm1_2, { MCK_sub, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::tSUBrr, Convert__Reg1_3__Imm1_1__Reg1_4__Reg1_5__CondCode2_2, { MCK_sub, MCK_Imm, MCK_CondCode, MCK_tGPR, MCK_tGPR, MCK_tGPR }, 0},
    { ARM::tSUBi3, Convert__Reg1_3__Imm1_1__Reg1_4__Imm1_5__CondCode2_2, { MCK_sub, MCK_Imm, MCK_CondCode, MCK_tGPR, MCK_tGPR, MCK_Imm }, 0},
    { ARM::t2SUBrSPs, Convert__Reg1_3__Reg1_4__Imm2_5__CondCode2_2__Imm1_1, { MCK_sub, MCK_Imm, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2SUBSrr, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_subs, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_GPR, MCK_rGPR }, 0},
    { ARM::t2SUBSri, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_subs, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2SUBSrs, Convert__Reg1_3__Reg1_4__Imm2_5__CondCode2_1, { MCK_subs, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::SXTBr_rot, Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_1, { MCK_sxtb, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, 0},
    { ARM::t2SXTB16r_rot, Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_1, { MCK_sxtb16, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, 0},
    { ARM::SXTB16r_rot, Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_1, { MCK_sxtb16, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, 0},
    { ARM::SXTHr_rot, Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_1, { MCK_sxth, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, 0},
    { ARM::t2TBBgen, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_tbb, MCK_CondCode, MCK__91_, MCK_GPR, MCK_GPR, MCK__93_ }, 0},
    { ARM::t2UBFX, Convert__Reg1_2__Reg1_3__Imm1_4__Imm1_5__CondCode2_1, { MCK_ubfx, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm, MCK_Imm }, 0},
    { ARM::UBFX, Convert__Reg1_2__Reg1_3__Imm1_4__Imm1_5__CondCode2_1, { MCK_ubfx, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm, MCK_Imm }, 0},
    { ARM::t2UMAAL, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_umaal, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::UMAAL, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_umaal, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2UMLAL, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_umlal, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2UMULL, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_umull, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2USADA8, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_usada8, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::USADA8, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_usada8, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2USAT, Convert__Reg1_2__Imm1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_usat, MCK_CondCode, MCK_rGPR, MCK_Imm, MCK_rGPR, MCK_Imm }, 0},
    { ARM::USAT, Convert__Reg1_2__Imm1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_usat, MCK_CondCode, MCK_GPR, MCK_Imm, MCK_GPR, MCK_Imm }, 0},
    { ARM::UXTBr_rot, Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_1, { MCK_uxtb, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, 0},
    { ARM::t2UXTB16r_rot, Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_1, { MCK_uxtb16, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, 0},
    { ARM::UXTB16r_rot, Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_1, { MCK_uxtb16, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, 0},
    { ARM::UXTHr_rot, Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_1, { MCK_uxth, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, 0},
    { ARM::VABAsv4i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaba, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABAsv8i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaba, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VABAsv2i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaba, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABAsv4i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaba, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VABAsv8i8, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaba, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABAsv16i8, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaba, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VABAuv4i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaba, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABAuv8i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaba, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VABAuv2i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaba, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABAuv4i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaba, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VABAuv8i8, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaba, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABAuv16i8, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaba, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VABALsv4i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabal, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABALsv2i64, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabal, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABALsv8i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabal, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABALuv4i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabal, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABALuv2i64, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabal, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABALuv8i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabal, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABDfd, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabd, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABDfq, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabd, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VABDsv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabd, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABDsv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabd, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VABDsv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabd, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABDsv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabd, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VABDsv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabd, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABDsv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabd, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VABDuv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabd, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABDuv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabd, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VABDuv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabd, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABDuv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabd, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VABDuv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabd, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABDuv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabd, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VABDLsv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabdl, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABDLsv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabdl, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABDLsv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabdl, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABDLuv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabdl, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABDLuv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabdl, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VABDLuv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vabdl, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VACGEd, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vacge, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VACGEq, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vacge, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VACGTd, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vacgt, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VACGTq, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vacgt, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VADDS, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vadd, MCK_CondCode, MCK__46_f32, MCK_SPR, MCK_SPR, MCK_SPR }, 0},
    { ARM::VADDfd_sfp, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vadd, MCK_CondCode, MCK__46_f32, MCK_DPR_VFP2, MCK_DPR_VFP2, MCK_DPR_VFP2 }, 0},
    { ARM::VADDfd, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vadd, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VADDfq, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vadd, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VADDD, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vadd, MCK_CondCode, MCK__46_f64, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VADDv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vadd, MCK_CondCode, MCK__46_i16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VADDv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vadd, MCK_CondCode, MCK__46_i16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VADDv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vadd, MCK_CondCode, MCK__46_i32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VADDv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vadd, MCK_CondCode, MCK__46_i32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VADDv1i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vadd, MCK_CondCode, MCK__46_i64, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VADDv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vadd, MCK_CondCode, MCK__46_i64, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VADDv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vadd, MCK_CondCode, MCK__46_i8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VADDv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vadd, MCK_CondCode, MCK__46_i8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VADDHNv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaddhn, MCK_CondCode, MCK__46_i16, MCK_DPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VADDHNv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaddhn, MCK_CondCode, MCK__46_i32, MCK_DPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VADDHNv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaddhn, MCK_CondCode, MCK__46_i64, MCK_DPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VADDLsv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaddl, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VADDLsv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaddl, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VADDLsv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaddl, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VADDLuv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaddl, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VADDLuv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaddl, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VADDLuv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaddl, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VADDWsv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaddw, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_DPR }, 0},
    { ARM::VADDWsv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaddw, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_DPR }, 0},
    { ARM::VADDWsv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaddw, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK_DPR }, 0},
    { ARM::VADDWuv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaddw, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR, MCK_DPR }, 0},
    { ARM::VADDWuv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaddw, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR, MCK_DPR }, 0},
    { ARM::VADDWuv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vaddw, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR, MCK_DPR }, 0},
    { ARM::VCEQzv2f32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vceq, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK__35_0 }, 0},
    { ARM::VCEQfd, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vceq, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCEQzv4f32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vceq, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR, MCK__35_0 }, 0},
    { ARM::VCEQfq, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vceq, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCEQzv4i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vceq, MCK_CondCode, MCK__46_i16, MCK_DPR, MCK_DPR, MCK__35_0 }, 0},
    { ARM::VCEQv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vceq, MCK_CondCode, MCK__46_i16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCEQzv8i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vceq, MCK_CondCode, MCK__46_i16, MCK_QPR, MCK_QPR, MCK__35_0 }, 0},
    { ARM::VCEQv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vceq, MCK_CondCode, MCK__46_i16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCEQzv2i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vceq, MCK_CondCode, MCK__46_i32, MCK_DPR, MCK_DPR, MCK__35_0 }, 0},
    { ARM::VCEQv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vceq, MCK_CondCode, MCK__46_i32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCEQzv4i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vceq, MCK_CondCode, MCK__46_i32, MCK_QPR, MCK_QPR, MCK__35_0 }, 0},
    { ARM::VCEQv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vceq, MCK_CondCode, MCK__46_i32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCEQzv8i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vceq, MCK_CondCode, MCK__46_i8, MCK_DPR, MCK_DPR, MCK__35_0 }, 0},
    { ARM::VCEQv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vceq, MCK_CondCode, MCK__46_i8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCEQzv16i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vceq, MCK_CondCode, MCK__46_i8, MCK_QPR, MCK_QPR, MCK__35_0 }, 0},
    { ARM::VCEQv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vceq, MCK_CondCode, MCK__46_i8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCGEzv2f32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcge, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK__35_0 }, 0},
    { ARM::VCGEfd, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcge, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCGEzv4f32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcge, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR, MCK__35_0 }, 0},
    { ARM::VCGEfq, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcge, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCGEzv4i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcge, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK__35_0 }, 0},
    { ARM::VCGEsv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcge, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCGEzv8i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcge, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK__35_0 }, 0},
    { ARM::VCGEsv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcge, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCGEzv2i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcge, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK__35_0 }, 0},
    { ARM::VCGEsv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcge, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCGEzv4i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcge, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK__35_0 }, 0},
    { ARM::VCGEsv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcge, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCGEzv8i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcge, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK__35_0 }, 0},
    { ARM::VCGEsv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcge, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCGEzv16i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcge, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK__35_0 }, 0},
    { ARM::VCGEsv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcge, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCGEuv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcge, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCGEuv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcge, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCGEuv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcge, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCGEuv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcge, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCGEuv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcge, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCGEuv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcge, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCGTzv2f32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcgt, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK__35_0 }, 0},
    { ARM::VCGTfd, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcgt, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCGTzv4f32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcgt, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR, MCK__35_0 }, 0},
    { ARM::VCGTfq, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcgt, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCGTzv4i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcgt, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK__35_0 }, 0},
    { ARM::VCGTsv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcgt, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCGTzv8i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcgt, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK__35_0 }, 0},
    { ARM::VCGTsv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcgt, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCGTzv2i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcgt, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK__35_0 }, 0},
    { ARM::VCGTsv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcgt, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCGTzv4i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcgt, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK__35_0 }, 0},
    { ARM::VCGTsv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcgt, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCGTzv8i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcgt, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK__35_0 }, 0},
    { ARM::VCGTsv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcgt, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCGTzv16i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcgt, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK__35_0 }, 0},
    { ARM::VCGTsv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcgt, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCGTuv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcgt, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCGTuv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcgt, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCGTuv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcgt, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCGTuv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcgt, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCGTuv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcgt, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCGTuv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcgt, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCLEzv2f32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcle, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK__35_0 }, 0},
    { ARM::VCLEzv4f32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcle, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR, MCK__35_0 }, 0},
    { ARM::VCLEzv4i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcle, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK__35_0 }, 0},
    { ARM::VCLEzv8i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcle, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK__35_0 }, 0},
    { ARM::VCLEzv2i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcle, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK__35_0 }, 0},
    { ARM::VCLEzv4i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcle, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK__35_0 }, 0},
    { ARM::VCLEzv8i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcle, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK__35_0 }, 0},
    { ARM::VCLEzv16i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vcle, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK__35_0 }, 0},
    { ARM::VCLTzv2f32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vclt, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK__35_0 }, 0},
    { ARM::VCLTzv4f32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vclt, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR, MCK__35_0 }, 0},
    { ARM::VCLTzv4i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vclt, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK__35_0 }, 0},
    { ARM::VCLTzv8i16, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vclt, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK__35_0 }, 0},
    { ARM::VCLTzv2i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vclt, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK__35_0 }, 0},
    { ARM::VCLTzv4i32, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vclt, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK__35_0 }, 0},
    { ARM::VCLTzv8i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vclt, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK__35_0 }, 0},
    { ARM::VCLTzv16i8, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_vclt, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK__35_0 }, 0},
    { ARM::VCVTSD, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_f32, MCK__46_f64, MCK_SPR, MCK_DPR }, 0},
    { ARM::VSITOS, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_f32, MCK__46_s32, MCK_SPR, MCK_SPR }, 0},
    { ARM::VCVTs2fd_sfp, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_f32, MCK__46_s32, MCK_DPR_VFP2, MCK_DPR_VFP2 }, 0},
    { ARM::VCVTs2fd, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_f32, MCK__46_s32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCVTs2fq, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_f32, MCK__46_s32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VUITOS, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_f32, MCK__46_u32, MCK_SPR, MCK_SPR }, 0},
    { ARM::VCVTu2fd_sfp, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_f32, MCK__46_u32, MCK_DPR_VFP2, MCK_DPR_VFP2 }, 0},
    { ARM::VCVTu2fd, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_f32, MCK__46_u32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCVTu2fq, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_f32, MCK__46_u32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VCVTDS, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_f64, MCK__46_f32, MCK_DPR, MCK_SPR }, 0},
    { ARM::VSITOD, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_f64, MCK__46_s32, MCK_DPR, MCK_SPR }, 0},
    { ARM::VUITOD, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_f64, MCK__46_u32, MCK_DPR, MCK_SPR }, 0},
    { ARM::VTOSIZS, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_s32, MCK__46_f32, MCK_SPR, MCK_SPR }, 0},
    { ARM::VCVTf2sd_sfp, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_s32, MCK__46_f32, MCK_DPR_VFP2, MCK_DPR_VFP2 }, 0},
    { ARM::VCVTf2sd, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_s32, MCK__46_f32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCVTf2sq, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_s32, MCK__46_f32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VTOSIZD, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_s32, MCK__46_f64, MCK_SPR, MCK_DPR }, 0},
    { ARM::VTOUIZS, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_u32, MCK__46_f32, MCK_SPR, MCK_SPR }, 0},
    { ARM::VCVTf2ud_sfp, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_u32, MCK__46_f32, MCK_DPR_VFP2, MCK_DPR_VFP2 }, 0},
    { ARM::VCVTf2ud, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_u32, MCK__46_f32, MCK_DPR, MCK_DPR }, 0},
    { ARM::VCVTf2uq, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_u32, MCK__46_f32, MCK_QPR, MCK_QPR }, 0},
    { ARM::VTOUIZD, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_u32, MCK__46_f64, MCK_SPR, MCK_DPR }, 0},
    { ARM::VCVTBHS, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvtb, MCK_CondCode, MCK__46_f16, MCK__46_f32, MCK_SPR, MCK_SPR }, 0},
    { ARM::VCVTBSH, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvtb, MCK_CondCode, MCK__46_f32, MCK__46_f16, MCK_SPR, MCK_SPR }, 0},
    { ARM::VTOSIRS, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvtr, MCK_CondCode, MCK__46_s32, MCK__46_f32, MCK_SPR, MCK_SPR }, 0},
    { ARM::VTOSIRD, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvtr, MCK_CondCode, MCK__46_s32, MCK__46_f64, MCK_SPR, MCK_DPR }, 0},
    { ARM::VTOUIRS, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvtr, MCK_CondCode, MCK__46_u32, MCK__46_f32, MCK_SPR, MCK_SPR }, 0},
    { ARM::VTOUIRD, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvtr, MCK_CondCode, MCK__46_u32, MCK__46_f64, MCK_SPR, MCK_DPR }, 0},
    { ARM::VCVTTHS, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvtt, MCK_CondCode, MCK__46_f16, MCK__46_f32, MCK_SPR, MCK_SPR }, 0},
    { ARM::VCVTTSH, Convert__Reg1_4__Reg1_5__CondCode2_1, { MCK_vcvtt, MCK_CondCode, MCK__46_f32, MCK__46_f16, MCK_SPR, MCK_SPR }, 0},
    { ARM::VDIVS, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vdiv, MCK_CondCode, MCK__46_f32, MCK_SPR, MCK_SPR, MCK_SPR }, 0},
    { ARM::VDIVD, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vdiv, MCK_CondCode, MCK__46_f64, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VHADDsv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhadd, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VHADDsv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhadd, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VHADDsv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhadd, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VHADDsv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhadd, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VHADDsv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhadd, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VHADDsv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhadd, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VHADDuv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhadd, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VHADDuv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhadd, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VHADDuv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhadd, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VHADDuv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhadd, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VHADDuv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhadd, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VHADDuv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhadd, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VHSUBsv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhsub, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VHSUBsv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhsub, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VHSUBsv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhsub, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VHSUBsv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhsub, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VHSUBsv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhsub, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VHSUBsv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhsub, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VHSUBuv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhsub, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VHSUBuv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhsub, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VHSUBuv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhsub, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VHSUBuv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhsub, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VHSUBuv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhsub, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VHSUBuv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vhsub, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMAXfd_sfp, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmax, MCK_CondCode, MCK__46_f32, MCK_DPR_VFP2, MCK_DPR_VFP2, MCK_DPR_VFP2 }, 0},
    { ARM::VMAXfd, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmax, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMAXfq, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmax, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMAXsv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmax, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMAXsv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmax, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMAXsv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmax, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMAXsv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmax, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMAXsv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmax, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMAXsv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmax, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMAXuv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmax, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMAXuv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmax, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMAXuv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmax, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMAXuv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmax, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMAXuv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmax, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMAXuv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmax, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMINfd_sfp, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmin, MCK_CondCode, MCK__46_f32, MCK_DPR_VFP2, MCK_DPR_VFP2, MCK_DPR_VFP2 }, 0},
    { ARM::VMINfd, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmin, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMINfq, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmin, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMINsv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmin, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMINsv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmin, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMINsv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmin, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMINsv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmin, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMINsv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmin, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMINsv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmin, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMINuv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmin, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMINuv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmin, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMINuv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmin, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMINuv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmin, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMINuv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmin, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMINuv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmin, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMLAS, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmla, MCK_CondCode, MCK__46_f32, MCK_SPR, MCK_SPR, MCK_SPR }, 0},
    { ARM::VMLAfd, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmla, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMLAfq, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmla, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMLAD, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmla, MCK_CondCode, MCK__46_f64, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMLAv4i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmla, MCK_CondCode, MCK__46_i16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMLAv8i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmla, MCK_CondCode, MCK__46_i16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMLAv2i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmla, MCK_CondCode, MCK__46_i32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMLAv4i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmla, MCK_CondCode, MCK__46_i32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMLAv8i8, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmla, MCK_CondCode, MCK__46_i8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMLAv16i8, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmla, MCK_CondCode, MCK__46_i8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMLALsv4i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmlal, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMLALsv2i64, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmlal, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMLALsv8i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmlal, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMLALuv4i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmlal, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMLALuv2i64, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmlal, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMLALuv8i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmlal, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMLSS, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmls, MCK_CondCode, MCK__46_f32, MCK_SPR, MCK_SPR, MCK_SPR }, 0},
    { ARM::VMLSfd, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmls, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMLSfq, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmls, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMLSD, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmls, MCK_CondCode, MCK__46_f64, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMLSv4i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmls, MCK_CondCode, MCK__46_i16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMLSv8i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmls, MCK_CondCode, MCK__46_i16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMLSv2i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmls, MCK_CondCode, MCK__46_i32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMLSv4i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmls, MCK_CondCode, MCK__46_i32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMLSv8i8, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmls, MCK_CondCode, MCK__46_i8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMLSv16i8, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmls, MCK_CondCode, MCK__46_i8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMLSLsv4i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmlsl, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMLSLsv2i64, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmlsl, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMLSLsv8i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmlsl, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMLSLuv4i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmlsl, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMLSLuv2i64, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmlsl, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMLSLuv8i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmlsl, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMOVRRS, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_SPR, MCK_SPR }, 0},
    { ARM::VMOVSRR, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK_SPR, MCK_SPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::VMULS, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmul, MCK_CondCode, MCK__46_f32, MCK_SPR, MCK_SPR, MCK_SPR }, 0},
    { ARM::VMULfd_sfp, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmul, MCK_CondCode, MCK__46_f32, MCK_DPR_VFP2, MCK_DPR_VFP2, MCK_DPR_VFP2 }, 0},
    { ARM::VMULfd, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmul, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMULfq, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmul, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMULD, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmul, MCK_CondCode, MCK__46_f64, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMULv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmul, MCK_CondCode, MCK__46_i16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMULv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmul, MCK_CondCode, MCK__46_i16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMULv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmul, MCK_CondCode, MCK__46_i32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMULv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmul, MCK_CondCode, MCK__46_i32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMULv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmul, MCK_CondCode, MCK__46_i8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMULv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmul, MCK_CondCode, MCK__46_i8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMULpd, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmul, MCK_CondCode, MCK__46_p8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMULpq, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmul, MCK_CondCode, MCK__46_p8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VMULLp, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmull, MCK_CondCode, MCK__46_p8, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMULLsv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmull, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMULLsv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmull, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMULLsv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmull, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMULLuv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmull, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMULLuv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmull, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VMULLuv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vmull, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VNMLAS, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vnmla, MCK_CondCode, MCK__46_f32, MCK_SPR, MCK_SPR, MCK_SPR }, 0},
    { ARM::VNMLAD, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vnmla, MCK_CondCode, MCK__46_f64, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VNMLSS, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vnmls, MCK_CondCode, MCK__46_f32, MCK_SPR, MCK_SPR, MCK_SPR }, 0},
    { ARM::VNMLSD, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vnmls, MCK_CondCode, MCK__46_f64, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VNMULS, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vnmul, MCK_CondCode, MCK__46_f32, MCK_SPR, MCK_SPR, MCK_SPR }, 0},
    { ARM::VNMULD, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vnmul, MCK_CondCode, MCK__46_f64, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPADDf, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vpadd, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPADDi16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vpadd, MCK_CondCode, MCK__46_i16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPADDi32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vpadd, MCK_CondCode, MCK__46_i32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPADDi8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vpadd, MCK_CondCode, MCK__46_i8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPMAXf, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vpmax, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPMAXs16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vpmax, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPMAXs32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vpmax, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPMAXs8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vpmax, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPMAXu16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vpmax, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPMAXu32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vpmax, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPMAXu8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vpmax, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPMINf, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vpmin, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPMINs16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vpmin, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPMINs32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vpmin, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPMINs8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vpmin, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPMINu16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vpmin, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPMINu32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vpmin, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VPMINu8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vpmin, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQADDsv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqadd, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQADDsv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqadd, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQADDsv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqadd, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQADDsv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqadd, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQADDsv1i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqadd, MCK_CondCode, MCK__46_s64, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQADDsv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqadd, MCK_CondCode, MCK__46_s64, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQADDsv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqadd, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQADDsv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqadd, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQADDuv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqadd, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQADDuv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqadd, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQADDuv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqadd, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQADDuv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqadd, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQADDuv1i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqadd, MCK_CondCode, MCK__46_u64, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQADDuv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqadd, MCK_CondCode, MCK__46_u64, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQADDuv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqadd, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQADDuv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqadd, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQDMLALv4i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqdmlal, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQDMLALv2i64, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqdmlal, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQDMLSLv4i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqdmlsl, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQDMLSLv2i64, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqdmlsl, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQDMULHv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqdmulh, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQDMULHv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqdmulh, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQDMULHv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqdmulh, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQDMULHv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqdmulh, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQDMULLv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqdmull, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQDMULLv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqdmull, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQRDMULHv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqrdmulh, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQRDMULHv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqrdmulh, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQRDMULHv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqrdmulh, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQRDMULHv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqrdmulh, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQRSHLsv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqrshl, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQRSHLsv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqrshl, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQRSHLsv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqrshl, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQRSHLsv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqrshl, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQRSHLsv1i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqrshl, MCK_CondCode, MCK__46_s64, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQRSHLsv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqrshl, MCK_CondCode, MCK__46_s64, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQRSHLsv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqrshl, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQRSHLsv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqrshl, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQRSHLuv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqrshl, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQRSHLuv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqrshl, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQRSHLuv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqrshl, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQRSHLuv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqrshl, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQRSHLuv1i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqrshl, MCK_CondCode, MCK__46_u64, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQRSHLuv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqrshl, MCK_CondCode, MCK__46_u64, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQRSHLuv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqrshl, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQRSHLuv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqrshl, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQRSHRNsv8i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqrshrn, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQRSHRNsv4i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqrshrn, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQRSHRNsv2i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqrshrn, MCK_CondCode, MCK__46_s64, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQRSHRNuv8i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqrshrn, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQRSHRNuv4i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqrshrn, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQRSHRNuv2i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqrshrn, MCK_CondCode, MCK__46_u64, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQRSHRUNv8i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqrshrun, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQRSHRUNv4i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqrshrun, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQRSHRUNv2i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqrshrun, MCK_CondCode, MCK__46_s64, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQSHLsv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQSHLsiv4i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VQSHLsv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQSHLsiv8i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQSHLsv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQSHLsiv2i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VQSHLsv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQSHLsiv4i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQSHLsv1i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_s64, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQSHLsiv1i64, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_s64, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VQSHLsv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_s64, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQSHLsiv2i64, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_s64, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQSHLsv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQSHLsiv8i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VQSHLsv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQSHLsiv16i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQSHLuv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQSHLuiv4i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VQSHLuv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQSHLuiv8i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQSHLuv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQSHLuiv2i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VQSHLuv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQSHLuiv4i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQSHLuv1i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_u64, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQSHLuiv1i64, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_u64, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VQSHLuv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_u64, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQSHLuiv2i64, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_u64, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQSHLuv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQSHLuiv8i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VQSHLuv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQSHLuiv16i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshl, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQSHLsuv4i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshlu, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VQSHLsuv8i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshlu, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQSHLsuv2i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshlu, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VQSHLsuv4i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshlu, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQSHLsuv1i64, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshlu, MCK_CondCode, MCK__46_s64, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VQSHLsuv2i64, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshlu, MCK_CondCode, MCK__46_s64, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQSHLsuv8i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshlu, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VQSHLsuv16i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshlu, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQSHRNsv8i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshrn, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQSHRNsv4i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshrn, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQSHRNsv2i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshrn, MCK_CondCode, MCK__46_s64, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQSHRNuv8i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshrn, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQSHRNuv4i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshrn, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQSHRNuv2i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshrn, MCK_CondCode, MCK__46_u64, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQSHRUNv8i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshrun, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQSHRUNv4i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshrun, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQSHRUNv2i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vqshrun, MCK_CondCode, MCK__46_s64, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VQSUBsv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqsub, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQSUBsv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqsub, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQSUBsv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqsub, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQSUBsv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqsub, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQSUBsv1i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqsub, MCK_CondCode, MCK__46_s64, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQSUBsv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqsub, MCK_CondCode, MCK__46_s64, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQSUBsv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqsub, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQSUBsv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqsub, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQSUBuv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqsub, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQSUBuv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqsub, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQSUBuv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqsub, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQSUBuv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqsub, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQSUBuv1i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqsub, MCK_CondCode, MCK__46_u64, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQSUBuv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqsub, MCK_CondCode, MCK__46_u64, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VQSUBuv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqsub, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VQSUBuv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vqsub, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRADDHNv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vraddhn, MCK_CondCode, MCK__46_i16, MCK_DPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRADDHNv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vraddhn, MCK_CondCode, MCK__46_i32, MCK_DPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRADDHNv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vraddhn, MCK_CondCode, MCK__46_i64, MCK_DPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRECPSfd, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrecps, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VRECPSfq, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrecps, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRHADDsv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrhadd, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VRHADDsv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrhadd, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRHADDsv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrhadd, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VRHADDsv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrhadd, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRHADDsv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrhadd, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VRHADDsv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrhadd, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRHADDuv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrhadd, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VRHADDuv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrhadd, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRHADDuv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrhadd, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VRHADDuv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrhadd, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRHADDuv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrhadd, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VRHADDuv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrhadd, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRSHLsv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrshl, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VRSHLsv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrshl, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRSHLsv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrshl, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VRSHLsv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrshl, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRSHLsv1i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrshl, MCK_CondCode, MCK__46_s64, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VRSHLsv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrshl, MCK_CondCode, MCK__46_s64, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRSHLsv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrshl, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VRSHLsv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrshl, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRSHLuv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrshl, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VRSHLuv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrshl, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRSHLuv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrshl, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VRSHLuv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrshl, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRSHLuv1i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrshl, MCK_CondCode, MCK__46_u64, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VRSHLuv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrshl, MCK_CondCode, MCK__46_u64, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRSHLuv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrshl, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VRSHLuv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrshl, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRSHRsv4i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrshr, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VRSHRsv8i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrshr, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VRSHRsv2i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrshr, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VRSHRsv4i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrshr, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VRSHRsv1i64, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrshr, MCK_CondCode, MCK__46_s64, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VRSHRsv2i64, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrshr, MCK_CondCode, MCK__46_s64, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VRSHRsv8i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrshr, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VRSHRsv16i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrshr, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VRSHRuv4i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrshr, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VRSHRuv8i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrshr, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VRSHRuv2i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrshr, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VRSHRuv4i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrshr, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VRSHRuv1i64, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrshr, MCK_CondCode, MCK__46_u64, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VRSHRuv2i64, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrshr, MCK_CondCode, MCK__46_u64, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VRSHRuv8i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrshr, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VRSHRuv16i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrshr, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VRSHRNv8i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrshrn, MCK_CondCode, MCK__46_i16, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VRSHRNv4i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrshrn, MCK_CondCode, MCK__46_i32, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VRSHRNv2i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrshrn, MCK_CondCode, MCK__46_i64, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VRSQRTSfd, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrsqrts, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VRSQRTSfq, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrsqrts, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRSRAsv4i16, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrsra, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VRSRAsv8i16, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrsra, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VRSRAsv2i32, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrsra, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VRSRAsv4i32, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrsra, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VRSRAsv1i64, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrsra, MCK_CondCode, MCK__46_s64, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VRSRAsv2i64, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrsra, MCK_CondCode, MCK__46_s64, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VRSRAsv8i8, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrsra, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VRSRAsv16i8, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrsra, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VRSRAuv4i16, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrsra, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VRSRAuv8i16, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrsra, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VRSRAuv2i32, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrsra, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VRSRAuv4i32, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrsra, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VRSRAuv1i64, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrsra, MCK_CondCode, MCK__46_u64, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VRSRAuv2i64, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrsra, MCK_CondCode, MCK__46_u64, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VRSRAuv8i8, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrsra, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VRSRAuv16i8, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vrsra, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VRSUBHNv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrsubhn, MCK_CondCode, MCK__46_i16, MCK_DPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRSUBHNv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrsubhn, MCK_CondCode, MCK__46_i32, MCK_DPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VRSUBHNv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vrsubhn, MCK_CondCode, MCK__46_i64, MCK_DPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VSHLiv4i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_i16, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSHLiv8i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_i16, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSHLiv2i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_i32, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSHLiv4i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_i32, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSHLiv1i64, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_i64, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSHLiv2i64, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_i64, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSHLiv8i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_i8, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSHLiv16i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_i8, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSHLsv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VSHLsv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VSHLsv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VSHLsv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VSHLsv1i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_s64, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VSHLsv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_s64, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VSHLsv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VSHLsv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VSHLuv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VSHLuv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VSHLuv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VSHLuv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VSHLuv1i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_u64, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VSHLuv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_u64, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VSHLuv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VSHLuv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vshl, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VSHLLi16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshll, MCK_CondCode, MCK__46_i16, MCK_QPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSHLLi32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshll, MCK_CondCode, MCK__46_i32, MCK_QPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSHLLi8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshll, MCK_CondCode, MCK__46_i8, MCK_QPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSHLLsv4i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshll, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSHLLsv2i64, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshll, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSHLLsv8i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshll, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSHLLuv4i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshll, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSHLLuv2i64, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshll, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSHLLuv8i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshll, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSHRsv4i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshr, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSHRsv8i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshr, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSHRsv2i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshr, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSHRsv4i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshr, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSHRsv1i64, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshr, MCK_CondCode, MCK__46_s64, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSHRsv2i64, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshr, MCK_CondCode, MCK__46_s64, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSHRsv8i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshr, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSHRsv16i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshr, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSHRuv4i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshr, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSHRuv8i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshr, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSHRuv2i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshr, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSHRuv4i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshr, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSHRuv1i64, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshr, MCK_CondCode, MCK__46_u64, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSHRuv2i64, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshr, MCK_CondCode, MCK__46_u64, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSHRuv8i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshr, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSHRuv16i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshr, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSHRNv8i8, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshrn, MCK_CondCode, MCK__46_i16, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSHRNv4i16, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshrn, MCK_CondCode, MCK__46_i32, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSHRNv2i32, Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1, { MCK_vshrn, MCK_CondCode, MCK__46_i64, MCK_DPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSLIv4i16, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsli, MCK_CondCode, MCK__46_16, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSLIv8i16, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsli, MCK_CondCode, MCK__46_16, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSLIv2i32, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsli, MCK_CondCode, MCK__46_32, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSLIv4i32, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsli, MCK_CondCode, MCK__46_32, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSLIv1i64, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsli, MCK_CondCode, MCK__46_64, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSLIv2i64, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsli, MCK_CondCode, MCK__46_64, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSLIv8i8, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsli, MCK_CondCode, MCK__46_8, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSLIv16i8, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsli, MCK_CondCode, MCK__46_8, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSRAsv4i16, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsra, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSRAsv8i16, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsra, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSRAsv2i32, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsra, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSRAsv4i32, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsra, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSRAsv1i64, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsra, MCK_CondCode, MCK__46_s64, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSRAsv2i64, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsra, MCK_CondCode, MCK__46_s64, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSRAsv8i8, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsra, MCK_CondCode, MCK__46_s8, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSRAsv16i8, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsra, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSRAuv4i16, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsra, MCK_CondCode, MCK__46_u16, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSRAuv8i16, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsra, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSRAuv2i32, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsra, MCK_CondCode, MCK__46_u32, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSRAuv4i32, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsra, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSRAuv1i64, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsra, MCK_CondCode, MCK__46_u64, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSRAuv2i64, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsra, MCK_CondCode, MCK__46_u64, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSRAuv8i8, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsra, MCK_CondCode, MCK__46_u8, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSRAuv16i8, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsra, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSRIv4i16, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsri, MCK_CondCode, MCK__46_16, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSRIv8i16, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsri, MCK_CondCode, MCK__46_16, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSRIv2i32, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsri, MCK_CondCode, MCK__46_32, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSRIv4i32, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsri, MCK_CondCode, MCK__46_32, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSRIv1i64, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsri, MCK_CondCode, MCK__46_64, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSRIv2i64, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsri, MCK_CondCode, MCK__46_64, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSRIv8i8, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsri, MCK_CondCode, MCK__46_8, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VSRIv16i8, Convert__Reg1_3__Tie0__Reg1_4__Imm1_5__CondCode2_1, { MCK_vsri, MCK_CondCode, MCK__46_8, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VSUBS, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsub, MCK_CondCode, MCK__46_f32, MCK_SPR, MCK_SPR, MCK_SPR }, 0},
    { ARM::VSUBfd_sfp, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsub, MCK_CondCode, MCK__46_f32, MCK_DPR_VFP2, MCK_DPR_VFP2, MCK_DPR_VFP2 }, 0},
    { ARM::VSUBfd, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsub, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VSUBfq, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsub, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VSUBD, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsub, MCK_CondCode, MCK__46_f64, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VSUBv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsub, MCK_CondCode, MCK__46_i16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VSUBv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsub, MCK_CondCode, MCK__46_i16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VSUBv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsub, MCK_CondCode, MCK__46_i32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VSUBv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsub, MCK_CondCode, MCK__46_i32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VSUBv1i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsub, MCK_CondCode, MCK__46_i64, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VSUBv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsub, MCK_CondCode, MCK__46_i64, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VSUBv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsub, MCK_CondCode, MCK__46_i8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VSUBv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsub, MCK_CondCode, MCK__46_i8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VSUBHNv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsubhn, MCK_CondCode, MCK__46_i16, MCK_DPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VSUBHNv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsubhn, MCK_CondCode, MCK__46_i32, MCK_DPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VSUBHNv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsubhn, MCK_CondCode, MCK__46_i64, MCK_DPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VSUBLsv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsubl, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VSUBLsv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsubl, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VSUBLsv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsubl, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VSUBLuv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsubl, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VSUBLuv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsubl, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VSUBLuv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsubl, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VSUBWsv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsubw, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_DPR }, 0},
    { ARM::VSUBWsv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsubw, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_DPR }, 0},
    { ARM::VSUBWsv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsubw, MCK_CondCode, MCK__46_s8, MCK_QPR, MCK_QPR, MCK_DPR }, 0},
    { ARM::VSUBWuv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsubw, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_QPR, MCK_DPR }, 0},
    { ARM::VSUBWuv2i64, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsubw, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_QPR, MCK_DPR }, 0},
    { ARM::VSUBWuv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vsubw, MCK_CondCode, MCK__46_u8, MCK_QPR, MCK_QPR, MCK_DPR }, 0},
    { ARM::VTSTv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vtst, MCK_CondCode, MCK__46_16, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VTSTv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vtst, MCK_CondCode, MCK__46_16, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VTSTv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vtst, MCK_CondCode, MCK__46_32, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VTSTv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vtst, MCK_CondCode, MCK__46_32, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::VTSTv8i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vtst, MCK_CondCode, MCK__46_8, MCK_DPR, MCK_DPR, MCK_DPR }, 0},
    { ARM::VTSTv16i8, Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1, { MCK_vtst, MCK_CondCode, MCK__46_8, MCK_QPR, MCK_QPR, MCK_QPR }, 0},
    { ARM::t2ADCSrr, Convert__Reg1_4__Reg1_5__Reg1_6__CondCode2_2__Imm1_1, { MCK_adc, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2ADCrr, Convert__Reg1_4__Reg1_5__Reg1_6__CondCode2_2__Imm1_1, { MCK_adc, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2ADCSrs, Convert__Reg1_4__Reg1_5__Imm2_6__CondCode2_2__Imm1_1, { MCK_adc, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::t2ADCrs, Convert__Reg1_4__Reg1_5__Imm2_6__CondCode2_2__Imm1_1, { MCK_adc, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::t2ADDrr, Convert__Reg1_4__Reg1_5__Reg1_6__CondCode2_2__Imm1_1, { MCK_add, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_GPR, MCK_rGPR }, 0},
    { ARM::t2ADDri, Convert__Reg1_4__Reg1_5__Imm1_6__CondCode2_2__Imm1_1, { MCK_add, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2ADDrs, Convert__Reg1_4__Reg1_5__Imm2_6__CondCode2_2__Imm1_1, { MCK_add, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2ADDrSPi, Convert__Reg1_4__Reg1_5__Imm1_6__CondCode2_2__Imm1_1, { MCK_add, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2ADDrSPs, Convert__Reg1_4__Reg1_5__Imm2_6__CondCode2_2__Imm1_1, { MCK_add, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::tLEApcrelJT, Convert__Reg1_2__Imm1_4__Imm1_6__CondCode2_1, { MCK_adr, MCK_CondCode, MCK_tGPR, MCK__35_, MCK_Imm, MCK__95_, MCK_Imm }, 0},
    { ARM::LEApcrelJT, Convert__Reg1_2__Imm1_4__Imm1_6__CondCode2_1, { MCK_adr, MCK_CondCode, MCK_GPR, MCK__35_, MCK_Imm, MCK__95_, MCK_Imm }, 0},
    { ARM::t2ANDrr, Convert__Reg1_4__Reg1_5__Reg1_6__CondCode2_2__Imm1_1, { MCK_and, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2ANDrs, Convert__Reg1_4__Reg1_5__Imm2_6__CondCode2_2__Imm1_1, { MCK_and, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::t2ASRrr, Convert__Reg1_4__Reg1_5__Reg1_6__CondCode2_2__Imm1_1, { MCK_asr, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2ASRri, Convert__Reg1_4__Reg1_5__Imm1_6__CondCode2_2__Imm1_1, { MCK_asr, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::t2BICrr, Convert__Reg1_4__Reg1_5__Reg1_6__CondCode2_2__Imm1_1, { MCK_bic, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2BICrs, Convert__Reg1_4__Reg1_5__Imm2_6__CondCode2_2__Imm1_1, { MCK_bic, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::t2EORrr, Convert__Reg1_4__Reg1_5__Reg1_6__CondCode2_2__Imm1_1, { MCK_eor, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2EORrs, Convert__Reg1_4__Reg1_5__Imm2_6__CondCode2_2__Imm1_1, { MCK_eor, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::LDC_OFFSET, Convert__Imm1_3__Imm1_5__Imm3_6__CondCode2_1, { MCK_ldc, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_Imm }, 0},
    { ARM::LDC2_OFFSET, Convert__Imm1_3__Imm1_5__Imm3_6__CondCode2_1, { MCK_ldc2, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_Imm }, 0},
    { ARM::LDC2L_OFFSET, Convert__Imm1_3__Imm1_5__Imm3_6__CondCode2_1, { MCK_ldc2l, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_Imm }, 0},
    { ARM::LDCL_OFFSET, Convert__Imm1_3__Imm1_5__Imm3_6__CondCode2_1, { MCK_ldcl, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_Imm }, 0},
    { ARM::LDR_POST, Convert__Reg1_2__Reg1_4__Tie1__Imm2_6__CondCode2_1, { MCK_ldr, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::t2LDR_POST, Convert__Reg1_2__Reg1_4__Tie1__Imm1_6__CondCode2_1, { MCK_ldr, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::LDRB_POST, Convert__Reg1_2__Reg1_4__Tie1__Imm2_6__CondCode2_1, { MCK_ldrb, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::t2LDRB_POST, Convert__Reg1_2__Reg1_4__Tie1__Imm1_6__CondCode2_1, { MCK_ldrb, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::LDRBT, Convert__Reg1_2__Reg1_4__Tie1__Imm2_6__CondCode2_1, { MCK_ldrbt, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::t2LDREXD, Convert__Reg1_2__Reg1_3__Reg1_5__CondCode2_1, { MCK_ldrexd, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK__91_, MCK_rGPR, MCK__93_ }, 0},
    { ARM::LDREXD, Convert__Reg1_2__Reg1_3__Reg1_5__CondCode2_1, { MCK_ldrexd, MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_ }, 0},
    { ARM::LDRH_POST, Convert__Reg1_2__Reg1_4__Tie1__Imm2_6__CondCode2_1, { MCK_ldrh, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::t2LDRH_POST, Convert__Reg1_2__Reg1_4__Tie1__Imm1_6__CondCode2_1, { MCK_ldrh, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::LDRHT, Convert__Reg1_2__Reg1_4__Tie1__Imm2_6__CondCode2_1, { MCK_ldrht, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::LDRSB_POST, Convert__Reg1_2__Reg1_4__Tie1__Imm2_6__CondCode2_1, { MCK_ldrsb, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::t2LDRSB_POST, Convert__Reg1_2__Reg1_4__Tie1__Imm1_6__CondCode2_1, { MCK_ldrsb, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::LDRSBT, Convert__Reg1_2__Reg1_4__Tie1__Imm2_6__CondCode2_1, { MCK_ldrsbt, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::LDRSH_POST, Convert__Reg1_2__Reg1_4__Tie1__Imm2_6__CondCode2_1, { MCK_ldrsh, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::t2LDRSH_POST, Convert__Reg1_2__Reg1_4__Tie1__Imm1_6__CondCode2_1, { MCK_ldrsh, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::LDRSHT, Convert__Reg1_2__Reg1_4__Tie1__Imm2_6__CondCode2_1, { MCK_ldrsht, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::LDRT, Convert__Reg1_2__Reg1_4__Tie1__Imm2_6__CondCode2_1, { MCK_ldrt, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::t2LSLrr, Convert__Reg1_4__Reg1_5__Reg1_6__CondCode2_2__Imm1_1, { MCK_lsl, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2LSLri, Convert__Reg1_4__Reg1_5__Imm1_6__CondCode2_2__Imm1_1, { MCK_lsl, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::t2LSRrr, Convert__Reg1_4__Reg1_5__Reg1_6__CondCode2_2__Imm1_1, { MCK_lsr, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2LSRri, Convert__Reg1_4__Reg1_5__Imm1_6__CondCode2_2__Imm1_1, { MCK_lsr, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::DSB_MCR, Convert__Reg1_3, { MCK_mcr, MCK_p15, MCK_0, MCK_GPR, MCK_c7, MCK_c10, MCK_4 }, 0},
    { ARM::DMB_MCR, Convert__Reg1_3, { MCK_mcr, MCK_p15, MCK_0, MCK_GPR, MCK_c7, MCK_c10, MCK_5 }, 0},
    { ARM::MLA, Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_1__Imm1_2, { MCK_mla, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2ORRrr, Convert__Reg1_4__Reg1_5__Reg1_6__CondCode2_2__Imm1_1, { MCK_orr, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2ORRrs, Convert__Reg1_4__Reg1_5__Imm2_6__CondCode2_2__Imm1_1, { MCK_orr, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::t2RORrr, Convert__Reg1_4__Reg1_5__Reg1_6__CondCode2_2__Imm1_1, { MCK_ror, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2RORri, Convert__Reg1_4__Reg1_5__Imm1_6__CondCode2_2__Imm1_1, { MCK_ror, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::t2RSBri, Convert__Reg1_4__Reg1_5__Imm1_6__CondCode2_2__Imm1_1, { MCK_rsb, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::t2SBCSrr, Convert__Reg1_4__Reg1_5__Reg1_6__CondCode2_2__Imm1_1, { MCK_sbc, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2SBCrr, Convert__Reg1_4__Reg1_5__Reg1_6__CondCode2_2__Imm1_1, { MCK_sbc, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_rGPR }, 0},
    { ARM::t2SBCSrs, Convert__Reg1_4__Reg1_5__Imm2_6__CondCode2_2__Imm1_1, { MCK_sbc, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::t2SBCrs, Convert__Reg1_4__Reg1_5__Imm2_6__CondCode2_2__Imm1_1, { MCK_sbc, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, 0},
    { ARM::SMLAL, Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_1__Imm1_2, { MCK_smlal, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::SMULL, Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_1__Imm1_2, { MCK_smull, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::STC_OFFSET, Convert__Imm1_3__Imm1_5__Imm3_6__CondCode2_1, { MCK_stc, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_Imm }, 0},
    { ARM::STC2_OFFSET, Convert__Imm1_3__Imm1_5__Imm3_6__CondCode2_1, { MCK_stc2, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_Imm }, 0},
    { ARM::STC2L_OFFSET, Convert__Imm1_3__Imm1_5__Imm3_6__CondCode2_1, { MCK_stc2l, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_Imm }, 0},
    { ARM::STCL_OFFSET, Convert__Imm1_3__Imm1_5__Imm3_6__CondCode2_1, { MCK_stcl, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_Imm }, 0},
    { ARM::STR_POST, Convert__Reg1_4__Reg1_2__Tie0__Imm2_6__CondCode2_1, { MCK_str, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::t2STR_POST, Convert__Reg1_4__Reg1_2__Tie0__Imm1_6__CondCode2_1, { MCK_str, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::STRB_POST, Convert__Reg1_4__Reg1_2__Tie0__Imm2_6__CondCode2_1, { MCK_strb, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::t2STRB_POST, Convert__Reg1_4__Reg1_2__Tie0__Imm1_6__CondCode2_1, { MCK_strb, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::STRBT, Convert__Reg1_4__Reg1_2__Tie0__Imm2_6__CondCode2_1, { MCK_strbt, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::t2STREX, Convert__Reg1_2__Reg1_3__Reg1_5__CondCode2_1, { MCK_strex, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK__91_, MCK_rGPR, MCK__93_ }, 0},
    { ARM::STREX, Convert__Reg1_2__Reg1_3__Reg1_5__CondCode2_1, { MCK_strex, MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_ }, 0},
    { ARM::t2STREXB, Convert__Reg1_2__Reg1_3__Reg1_5__CondCode2_1, { MCK_strexb, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK__91_, MCK_rGPR, MCK__93_ }, 0},
    { ARM::STREXB, Convert__Reg1_2__Reg1_3__Reg1_5__CondCode2_1, { MCK_strexb, MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_ }, 0},
    { ARM::t2STREXH, Convert__Reg1_2__Reg1_3__Reg1_5__CondCode2_1, { MCK_strexh, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK__91_, MCK_rGPR, MCK__93_ }, 0},
    { ARM::STREXH, Convert__Reg1_2__Reg1_3__Reg1_5__CondCode2_1, { MCK_strexh, MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_ }, 0},
    { ARM::STRH_POST, Convert__Reg1_4__Reg1_2__Tie0__Imm2_6__CondCode2_1, { MCK_strh, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::t2STRH_POST, Convert__Reg1_4__Reg1_2__Tie0__Imm1_6__CondCode2_1, { MCK_strh, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::STRHT, Convert__Reg1_4__Reg1_2__Tie0__Imm2_6__CondCode2_1, { MCK_strht, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::STRT, Convert__Reg1_4__Reg1_2__Tie0__Imm2_6__CondCode2_1, { MCK_strt, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::t2SUBrr, Convert__Reg1_4__Reg1_5__Reg1_6__CondCode2_2__Imm1_1, { MCK_sub, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_GPR, MCK_rGPR }, 0},
    { ARM::t2SUBri, Convert__Reg1_4__Reg1_5__Imm1_6__CondCode2_2__Imm1_1, { MCK_sub, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2SUBrs, Convert__Reg1_4__Reg1_5__Imm2_6__CondCode2_2__Imm1_1, { MCK_sub, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::t2SUBrSPi, Convert__Reg1_4__Reg1_5__Imm1_6__CondCode2_2__Imm1_1, { MCK_sub, MCK_Imm, MCK_CondCode, MCK__46_w, MCK_GPR, MCK_GPR, MCK_Imm }, 0},
    { ARM::SWP, Convert__Reg1_2__Reg1_3__Reg1_5__CondCode2_1, { MCK_swp, MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_ }, 0},
    { ARM::SWPB, Convert__Reg1_2__Reg1_3__Reg1_5__CondCode2_1, { MCK_swpb, MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_ }, 0},
    { ARM::t2SXTABrr_rot, Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_sxtab, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, 0},
    { ARM::SXTABrr_rot, Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_sxtab, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, 0},
    { ARM::t2SXTAB16rr_rot, Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_sxtab16, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, 0},
    { ARM::SXTAB16rr_rot, Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_sxtab16, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, 0},
    { ARM::t2SXTAHrr_rot, Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_sxtah, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, 0},
    { ARM::SXTAHrr_rot, Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_sxtah, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, 0},
    { ARM::t2SXTBr_rot, Convert__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_sxtb, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, 0},
    { ARM::t2SXTHr_rot, Convert__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_sxth, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, 0},
    { ARM::UMLAL, Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_1__Imm1_2, { MCK_umlal, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::UMULL, Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_1__Imm1_2, { MCK_umull, MCK_CondCode, MCK_Imm, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
    { ARM::t2UXTABrr_rot, Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_uxtab, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, 0},
    { ARM::UXTABrr_rot, Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_uxtab, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, 0},
    { ARM::t2UXTAB16rr_rot, Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_uxtab16, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, 0},
    { ARM::UXTAB16rr_rot, Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_uxtab16, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, 0},
    { ARM::t2UXTAHrr_rot, Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_uxtah, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, 0},
    { ARM::UXTAHrr_rot, Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_uxtah, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, 0},
    { ARM::t2UXTBr_rot, Convert__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_uxtb, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, 0},
    { ARM::t2UXTHr_rot, Convert__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_uxth, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, 0},
    { ARM::VCVTxs2fd, Convert__Reg1_4__Reg1_5__Imm1_6__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_f32, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VCVTxs2fq, Convert__Reg1_4__Reg1_5__Imm1_6__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_f32, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VCVTxu2fd, Convert__Reg1_4__Reg1_5__Imm1_6__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_f32, MCK__46_u32, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VCVTxu2fq, Convert__Reg1_4__Reg1_5__Imm1_6__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_f32, MCK__46_u32, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VCVTf2xsd, Convert__Reg1_4__Reg1_5__Imm1_6__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_s32, MCK__46_f32, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VCVTf2xsq, Convert__Reg1_4__Reg1_5__Imm1_6__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_s32, MCK__46_f32, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VCVTf2xud, Convert__Reg1_4__Reg1_5__Imm1_6__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_u32, MCK__46_f32, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VCVTf2xuq, Convert__Reg1_4__Reg1_5__Imm1_6__CondCode2_1, { MCK_vcvt, MCK_CondCode, MCK__46_u32, MCK__46_f32, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VEXTd16, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1, { MCK_vext, MCK_CondCode, MCK__46_16, MCK_DPR, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VEXTq16, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1, { MCK_vext, MCK_CondCode, MCK__46_16, MCK_QPR, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VEXTd32, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1, { MCK_vext, MCK_CondCode, MCK__46_32, MCK_DPR, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VEXTdf, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1, { MCK_vext, MCK_CondCode, MCK__46_32, MCK_DPR, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VEXTq32, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1, { MCK_vext, MCK_CondCode, MCK__46_32, MCK_QPR, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VEXTqf, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1, { MCK_vext, MCK_CondCode, MCK__46_32, MCK_QPR, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VEXTd8, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1, { MCK_vext, MCK_CondCode, MCK__46_8, MCK_DPR, MCK_DPR, MCK_DPR, MCK_Imm }, 0},
    { ARM::VEXTq8, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1, { MCK_vext, MCK_CondCode, MCK__46_8, MCK_QPR, MCK_QPR, MCK_QPR, MCK_Imm }, 0},
    { ARM::VLD1d16, Convert__Reg1_4__Imm2_6__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD1d32, Convert__Reg1_4__Imm2_6__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD1d64, Convert__Reg1_4__Imm2_6__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_64, MCK__123_, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD1d8, Convert__Reg1_4__Imm2_6__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST1d16, Convert__Imm2_6__Reg1_4__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST1d32, Convert__Imm2_6__Reg1_4__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST1d64, Convert__Imm2_6__Reg1_4__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_64, MCK__123_, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST1d8, Convert__Imm2_6__Reg1_4__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::t2LEApcrelJT, Convert__Reg1_3__Imm1_5__Imm1_7__CondCode2_1, { MCK_adr, MCK_CondCode, MCK__46_w, MCK_rGPR, MCK__35_, MCK_Imm, MCK__95_, MCK_Imm }, 0},
    { ARM::LDC_PRE, Convert__Imm1_3__Imm1_5__Imm3_6__CondCode2_1, { MCK_ldc, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_Imm, MCK__33_ }, 0},
    { ARM::LDC2_PRE, Convert__Imm1_3__Imm1_5__Imm3_6__CondCode2_1, { MCK_ldc2, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_Imm, MCK__33_ }, 0},
    { ARM::LDC2L_PRE, Convert__Imm1_3__Imm1_5__Imm3_6__CondCode2_1, { MCK_ldc2l, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_Imm, MCK__33_ }, 0},
    { ARM::LDCL_PRE, Convert__Imm1_3__Imm1_5__Imm3_6__CondCode2_1, { MCK_ldcl, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_Imm, MCK__33_ }, 0},
    { ARM::LDRD_POST, Convert__Reg1_2__Reg1_3__Reg1_5__Tie2__Imm2_7__CondCode2_1, { MCK_ldrd, MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::t2LDRD_POST, Convert__Reg1_2__Reg1_3__Reg1_5__Imm1_7__CondCode2_1, { MCK_ldrd, MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::MCRR2, Convert__Imm1_2__Imm1_3__Reg1_4__Reg1_5__Imm1_7, { MCK_mcrr2, MCK_p, MCK_Imm, MCK_Imm, MCK_GPR, MCK_GPR, MCK_cr, MCK_Imm }, 0},
    { ARM::MRRC2, Convert__Imm1_2__Imm1_3__Reg1_4__Reg1_5__Imm1_7, { MCK_mrrc2, MCK_p, MCK_Imm, MCK_Imm, MCK_GPR, MCK_GPR, MCK_cr, MCK_Imm }, 0},
    { ARM::t2PLDs, Convert__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_pld, MCK_CondCode, MCK__91_, MCK_GPR, MCK_GPR, MCK_lsl, MCK_Imm, MCK__93_ }, 0},
    { ARM::t2PLDWs, Convert__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_pldw, MCK_CondCode, MCK__91_, MCK_GPR, MCK_GPR, MCK_lsl, MCK_Imm, MCK__93_ }, 0},
    { ARM::t2PLIs, Convert__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_pli, MCK_CondCode, MCK__91_, MCK_GPR, MCK_GPR, MCK_lsl, MCK_Imm, MCK__93_ }, 0},
    { ARM::STC_PRE, Convert__Imm1_3__Imm1_5__Imm3_6__CondCode2_1, { MCK_stc, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_Imm, MCK__33_ }, 0},
    { ARM::STC2_PRE, Convert__Imm1_3__Imm1_5__Imm3_6__CondCode2_1, { MCK_stc2, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_Imm, MCK__33_ }, 0},
    { ARM::STC2L_PRE, Convert__Imm1_3__Imm1_5__Imm3_6__CondCode2_1, { MCK_stc2l, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_Imm, MCK__33_ }, 0},
    { ARM::STCL_PRE, Convert__Imm1_3__Imm1_5__Imm3_6__CondCode2_1, { MCK_stcl, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_Imm, MCK__33_ }, 0},
    { ARM::STR_PRE, Convert__Reg1_4__Reg1_2__Tie0__Imm2_5__CondCode2_1, { MCK_str, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK_Imm, MCK__93_, MCK__33_ }, 0},
    { ARM::t2STR_PRE, Convert__Reg1_4__Reg1_2__Tie0__Imm1_5__CondCode2_1, { MCK_str, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK_Imm, MCK__93_, MCK__33_ }, 0},
    { ARM::STRB_PRE, Convert__Reg1_4__Reg1_2__Tie0__Imm2_5__CondCode2_1, { MCK_strb, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK_Imm, MCK__93_, MCK__33_ }, 0},
    { ARM::t2STRB_PRE, Convert__Reg1_4__Reg1_2__Tie0__Imm1_5__CondCode2_1, { MCK_strb, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK_Imm, MCK__93_, MCK__33_ }, 0},
    { ARM::STRD_POST, Convert__Reg1_5__Reg1_2__Reg1_3__Tie0__Imm2_7__CondCode2_1, { MCK_strd, MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::t2STRD_POST, Convert__Reg1_2__Reg1_3__Reg1_5__Imm1_7__CondCode2_1, { MCK_strd, MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::t2STREXD, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_6__CondCode2_1, { MCK_strexd, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK__91_, MCK_rGPR, MCK__93_ }, 0},
    { ARM::STREXD, Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_6__CondCode2_1, { MCK_strexd, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_ }, 0},
    { ARM::STRH_PRE, Convert__Reg1_4__Reg1_2__Tie0__Imm2_5__CondCode2_1, { MCK_strh, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK_Imm, MCK__93_, MCK__33_ }, 0},
    { ARM::t2STRH_PRE, Convert__Reg1_4__Reg1_2__Tie0__Imm1_5__CondCode2_1, { MCK_strh, MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK_Imm, MCK__93_, MCK__33_ }, 0},
    { ARM::t2TBHgen, Convert__Reg1_3__Reg1_4__CondCode2_1, { MCK_tbh, MCK_CondCode, MCK__91_, MCK_GPR, MCK_GPR, MCK_lsl, MCK__35_1, MCK__93_ }, 0},
    { ARM::VDUPLN16d, Convert__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_vdup, MCK_CondCode, MCK__46_16, MCK_DPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VDUPLN16q, Convert__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_vdup, MCK_CondCode, MCK__46_16, MCK_QPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VDUPLN32d, Convert__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_vdup, MCK_CondCode, MCK__46_32, MCK_DPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VDUPLNfd, Convert__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_vdup, MCK_CondCode, MCK__46_32, MCK_DPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VDUPLN32q, Convert__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_vdup, MCK_CondCode, MCK__46_32, MCK_QPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VDUPLNfq, Convert__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_vdup, MCK_CondCode, MCK__46_32, MCK_QPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VDUPLN8d, Convert__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_vdup, MCK_CondCode, MCK__46_8, MCK_DPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VDUPLN8q, Convert__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_vdup, MCK_CondCode, MCK__46_8, MCK_QPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VLD1d16_UPD, Convert__Reg1_4__Reg1_6__Tie1__Imp__Imm1_7__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD1q16, Convert__Reg1_4__Reg1_5__Imm2_7__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD1d32_UPD, Convert__Reg1_4__Reg1_6__Tie1__Imp__Imm1_7__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD1q32, Convert__Reg1_4__Reg1_5__Imm2_7__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD1d64_UPD, Convert__Reg1_4__Reg1_6__Tie1__Imp__Imm1_7__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_64, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD1q64, Convert__Reg1_4__Reg1_5__Imm2_7__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_64, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD1d8_UPD, Convert__Reg1_4__Reg1_6__Tie1__Imp__Imm1_7__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD1q8, Convert__Reg1_4__Reg1_5__Imm2_7__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD2b16, Convert__Reg1_4__Reg1_5__Imm2_7__CondCode2_1, { MCK_vld2, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD2d16, Convert__Reg1_4__Reg1_5__Imm2_7__CondCode2_1, { MCK_vld2, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD2b32, Convert__Reg1_4__Reg1_5__Imm2_7__CondCode2_1, { MCK_vld2, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD2d32, Convert__Reg1_4__Reg1_5__Imm2_7__CondCode2_1, { MCK_vld2, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD2b8, Convert__Reg1_4__Reg1_5__Imm2_7__CondCode2_1, { MCK_vld2, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD2d8, Convert__Reg1_4__Reg1_5__Imm2_7__CondCode2_1, { MCK_vld2, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VSETLNi16, Convert__Reg1_3__Tie0__Reg1_7__Imm1_5__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK__46_16, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_, MCK_GPR }, 0},
    { ARM::VGETLNi32, Convert__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK__46_32, MCK_GPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VSETLNi32, Convert__Reg1_3__Tie0__Reg1_7__Imm1_5__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK__46_32, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_, MCK_GPR }, 0},
    { ARM::VSETLNi8, Convert__Reg1_3__Tie0__Reg1_7__Imm1_5__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK__46_8, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_, MCK_GPR }, 0},
    { ARM::VGETLNs16, Convert__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK__46_s16, MCK_GPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VGETLNs8, Convert__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK__46_s8, MCK_GPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VGETLNu16, Convert__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK__46_u16, MCK_GPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VGETLNu8, Convert__Reg1_3__Reg1_4__Imm1_6__CondCode2_1, { MCK_vmov, MCK_CondCode, MCK__46_u8, MCK_GPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VST1d16_UPD, Convert__Reg1_6__Tie0__Imp__Imm1_7__Reg1_4__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST1q16, Convert__Imm2_7__Reg1_4__Reg1_5__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST1d32_UPD, Convert__Reg1_6__Tie0__Imp__Imm1_7__Reg1_4__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST1q32, Convert__Imm2_7__Reg1_4__Reg1_5__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST1d64_UPD, Convert__Reg1_6__Tie0__Imp__Imm1_7__Reg1_4__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_64, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST1q64, Convert__Imm2_7__Reg1_4__Reg1_5__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_64, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST1d8_UPD, Convert__Reg1_6__Tie0__Imp__Imm1_7__Reg1_4__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST1q8, Convert__Imm2_7__Reg1_4__Reg1_5__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST2b16, Convert__Imm2_7__Reg1_4__Reg1_5__CondCode2_1, { MCK_vst2, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST2d16, Convert__Imm2_7__Reg1_4__Reg1_5__CondCode2_1, { MCK_vst2, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST2b32, Convert__Imm2_7__Reg1_4__Reg1_5__CondCode2_1, { MCK_vst2, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST2d32, Convert__Imm2_7__Reg1_4__Reg1_5__CondCode2_1, { MCK_vst2, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST2b8, Convert__Imm2_7__Reg1_4__Reg1_5__CondCode2_1, { MCK_vst2, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST2d8, Convert__Imm2_7__Reg1_4__Reg1_5__CondCode2_1, { MCK_vst2, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VTBL1, Convert__Reg1_3__Reg1_5__Reg1_7__CondCode2_1, { MCK_vtbl, MCK_CondCode, MCK__46_8, MCK_DPR, MCK__123_, MCK_DPR, MCK__125_, MCK_DPR }, 0},
    { ARM::VTBX1, Convert__Reg1_3__Tie0__Reg1_5__Reg1_7__CondCode2_1, { MCK_vtbx, MCK_CondCode, MCK__46_8, MCK_DPR, MCK__123_, MCK_DPR, MCK__125_, MCK_DPR }, 0},
    { ARM::t2LDRD_PRE, Convert__Reg1_2__Reg1_3__Reg1_5__Imm1_6__CondCode2_1, { MCK_ldrd, MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK_Imm, MCK__93_, MCK__33_ }, 0},
    { ARM::MCRR, Convert__Imm1_3__Imm1_4__Reg1_5__Reg1_6__Imm1_8__CondCode2_1, { MCK_mcrr, MCK_CondCode, MCK_p, MCK_Imm, MCK_Imm, MCK_GPR, MCK_GPR, MCK_cr, MCK_Imm }, 0},
    { ARM::MRRC, Convert__Imm1_3__Imm1_4__Reg1_5__Reg1_6__Imm1_8__CondCode2_1, { MCK_mrrc, MCK_CondCode, MCK_p, MCK_Imm, MCK_Imm, MCK_GPR, MCK_GPR, MCK_cr, MCK_Imm }, 0},
    { ARM::STRD_PRE, Convert__Reg1_5__Reg1_2__Reg1_3__Tie0__Imm2_6__CondCode2_1, { MCK_strd, MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK_Imm, MCK__93_, MCK__33_ }, 0},
    { ARM::t2STRD_PRE, Convert__Reg1_2__Reg1_3__Reg1_5__Imm1_6__CondCode2_1, { MCK_strd, MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK_Imm, MCK__93_, MCK__33_ }, 0},
    { ARM::VLD1d16T, Convert__Reg1_4__Reg1_5__Reg1_6__Imm2_8__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD1d32T, Convert__Reg1_4__Reg1_5__Reg1_6__Imm2_8__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD1d64T, Convert__Reg1_4__Reg1_5__Reg1_6__Imm2_8__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_64, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD1d8T, Convert__Reg1_4__Reg1_5__Reg1_6__Imm2_8__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD2b16_UPD, Convert__Reg1_4__Reg1_5__Reg1_7__Tie2__Imp__Imm1_8__CondCode2_1, { MCK_vld2, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD2d16_UPD, Convert__Reg1_4__Reg1_5__Reg1_7__Tie2__Imp__Imm1_8__CondCode2_1, { MCK_vld2, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD2b32_UPD, Convert__Reg1_4__Reg1_5__Reg1_7__Tie2__Imp__Imm1_8__CondCode2_1, { MCK_vld2, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD2d32_UPD, Convert__Reg1_4__Reg1_5__Reg1_7__Tie2__Imp__Imm1_8__CondCode2_1, { MCK_vld2, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD2b8_UPD, Convert__Reg1_4__Reg1_5__Reg1_7__Tie2__Imp__Imm1_8__CondCode2_1, { MCK_vld2, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD2d8_UPD, Convert__Reg1_4__Reg1_5__Reg1_7__Tie2__Imp__Imm1_8__CondCode2_1, { MCK_vld2, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD3d16, Convert__Reg1_4__Reg1_5__Reg1_6__Imm2_8__CondCode2_1, { MCK_vld3, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD3q16, Convert__Reg1_4__Reg1_5__Reg1_6__Imm2_8__CondCode2_1, { MCK_vld3, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD3d32, Convert__Reg1_4__Reg1_5__Reg1_6__Imm2_8__CondCode2_1, { MCK_vld3, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD3q32, Convert__Reg1_4__Reg1_5__Reg1_6__Imm2_8__CondCode2_1, { MCK_vld3, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD3d8, Convert__Reg1_4__Reg1_5__Reg1_6__Imm2_8__CondCode2_1, { MCK_vld3, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD3q8, Convert__Reg1_4__Reg1_5__Reg1_6__Imm2_8__CondCode2_1, { MCK_vld3, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VMLAslfd, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmla, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMLAslfq, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmla, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMLAslv4i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmla, MCK_CondCode, MCK__46_i16, MCK_DPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMLAslv8i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmla, MCK_CondCode, MCK__46_i16, MCK_QPR, MCK_QPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMLAslv2i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmla, MCK_CondCode, MCK__46_i32, MCK_DPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMLAslv4i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmla, MCK_CondCode, MCK__46_i32, MCK_QPR, MCK_QPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMLALslsv4i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmlal, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMLALslsv2i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmlal, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMLALsluv4i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmlal, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMLALsluv2i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmlal, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMLSslfd, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmls, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMLSslfq, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmls, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMLSslv4i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmls, MCK_CondCode, MCK__46_i16, MCK_DPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMLSslv8i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmls, MCK_CondCode, MCK__46_i16, MCK_QPR, MCK_QPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMLSslv2i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmls, MCK_CondCode, MCK__46_i32, MCK_DPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMLSslv4i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmls, MCK_CondCode, MCK__46_i32, MCK_QPR, MCK_QPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMLSLslsv4i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmlsl, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMLSLslsv2i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmlsl, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMLSLsluv4i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmlsl, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMLSLsluv2i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmlsl, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMULslfd, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmul, MCK_CondCode, MCK__46_f32, MCK_DPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMULslfq, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmul, MCK_CondCode, MCK__46_f32, MCK_QPR, MCK_QPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMULslv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmul, MCK_CondCode, MCK__46_i16, MCK_DPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMULslv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmul, MCK_CondCode, MCK__46_i16, MCK_QPR, MCK_QPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMULslv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmul, MCK_CondCode, MCK__46_i32, MCK_DPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMULslv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmul, MCK_CondCode, MCK__46_i32, MCK_QPR, MCK_QPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMULLslsv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmull, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMULLslsv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmull, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMULLsluv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmull, MCK_CondCode, MCK__46_u16, MCK_QPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VMULLsluv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vmull, MCK_CondCode, MCK__46_u32, MCK_QPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VQDMLALslv4i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vqdmlal, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VQDMLALslv2i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vqdmlal, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VQDMLSLslv4i16, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vqdmlsl, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VQDMLSLslv2i32, Convert__Reg1_3__Tie0__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vqdmlsl, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VQDMULHslv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vqdmulh, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VQDMULHslv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vqdmulh, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VQDMULHslv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vqdmulh, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VQDMULHslv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vqdmulh, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VQDMULLslv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vqdmull, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VQDMULLslv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vqdmull, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VQRDMULHslv4i16, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vqrdmulh, MCK_CondCode, MCK__46_s16, MCK_DPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VQRDMULHslv8i16, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vqrdmulh, MCK_CondCode, MCK__46_s16, MCK_QPR, MCK_QPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VQRDMULHslv2i32, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vqrdmulh, MCK_CondCode, MCK__46_s32, MCK_DPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VQRDMULHslv4i32, Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_7__CondCode2_1, { MCK_vqrdmulh, MCK_CondCode, MCK__46_s32, MCK_QPR, MCK_QPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, 0},
    { ARM::VST1d16T, Convert__Imm2_8__Reg1_4__Reg1_5__Reg1_6__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST1d32T, Convert__Imm2_8__Reg1_4__Reg1_5__Reg1_6__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST1d64T, Convert__Imm2_8__Reg1_4__Reg1_5__Reg1_6__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_64, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST1d8T, Convert__Imm2_8__Reg1_4__Reg1_5__Reg1_6__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST2b16_UPD, Convert__Reg1_7__Tie0__Imp__Imm1_8__Reg1_4__Reg1_5__CondCode2_1, { MCK_vst2, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST2d16_UPD, Convert__Reg1_7__Tie0__Imp__Imm1_8__Reg1_4__Reg1_5__CondCode2_1, { MCK_vst2, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST2b32_UPD, Convert__Reg1_7__Tie0__Imp__Imm1_8__Reg1_4__Reg1_5__CondCode2_1, { MCK_vst2, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST2d32_UPD, Convert__Reg1_7__Tie0__Imp__Imm1_8__Reg1_4__Reg1_5__CondCode2_1, { MCK_vst2, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST2b8_UPD, Convert__Reg1_7__Tie0__Imp__Imm1_8__Reg1_4__Reg1_5__CondCode2_1, { MCK_vst2, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST2d8_UPD, Convert__Reg1_7__Tie0__Imp__Imm1_8__Reg1_4__Reg1_5__CondCode2_1, { MCK_vst2, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST3d16, Convert__Imm2_8__Reg1_4__Reg1_5__Reg1_6__CondCode2_1, { MCK_vst3, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST3q16, Convert__Imm2_8__Reg1_4__Reg1_5__Reg1_6__CondCode2_1, { MCK_vst3, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST3d32, Convert__Imm2_8__Reg1_4__Reg1_5__Reg1_6__CondCode2_1, { MCK_vst3, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST3q32, Convert__Imm2_8__Reg1_4__Reg1_5__Reg1_6__CondCode2_1, { MCK_vst3, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST3d8, Convert__Imm2_8__Reg1_4__Reg1_5__Reg1_6__CondCode2_1, { MCK_vst3, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST3q8, Convert__Imm2_8__Reg1_4__Reg1_5__Reg1_6__CondCode2_1, { MCK_vst3, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VTBL2, Convert__Reg1_3__Reg1_5__Reg1_6__Reg1_8__CondCode2_1, { MCK_vtbl, MCK_CondCode, MCK__46_8, MCK_DPR, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_DPR }, 0},
    { ARM::VTBX2, Convert__Reg1_3__Tie0__Reg1_5__Reg1_6__Reg1_8__CondCode2_1, { MCK_vtbx, MCK_CondCode, MCK__46_8, MCK_DPR, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_DPR }, 0},
    { ARM::LDC_OPTION, Convert__Imm1_3__Imm1_5__Reg1_7__Imm1_9__CondCode2_1, { MCK_ldc, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::LDC_POST, Convert__Imm1_3__Imm1_5__Reg1_7__Imm2_9__CondCode2_1, { MCK_ldc, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::LDC2_OPTION, Convert__Imm1_3__Imm1_5__Reg1_7__Imm1_9__CondCode2_1, { MCK_ldc2, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::LDC2_POST, Convert__Imm1_3__Imm1_5__Reg1_7__Imm2_9__CondCode2_1, { MCK_ldc2, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::LDC2L_OPTION, Convert__Imm1_3__Imm1_5__Reg1_7__Imm1_9__CondCode2_1, { MCK_ldc2l, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::LDC2L_POST, Convert__Imm1_3__Imm1_5__Reg1_7__Imm2_9__CondCode2_1, { MCK_ldc2l, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::LDCL_OPTION, Convert__Imm1_3__Imm1_5__Reg1_7__Imm1_9__CondCode2_1, { MCK_ldcl, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::LDCL_POST, Convert__Imm1_3__Imm1_5__Reg1_7__Imm2_9__CondCode2_1, { MCK_ldcl, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::MCR2, Convert__Imm1_2__Imm1_3__Reg1_4__Imm1_6__Imm1_8__Imm1_9, { MCK_mcr2, MCK_p, MCK_Imm, MCK_Imm, MCK_GPR, MCK_cr, MCK_Imm, MCK_cr, MCK_Imm, MCK_Imm }, 0},
    { ARM::MRC2, Convert__Imm1_2__Imm1_3__Reg1_4__Imm1_6__Imm1_8__Imm1_9, { MCK_mrc2, MCK_p, MCK_Imm, MCK_Imm, MCK_GPR, MCK_cr, MCK_Imm, MCK_cr, MCK_Imm, MCK_Imm }, 0},
    { ARM::STC_OPTION, Convert__Imm1_3__Imm1_5__Reg1_7__Imm1_9__CondCode2_1, { MCK_stc, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::STC_POST, Convert__Imm1_3__Imm1_5__Reg1_7__Imm2_9__CondCode2_1, { MCK_stc, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::STC2_OPTION, Convert__Imm1_3__Imm1_5__Reg1_7__Imm1_9__CondCode2_1, { MCK_stc2, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::STC2_POST, Convert__Imm1_3__Imm1_5__Reg1_7__Imm2_9__CondCode2_1, { MCK_stc2, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::STC2L_OPTION, Convert__Imm1_3__Imm1_5__Reg1_7__Imm1_9__CondCode2_1, { MCK_stc2l, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::STC2L_POST, Convert__Imm1_3__Imm1_5__Reg1_7__Imm2_9__CondCode2_1, { MCK_stc2l, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::STCL_OPTION, Convert__Imm1_3__Imm1_5__Reg1_7__Imm1_9__CondCode2_1, { MCK_stcl, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::STCL_POST, Convert__Imm1_3__Imm1_5__Reg1_7__Imm2_9__CondCode2_1, { MCK_stcl, MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, 0},
    { ARM::VLD1d16T_UPD, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie3__Imp__Imm1_9__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD1d16Q, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Imm2_9__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD1d32T_UPD, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie3__Imp__Imm1_9__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD1d32Q, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Imm2_9__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD1d64T_UPD, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie3__Imp__Imm1_9__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_64, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD1d64Q, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Imm2_9__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_64, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD1d8T_UPD, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie3__Imp__Imm1_9__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD1d8Q, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Imm2_9__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD2q16, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Imm2_9__CondCode2_1, { MCK_vld2, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD2q32, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Imm2_9__CondCode2_1, { MCK_vld2, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD2q8, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Imm2_9__CondCode2_1, { MCK_vld2, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD3d16_UPD, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie3__Imp__Imm1_9__CondCode2_1, { MCK_vld3, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD3q16_UPD, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie3__Imp__Imm1_9__CondCode2_1, { MCK_vld3, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD3d32_UPD, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie3__Imp__Imm1_9__CondCode2_1, { MCK_vld3, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD3q32_UPD, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie3__Imp__Imm1_9__CondCode2_1, { MCK_vld3, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD3d8_UPD, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie3__Imp__Imm1_9__CondCode2_1, { MCK_vld3, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD3q8_UPD, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie3__Imp__Imm1_9__CondCode2_1, { MCK_vld3, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD4d16, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Imm2_9__CondCode2_1, { MCK_vld4, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD4q16, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Imm2_9__CondCode2_1, { MCK_vld4, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD4d32, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Imm2_9__CondCode2_1, { MCK_vld4, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD4q32, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Imm2_9__CondCode2_1, { MCK_vld4, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD4d8, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Imm2_9__CondCode2_1, { MCK_vld4, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VLD4q8, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Imm2_9__CondCode2_1, { MCK_vld4, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST1d16T_UPD, Convert__Reg1_8__Tie0__Imp__Imm1_9__Reg1_4__Reg1_5__Reg1_6__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST1d16Q, Convert__Imm2_9__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST1d32T_UPD, Convert__Reg1_8__Tie0__Imp__Imm1_9__Reg1_4__Reg1_5__Reg1_6__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST1d32Q, Convert__Imm2_9__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST1d64T_UPD, Convert__Reg1_8__Tie0__Imp__Imm1_9__Reg1_4__Reg1_5__Reg1_6__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_64, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST1d64Q, Convert__Imm2_9__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_64, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST1d8T_UPD, Convert__Reg1_8__Tie0__Imp__Imm1_9__Reg1_4__Reg1_5__Reg1_6__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST1d8Q, Convert__Imm2_9__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST2q16, Convert__Imm2_9__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst2, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST2q32, Convert__Imm2_9__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst2, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST2q8, Convert__Imm2_9__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst2, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST3d16_UPD, Convert__Reg1_8__Tie0__Imp__Imm1_9__Reg1_4__Reg1_5__Reg1_6__CondCode2_1, { MCK_vst3, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST3q16_UPD, Convert__Reg1_8__Tie0__Imp__Imm1_9__Reg1_4__Reg1_5__Reg1_6__CondCode2_1, { MCK_vst3, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST3d32_UPD, Convert__Reg1_8__Tie0__Imp__Imm1_9__Reg1_4__Reg1_5__Reg1_6__CondCode2_1, { MCK_vst3, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST3q32_UPD, Convert__Reg1_8__Tie0__Imp__Imm1_9__Reg1_4__Reg1_5__Reg1_6__CondCode2_1, { MCK_vst3, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST3d8_UPD, Convert__Reg1_8__Tie0__Imp__Imm1_9__Reg1_4__Reg1_5__Reg1_6__CondCode2_1, { MCK_vst3, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST3q8_UPD, Convert__Reg1_8__Tie0__Imp__Imm1_9__Reg1_4__Reg1_5__Reg1_6__CondCode2_1, { MCK_vst3, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST4d16, Convert__Imm2_9__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst4, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST4q16, Convert__Imm2_9__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst4, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST4d32, Convert__Imm2_9__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst4, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST4q32, Convert__Imm2_9__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst4, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST4d8, Convert__Imm2_9__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst4, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VST4q8, Convert__Imm2_9__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst4, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_Imm }, 0},
    { ARM::VTBL3, Convert__Reg1_3__Reg1_5__Reg1_6__Reg1_7__Reg1_9__CondCode2_1, { MCK_vtbl, MCK_CondCode, MCK__46_8, MCK_DPR, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_DPR }, 0},
    { ARM::VTBX3, Convert__Reg1_3__Tie0__Reg1_5__Reg1_6__Reg1_7__Reg1_9__CondCode2_1, { MCK_vtbx, MCK_CondCode, MCK__46_8, MCK_DPR, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_DPR }, 0},
    { ARM::CDP2, Convert__Imm1_2__Imm1_3__Imm1_5__Imm1_7__Imm1_9__Imm1_10, { MCK_cdp2, MCK_p, MCK_Imm, MCK_Imm, MCK_cr, MCK_Imm, MCK_cr, MCK_Imm, MCK_cr, MCK_Imm, MCK_Imm }, 0},
    { ARM::MCR, Convert__Imm1_3__Imm1_4__Reg1_5__Imm1_7__Imm1_9__Imm1_10__CondCode2_1, { MCK_mcr, MCK_CondCode, MCK_p, MCK_Imm, MCK_Imm, MCK_GPR, MCK_cr, MCK_Imm, MCK_cr, MCK_Imm, MCK_Imm }, 0},
    { ARM::MRC, Convert__Imm1_3__Imm1_4__Reg1_5__Imm1_7__Imm1_9__Imm1_10__CondCode2_1, { MCK_mrc, MCK_CondCode, MCK_p, MCK_Imm, MCK_Imm, MCK_GPR, MCK_cr, MCK_Imm, MCK_cr, MCK_Imm, MCK_Imm }, 0},
    { ARM::VLD1d16Q_UPD, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_9__Tie4__Imp__Imm1_10__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD1d32Q_UPD, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_9__Tie4__Imp__Imm1_10__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD1d64Q_UPD, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_9__Tie4__Imp__Imm1_10__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_64, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD1d8Q_UPD, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_9__Tie4__Imp__Imm1_10__CondCode2_1, { MCK_vld1, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD2q16_UPD, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_9__Tie4__Imp__Imm1_10__CondCode2_1, { MCK_vld2, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD2q32_UPD, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_9__Tie4__Imp__Imm1_10__CondCode2_1, { MCK_vld2, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD2q8_UPD, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_9__Tie4__Imp__Imm1_10__CondCode2_1, { MCK_vld2, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD4d16_UPD, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_9__Tie4__Imp__Imm1_10__CondCode2_1, { MCK_vld4, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD4q16_UPD, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_9__Tie4__Imp__Imm1_10__CondCode2_1, { MCK_vld4, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD4d32_UPD, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_9__Tie4__Imp__Imm1_10__CondCode2_1, { MCK_vld4, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD4q32_UPD, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_9__Tie4__Imp__Imm1_10__CondCode2_1, { MCK_vld4, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD4d8_UPD, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_9__Tie4__Imp__Imm1_10__CondCode2_1, { MCK_vld4, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VLD4q8_UPD, Convert__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_9__Tie4__Imp__Imm1_10__CondCode2_1, { MCK_vld4, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST1d16Q_UPD, Convert__Reg1_9__Tie0__Imp__Imm1_10__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST1d32Q_UPD, Convert__Reg1_9__Tie0__Imp__Imm1_10__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST1d64Q_UPD, Convert__Reg1_9__Tie0__Imp__Imm1_10__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_64, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST1d8Q_UPD, Convert__Reg1_9__Tie0__Imp__Imm1_10__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst1, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST2q16_UPD, Convert__Reg1_9__Tie0__Imp__Imm1_10__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst2, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST2q32_UPD, Convert__Reg1_9__Tie0__Imp__Imm1_10__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst2, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST2q8_UPD, Convert__Reg1_9__Tie0__Imp__Imm1_10__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst2, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST4d16_UPD, Convert__Reg1_9__Tie0__Imp__Imm1_10__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst4, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST4q16_UPD, Convert__Reg1_9__Tie0__Imp__Imm1_10__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst4, MCK_CondCode, MCK__46_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST4d32_UPD, Convert__Reg1_9__Tie0__Imp__Imm1_10__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst4, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST4q32_UPD, Convert__Reg1_9__Tie0__Imp__Imm1_10__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst4, MCK_CondCode, MCK__46_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST4d8_UPD, Convert__Reg1_9__Tie0__Imp__Imm1_10__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst4, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VST4q8_UPD, Convert__Reg1_9__Tie0__Imp__Imm1_10__Reg1_4__Reg1_5__Reg1_6__Reg1_7__CondCode2_1, { MCK_vst4, MCK_CondCode, MCK__46_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, 0},
    { ARM::VTBL4, Convert__Reg1_3__Reg1_5__Reg1_6__Reg1_7__Reg1_8__Reg1_10__CondCode2_1, { MCK_vtbl, MCK_CondCode, MCK__46_8, MCK_DPR, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_DPR }, 0},
    { ARM::VTBX4, Convert__Reg1_3__Tie0__Reg1_5__Reg1_6__Reg1_7__Reg1_8__Reg1_10__CondCode2_1, { MCK_vtbx, MCK_CondCode, MCK__46_8, MCK_DPR, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_DPR }, 0},
    { ARM::CDP, Convert__Imm1_3__Imm1_4__Imm1_6__Imm1_8__Imm1_10__Imm1_11__CondCode2_1, { MCK_cdp, MCK_CondCode, MCK_p, MCK_Imm, MCK_Imm, MCK_cr, MCK_Imm, MCK_cr, MCK_Imm, MCK_cr, MCK_Imm, MCK_Imm }, 0},
  };

  // Get the current feature set.
  unsigned AvailableFeatures = getAvailableFeatures();

  // Eliminate obvious mismatches.
  if (Operands.size() > 12)
    return true;

  // Compute the class list for this operand vector.
  MatchClassKind Classes[12];
  for (unsigned i = 0, e = Operands.size(); i != e; ++i) {
    Classes[i] = ClassifyOperand(Operands[i]);

    // Check for invalid operands before matching.
    if (Classes[i] == InvalidMatchClass)
      return true;
  }

  // Mark unused classes.
  for (unsigned i = Operands.size(), e = 12; i != e; ++i)
    Classes[i] = InvalidMatchClass;

  // Search the table.
  for (const MatchEntry *it = MatchTable, *ie = MatchTable + 1847; it != ie; ++it) {
    if ((AvailableFeatures & it->RequiredFeatures) != it->RequiredFeatures)
      continue;
    if (!IsSubclass(Classes[0], it->Classes[0]))
      continue;
    if (!IsSubclass(Classes[1], it->Classes[1]))
      continue;
    if (!IsSubclass(Classes[2], it->Classes[2]))
      continue;
    if (!IsSubclass(Classes[3], it->Classes[3]))
      continue;
    if (!IsSubclass(Classes[4], it->Classes[4]))
      continue;
    if (!IsSubclass(Classes[5], it->Classes[5]))
      continue;
    if (!IsSubclass(Classes[6], it->Classes[6]))
      continue;
    if (!IsSubclass(Classes[7], it->Classes[7]))
      continue;
    if (!IsSubclass(Classes[8], it->Classes[8]))
      continue;
    if (!IsSubclass(Classes[9], it->Classes[9]))
      continue;
    if (!IsSubclass(Classes[10], it->Classes[10]))
      continue;
    if (!IsSubclass(Classes[11], it->Classes[11]))
      continue;

    ConvertToMCInst(it->ConvertFn, Inst, it->Opcode, Operands);
    return false;
  }

  return true;
}

#endif // REGISTERS_ONLY
