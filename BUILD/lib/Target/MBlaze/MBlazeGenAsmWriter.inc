//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void MBlazeAsmPrinter::printInstruction(const MachineInstr *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    536870923U,	// ADD
    536870934U,	// ADDC
    536870945U,	// ADDI
    536870956U,	// ADDIC
    536870967U,	// ADDIK
    536870978U,	// ADDIKC
    536870989U,	// ADDK
    536871000U,	// ADDKC
    1140850787U,	// ADJCALLSTACKDOWN
    1207959651U,	// ADJCALLSTACKUP
    545259620U,	// AGET
    541065327U,	// AGETD
    536871034U,	// AND
    538968197U,	// ANDI
    536871056U,	// ANDN
    538968219U,	// ANDNI
    545259686U,	// APUT
    541065393U,	// APUTD
    536871100U,	// BEQ
    536871111U,	// BEQD
    541065426U,	// BEQI
    541065437U,	// BEQID
    536871144U,	// BGE
    536871155U,	// BGED
    541065470U,	// BGEI
    541065481U,	// BGEID
    536871188U,	// BGT
    536871199U,	// BGTD
    541065514U,	// BGTI
    541065525U,	// BGTID
    536871232U,	// BLE
    536871243U,	// BLED
    541065558U,	// BLEI
    541065569U,	// BLEID
    536871276U,	// BLT
    536871287U,	// BLTD
    541065602U,	// BLTI
    541065613U,	// BLTID
    536871320U,	// BNE
    536871331U,	// BNED
    541065646U,	// BNEI
    541065657U,	// BNEID
    738197956U,	// BR
    738197967U,	// BRA
    738197978U,	// BRAD
    738197989U,	// BRAI
    738198000U,	// BRAID
    738198011U,	// BRAL
    738198027U,	// BRALD
    738198043U,	// BRALID
    738198059U,	// BRD
    738198070U,	// BRI
    738198081U,	// BRID
    738198092U,	// BRL
    738198108U,	// BRLD
    738198124U,	// BRLID
    536871548U,	// BSLL
    536871559U,	// BSLLI
    536871570U,	// BSRA
    536871581U,	// BSRAI
    536871592U,	// BSRL
    536871603U,	// BSRLI
    545260222U,	// CAGET
    541065929U,	// CAGETD
    545260244U,	// CAPUT
    541065951U,	// CAPUTD
    545260266U,	// CGET
    541065973U,	// CGETD
    536871680U,	// CMP
    536871691U,	// CMPU
    738198294U,	// CPLOAD
    1610613535U,	// CPRESTORE
    545260331U,	// CPUT
    541066038U,	// CPUTD
    545260353U,	// EAGET
    541066060U,	// EAGETD
    545260375U,	// ECAGET
    541066082U,	// ECAGETD
    545260397U,	// ECGET
    541066104U,	// ECGETD
    545260419U,	// EGET
    541066126U,	// EGETD
    536871833U,	// FADD
    536871844U,	// FCMP_EQ
    536871855U,	// FCMP_GE
    536871866U,	// FCMP_GT
    536871877U,	// FCMP_LE
    536871888U,	// FCMP_LT
    536871899U,	// FCMP_NE
    536871910U,	// FCMP_UN
    536871921U,	// FDIV
    541066236U,	// FINT
    541066247U,	// FLT
    536871954U,	// FMUL
    536871965U,	// FOR
    536871976U,	// FORI
    553649203U,	// FRSUB
    541066302U,	// FSQRT
    545260617U,	// GET
    541066324U,	// GETD
    536872031U,	// IDIV
    536872042U,	// IDIVU
    562037877U,	// LBU
    562037888U,	// LBUI
    570426507U,	// LEA_ADDI
    562037908U,	// LHU
    562037919U,	// LHUI
    562037930U,	// LW
    562037930U,	// LWF
    562037941U,	// LWFI
    562037941U,	// LWI
    1216U,	// MACRO
    536872139U,	// MUL
    536872150U,	// MULH
    536872161U,	// MULHSU
    536872172U,	// MULHU
    536872183U,	// MULI
    545260802U,	// NAGET
    541066509U,	// NAGETD
    545260824U,	// NAPUT
    541066531U,	// NAPUTD
    545260846U,	// NCAGET
    541066553U,	// NCAGETD
    545260868U,	// NCAPUT
    541066575U,	// NCAPUTD
    545260890U,	// NCGET
    541066597U,	// NCGETD
    545260912U,	// NCPUT
    541066619U,	// NCPUTD
    545260934U,	// NEAGET
    541066641U,	// NEAGETD
    545260956U,	// NECAGET
    541066663U,	// NECAGETD
    545260978U,	// NECGET
    541066685U,	// NECGETD
    545261000U,	// NEGET
    541066707U,	// NEGETD
    545261022U,	// NGET
    541066729U,	// NGETD
    1524U,	// NOMACRO
    1537U,	// NOP
    1545U,	// NOREORDER
    545261080U,	// NPUT
    541066787U,	// NPUTD
    536871965U,	// OR
    538969128U,	// ORI
    545261102U,	// PUT
    541066809U,	// PUTD
    1604U,	// REORDER
    536872529U,	// RSUB
    536872540U,	// RSUBC
    553649767U,	// RSUBI
    553649767U,	// RSUBIC
    553649778U,	// RSUBIK
    553649789U,	// RSUBIKC
    536872584U,	// RSUBK
    553649811U,	// RSUBKC
    805308062U,	// RTSD
    562038441U,	// SB
    562038452U,	// SBI
    541066943U,	// SEXT16
    541066952U,	// SEXT8
    562038481U,	// SH
    562038492U,	// SHI
    541066983U,	// SRA
    541066992U,	// SRC
    541067001U,	// SRL
    562038530U,	// SW
    562038530U,	// SWF
    562038541U,	// SWFI
    562038541U,	// SWI
    1816U,	// Select_CC
    1836U,	// Select_FCC
    1857U,	// ShiftL
    1874U,	// ShiftRA
    1892U,	// ShiftRL
    545261430U,	// TAGET
    541067137U,	// TAGETD
    2147485580U,	// TAPUT
    738199447U,	// TAPUTD
    545261474U,	// TCAGET
    541067181U,	// TCAGETD
    2147485624U,	// TCAPUT
    738199491U,	// TCAPUTD
    545261518U,	// TCGET
    541067225U,	// TCGETD
    2147485668U,	// TCPUT
    738199535U,	// TCPUTD
    545261562U,	// TEAGET
    541067269U,	// TEAGETD
    545261584U,	// TECAGET
    541067291U,	// TECAGETD
    545261606U,	// TECGET
    541067313U,	// TECGETD
    545261628U,	// TEGET
    541067335U,	// TEGETD
    545261650U,	// TGET
    541067357U,	// TGETD
    545261672U,	// TNAGET
    541067379U,	// TNAGETD
    2147485822U,	// TNAPUT
    738199689U,	// TNAPUTD
    545261716U,	// TNCAGET
    541067423U,	// TNCAGETD
    2147485866U,	// TNCAPUT
    738199733U,	// TNCAPUTD
    545261760U,	// TNCGET
    541067467U,	// TNCGETD
    2147485910U,	// TNCPUT
    738199777U,	// TNCPUTD
    545261804U,	// TNEAGET
    541067511U,	// TNEAGETD
    545261826U,	// TNECAGET
    541067533U,	// TNECAGETD
    545261848U,	// TNECGET
    541067555U,	// TNECGETD
    545261870U,	// TNEGET
    541067577U,	// TNEGETD
    545261892U,	// TNGET
    541067599U,	// TNGETD
    2147486042U,	// TNPUT
    738199909U,	// TNPUTD
    2147486064U,	// TPUT
    738199931U,	// TPUTD
    536873350U,	// XOR
    538970513U,	// XORI
    0U
  };

  const char *AsmStrs = 
    "DBG_VALUE\000add       \000addc      \000addi      \000addic     \000ad"
    "dik     \000addikc    \000addk      \000addkc     \000\000aget      \000"
    "agetd     \000and       \000andi      \000andn      \000andni     \000a"
    "put      \000aputd     \000beq       \000beqd      \000beqi      \000be"
    "qid     \000bge       \000bged      \000bgei      \000bgeid     \000bgt"
    "       \000bgtd      \000bgti      \000bgtid     \000ble       \000bled"
    "      \000blei      \000bleid     \000blt       \000bltd      \000blti "
    "     \000bltid     \000bne       \000bned      \000bnei      \000bneid "
    "    \000br        \000bra       \000brad      \000brai      \000braid  "
    "   \000bral      r15, \000brald     r15, \000bralid    r15, \000brd    "
    "   \000bri       \000brid      \000brl       r15, \000brld      r15, \000"
    "brlid     r15, \000bsll      \000bslli     \000bsra      \000bsrai     "
    "\000bsrl      \000bsrli     \000caget     \000cagetd    \000caput     \000"
    "caputd    \000cget      \000cgetd     \000cmp       \000cmpu      \000."
    "cpload \000.cprestore \000cput      \000cputd     \000eaget     \000eag"
    "etd    \000ecaget    \000ecagetd   \000ecget     \000ecgetd    \000eget"
    "      \000egetd     \000fadd      \000fcmp.eq   \000fcmp.ge   \000fcmp."
    "gt   \000fcmp.le   \000fcmp.lt   \000fcmp.ne   \000fcmp.un   \000fdiv  "
    "    \000fint      \000flt       \000fmul      \000or        \000ori    "
    "   \000frsub     \000fsqrt     \000get       \000getd      \000idiv    "
    "  \000idivu     \000lbu       \000lbui      \000addi    \000lhu       \000"
    "lhui      \000lw        \000lwi       \000.set macro\000mul       \000m"
    "ulh      \000mulhsu    \000mulhu     \000muli      \000naget     \000na"
    "getd    \000naput     \000naputd    \000ncaget    \000ncagetd   \000nca"
    "put    \000ncaputd   \000ncget     \000ncgetd    \000ncput     \000ncpu"
    "td    \000neaget    \000neagetd   \000necaget   \000necagetd  \000necge"
    "t    \000necgetd   \000neget     \000negetd    \000nget      \000ngetd "
    "    \000.set nomacro\000nop    \000.set noreorder\000nput      \000nput"
    "d     \000put       \000putd      \000.set reorder\000rsub      \000rsu"
    "bc     \000rsubi     \000rsubic    \000rsubikc   \000rsubk     \000rsub"
    "kc    \000rtsd      \000sb        \000sbi       \000sext16  \000sext8  "
    " \000sh        \000shi       \000sra     \000src     \000srl     \000sw"
    "        \000swi       \000; SELECT_CC PSEUDO!\000; SELECT_FCC PSEUDO!\000"
    "; ShiftL PSEUDO!\000; ShiftRA PSEUDO!\000; ShiftRL PSEUDO!\000taget    "
    " \000tagetd    \000taput     \000taputd    \000tcaget    \000tcagetd   "
    "\000tcaput    \000tcaputd   \000tcget     \000tcgetd    \000tcput     \000"
    "tcputd    \000teaget    \000teagetd   \000tecaget   \000tecagetd  \000t"
    "ecget    \000tecgetd   \000teget     \000tegetd    \000tget      \000tg"
    "etd     \000tnaget    \000tnagetd   \000tnaput    \000tnaputd   \000tnc"
    "aget   \000tncagetd  \000tncaput   \000tncaputd  \000tncget    \000tncg"
    "etd   \000tncput    \000tncputd   \000tneaget   \000tneagetd  \000tneca"
    "get  \000tnecagetd \000tnecget   \000tnecgetd  \000tneget    \000tneget"
    "d   \000tnget     \000tngetd    \000tnput     \000tnputd    \000tput   "
    "   \000tputd     \000xor       \000xori      \000";

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 29) & 7) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, MACRO, NOMACRO, NOP, NOREORDER, REORDER, Select_CC, Select_...
    return;
    break;
  case 1:
    // ADD, ADDC, ADDI, ADDIC, ADDIK, ADDIKC, ADDK, ADDKC, AGET, AGETD, AND, ...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP
    PrintSpecial(MI, O, "comment"); 
    break;
  case 3:
    // CPRESTORE
    printUnsignedImm(MI, 0, O); 
    O << "\n"; 
    return;
    break;
  case 4:
    // TAPUT, TCAPUT, TCPUT, TNAPUT, TNCAPUT, TNCPUT, TNPUT, TPUT
    printFSLImm(MI, 0, O); 
    return;
    break;
  }


  // Fragment 1 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 26) & 7) {
  default:   // unreachable.
  case 0:
    // ADD, ADDC, ADDI, ADDIC, ADDIK, ADDIKC, ADDK, ADDKC, AGET, AGETD, AND, ...
    O << ", "; 
    break;
  case 1:
    // ADJCALLSTACKDOWN
    O << " ADJCALLSTACKDOWN "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 2:
    // ADJCALLSTACKUP
    O << " ADJCALLSTACKUP "; 
    printUnsignedImm(MI, 0, O); 
    return;
    break;
  case 3:
    // BR, BRA, BRAD, BRAI, BRAID, BRAL, BRALD, BRALID, BRD, BRI, BRID, BRL, ...
    return;
    break;
  case 4:
    // RTSD
    O << ", 8"; 
    return;
    break;
  }


  // Fragment 2 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 23) & 7) {
  default:   // unreachable.
  case 0:
    // ADD, ADDC, ADDI, ADDIC, ADDIK, ADDIKC, ADDK, ADDKC, AGETD, AND, ANDI, ...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // AGET, APUT, CAGET, CAPUT, CGET, CPUT, EAGET, ECAGET, ECGET, EGET, GET,...
    printFSLImm(MI, 1, O); 
    return;
    break;
  case 2:
    // FRSUB, RSUBI, RSUBIC, RSUBIK, RSUBIKC, RSUBKC
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 3:
    // LBU, LBUI, LHU, LHUI, LW, LWF, LWFI, LWI, SB, SBI, SH, SHI, SW, SWF, S...
    printMemOperand(MI, 1, O); 
    return;
    break;
  case 4:
    // LEA_ADDI
    printMemOperand(MI, 1, O, "stackloc"); 
    return;
    break;
  }


  // Fragment 3 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 22) & 1) {
    // AGETD, APUTD, BEQI, BEQID, BGEI, BGEID, BGTI, BGTID, BLEI, BLEID, BLTI...
    return;
  } else {
    // ADD, ADDC, ADDI, ADDIC, ADDIK, ADDIKC, ADDK, ADDKC, AND, ANDI, ANDN, A...
    O << ", "; 
  }


  // Fragment 4 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 21) & 1) {
    // ANDI, ANDNI, ORI, XORI
    printUnsignedImm(MI, 2, O); 
    return;
  } else {
    // ADD, ADDC, ADDI, ADDIC, ADDIK, ADDIKC, ADDK, ADDKC, AND, ANDN, BEQ, BE...
    printOperand(MI, 2, O); 
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *MBlazeAsmPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 65 && "Invalid register number!");

  static const unsigned RegAsmOffset[] = {
    0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 34, 38, 42, 
    46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 94, 98, 
    102, 106, 110, 114, 118, 3, 6, 9, 12, 15, 18, 21, 24, 27, 
    30, 34, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 
    86, 90, 94, 98, 102, 106, 110, 114, 0
  };

  const char *AsmStrs =
    "r0\000r1\000r2\000r3\000r4\000r5\000r6\000r7\000r8\000r9\000r10\000r11\000"
    "r12\000r13\000r14\000r15\000r16\000r17\000r18\000r19\000r20\000r21\000r"
    "22\000r23\000r24\000r25\000r26\000r27\000r28\000r29\000r30\000r31\000r0"
    "\000";
  return AsmStrs+RegAsmOffset[RegNo-1];
}


#ifdef GET_INSTRUCTION_NAME
#undef GET_INSTRUCTION_NAME

/// getInstructionName: This method is automatically generated by tblgen
/// from the instruction set description.  This returns the enum name of the
/// specified instruction.
const char *MBlazeAsmPrinter::getInstructionName(unsigned Opcode) {
  assert(Opcode < 240 && "Invalid instruction number!");

  static const unsigned InstAsmOffset[] = {
    0, 4, 14, 27, 36, 45, 50, 65, 79, 92, 106, 123, 133, 146, 
    151, 155, 160, 165, 171, 177, 184, 189, 195, 212, 227, 232, 238, 242, 
    247, 252, 258, 263, 269, 273, 278, 283, 289, 293, 298, 303, 309, 313, 
    318, 323, 329, 333, 338, 343, 349, 353, 358, 363, 369, 373, 378, 383, 
    389, 392, 396, 401, 406, 412, 417, 423, 430, 434, 438, 443, 447, 452, 
    458, 463, 469, 474, 480, 485, 491, 497, 504, 510, 517, 522, 528, 532, 
    537, 544, 554, 559, 565, 571, 578, 585, 593, 599, 606, 611, 617, 622, 
    630, 638, 646, 654, 662, 670, 678, 683, 688, 692, 697, 701, 706, 712, 
    718, 722, 727, 732, 738, 742, 747, 756, 760, 765, 768, 772, 777, 781, 
    787, 791, 796, 803, 809, 814, 820, 827, 833, 840, 847, 855, 862, 870, 
    876, 883, 889, 896, 903, 911, 919, 928, 935, 943, 949, 956, 961, 967, 
    975, 979, 989, 994, 1000, 1003, 1007, 1011, 1016, 1024, 1029, 1035, 1041, 1048, 
    1055, 1063, 1069, 1076, 1081, 1084, 1088, 1095, 1101, 1104, 1108, 1112, 1116, 1120, 
    1123, 1127, 1132, 1136, 1146, 1157, 1164, 1172, 1180, 1186, 1193, 1199, 1206, 1213, 
    1221, 1228, 1236, 1242, 1249, 1255, 1262, 1269, 1277, 1285, 1294, 1301, 1309, 1315, 
    1322, 1327, 1333, 1340, 1348, 1355, 1363, 1371, 1380, 1388, 1397, 1404, 1412, 1419, 
    1427, 1435, 1444, 1453, 1463, 1471, 1480, 1487, 1495, 1501, 1508, 1514, 1521, 1526, 
    1532, 1536, 0
  };

  const char *Strs =
    "PHI\000INLINEASM\000PROLOG_LABEL\000EH_LABEL\000GC_LABEL\000KILL\000EXT"
    "RACT_SUBREG\000INSERT_SUBREG\000IMPLICIT_DEF\000SUBREG_TO_REG\000COPY_T"
    "O_REGCLASS\000DBG_VALUE\000REG_SEQUENCE\000COPY\000ADD\000ADDC\000ADDI\000"
    "ADDIC\000ADDIK\000ADDIKC\000ADDK\000ADDKC\000ADJCALLSTACKDOWN\000ADJCAL"
    "LSTACKUP\000AGET\000AGETD\000AND\000ANDI\000ANDN\000ANDNI\000APUT\000AP"
    "UTD\000BEQ\000BEQD\000BEQI\000BEQID\000BGE\000BGED\000BGEI\000BGEID\000"
    "BGT\000BGTD\000BGTI\000BGTID\000BLE\000BLED\000BLEI\000BLEID\000BLT\000"
    "BLTD\000BLTI\000BLTID\000BNE\000BNED\000BNEI\000BNEID\000BR\000BRA\000B"
    "RAD\000BRAI\000BRAID\000BRAL\000BRALD\000BRALID\000BRD\000BRI\000BRID\000"
    "BRL\000BRLD\000BRLID\000BSLL\000BSLLI\000BSRA\000BSRAI\000BSRL\000BSRLI"
    "\000CAGET\000CAGETD\000CAPUT\000CAPUTD\000CGET\000CGETD\000CMP\000CMPU\000"
    "CPLOAD\000CPRESTORE\000CPUT\000CPUTD\000EAGET\000EAGETD\000ECAGET\000EC"
    "AGETD\000ECGET\000ECGETD\000EGET\000EGETD\000FADD\000FCMP_EQ\000FCMP_GE"
    "\000FCMP_GT\000FCMP_LE\000FCMP_LT\000FCMP_NE\000FCMP_UN\000FDIV\000FINT"
    "\000FLT\000FMUL\000FOR\000FORI\000FRSUB\000FSQRT\000GET\000GETD\000IDIV"
    "\000IDIVU\000LBU\000LBUI\000LEA_ADDI\000LHU\000LHUI\000LW\000LWF\000LWF"
    "I\000LWI\000MACRO\000MUL\000MULH\000MULHSU\000MULHU\000MULI\000NAGET\000"
    "NAGETD\000NAPUT\000NAPUTD\000NCAGET\000NCAGETD\000NCAPUT\000NCAPUTD\000"
    "NCGET\000NCGETD\000NCPUT\000NCPUTD\000NEAGET\000NEAGETD\000NECAGET\000N"
    "ECAGETD\000NECGET\000NECGETD\000NEGET\000NEGETD\000NGET\000NGETD\000NOM"
    "ACRO\000NOP\000NOREORDER\000NPUT\000NPUTD\000OR\000ORI\000PUT\000PUTD\000"
    "REORDER\000RSUB\000RSUBC\000RSUBI\000RSUBIC\000RSUBIK\000RSUBIKC\000RSU"
    "BK\000RSUBKC\000RTSD\000SB\000SBI\000SEXT16\000SEXT8\000SH\000SHI\000SR"
    "A\000SRC\000SRL\000SW\000SWF\000SWFI\000SWI\000Select_CC\000Select_FCC\000"
    "ShiftL\000ShiftRA\000ShiftRL\000TAGET\000TAGETD\000TAPUT\000TAPUTD\000T"
    "CAGET\000TCAGETD\000TCAPUT\000TCAPUTD\000TCGET\000TCGETD\000TCPUT\000TC"
    "PUTD\000TEAGET\000TEAGETD\000TECAGET\000TECAGETD\000TECGET\000TECGETD\000"
    "TEGET\000TEGETD\000TGET\000TGETD\000TNAGET\000TNAGETD\000TNAPUT\000TNAP"
    "UTD\000TNCAGET\000TNCAGETD\000TNCAPUT\000TNCAPUTD\000TNCGET\000TNCGETD\000"
    "TNCPUT\000TNCPUTD\000TNEAGET\000TNEAGETD\000TNECAGET\000TNECAGETD\000TN"
    "ECGET\000TNECGETD\000TNEGET\000TNEGETD\000TNGET\000TNGETD\000TNPUT\000T"
    "NPUTD\000TPUT\000TPUTD\000XOR\000XORI\000";
  return Strs+InstAsmOffset[Opcode];
}

#endif
