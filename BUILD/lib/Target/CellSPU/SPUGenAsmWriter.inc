//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void SPUAsmPrinter::printInstruction(const MachineInstr *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    536870923U,	// ABSDB
    536870930U,	// ADDXr32
    536870930U,	// ADDXr64
    536870930U,	// ADDXv2i64
    536870930U,	// ADDXv4i32
    1140850712U,	// ADJCALLSTACKDOWN
    1207959576U,	// ADJCALLSTACKUP
    537002009U,	// AHIr16
    537002009U,	// AHIvec
    536870942U,	// AHr16
    536870942U,	// AHv8i16
    537002018U,	// AIf32
    537002018U,	// AIr32
    537002018U,	// AIv4f32
    537002018U,	// AIv4i32
    537133094U,	// ANDBIr8
    537133094U,	// ANDBIv16i8
    536870957U,	// ANDCr128
    536870957U,	// ANDCr16
    536870957U,	// ANDCr32
    536870957U,	// ANDCr64
    536870957U,	// ANDCr8
    536870957U,	// ANDCv16i8
    536870957U,	// ANDCv16i8_conv
    536870957U,	// ANDCv2i64
    536870957U,	// ANDCv4i32
    536870957U,	// ANDCv8i16
    537133107U,	// ANDHIi8i16
    537133107U,	// ANDHIr16
    537002035U,	// ANDHIv8i16
    537002042U,	// ANDIi16i32
    537002042U,	// ANDIi8i32
    537002042U,	// ANDIr32
    537002042U,	// ANDIv4i32
    536870976U,	// ANDfabs32
    536870976U,	// ANDfabs64
    536870976U,	// ANDfabsvec
    536870976U,	// ANDi16i32
    536870976U,	// ANDr128
    536870976U,	// ANDr16
    536870976U,	// ANDr32
    536870976U,	// ANDr64
    536870976U,	// ANDr8
    536870976U,	// ANDv16i8
    536870976U,	// ANDv2i64
    536870976U,	// ANDv4i32
    536870976U,	// ANDv8i16
    536870981U,	// AVGB
    536870987U,	// Ar32
    536870987U,	// Av16i8
    536870987U,	// Av4i32
    536870990U,	// BGXvec
    536870995U,	// BGr32
    536870995U,	// BGr64
    536870995U,	// BGv2i64
    536870995U,	// BGv4i32
    738197591U,	// BI
    738197595U,	// BISL
    1610612838U,	// BISLED_00
    1610612838U,	// BISLED_0D
    1610612838U,	// BISLED_E0
    1610612838U,	// BISLED_ED
    2147483763U,	// BR
    2147483767U,	// BRA
    1610612860U,	// BRASL
    805306504U,	// BRHNZr16
    805306504U,	// BRHNZv8i16
    805306511U,	// BRHZr16
    805306511U,	// BRHZv8i16
    805306517U,	// BRNZr32
    805306517U,	// BRNZv4i32
    2147483803U,	// BRSL
    805306534U,	// BRZr32
    805306534U,	// BRZv4i32
    541065387U,	// CBD
    545259696U,	// CBX
    541065397U,	// CDD
    541065397U,	// CDDf64
    545259706U,	// CDX
    545259706U,	// CDXf64
    537002175U,	// CEQBIr8
    537002175U,	// CEQBIv16i8
    536871110U,	// CEQBr8
    536871110U,	// CEQBv16i8
    537002188U,	// CEQHIr16
    537002188U,	// CEQHIv8i16
    536871123U,	// CEQHr16
    536871123U,	// CEQHv8i16
    537002201U,	// CEQIr32
    537002201U,	// CEQIv4i32
    536871135U,	// CEQr32
    536871135U,	// CEQv4i32
    537919716U,	// CFSif32
    537919716U,	// CFSiv4f32
    537919723U,	// CFUif32
    537919723U,	// CFUiv4f32
    537002226U,	// CGTBIr8
    537002226U,	// CGTBIv16i8
    536871161U,	// CGTBr8
    536871161U,	// CGTBv16i8
    537002239U,	// CGTHIr16
    537002239U,	// CGTHIv8i16
    536871174U,	// CGTHr16
    536871174U,	// CGTHv8i16
    537002252U,	// CGTIf32
    537002252U,	// CGTIr32
    537002252U,	// CGTIv4f32
    537002252U,	// CGTIv4i32
    536871186U,	// CGTr32
    536871186U,	// CGTv4i32
    536871191U,	// CGr32
    536871191U,	// CGr64
    536871191U,	// CGv2i64
    536871191U,	// CGv4i32
    541065499U,	// CHD
    545259808U,	// CHX
    537002277U,	// CLGTBIr8
    537002277U,	// CLGTBIv16i8
    536871213U,	// CLGTBr8
    536871213U,	// CLGTBv16i8
    537002292U,	// CLGTHIr16
    537002292U,	// CLGTHIv8i16
    536871228U,	// CLGTHr16
    536871228U,	// CLGTHv8i16
    537002307U,	// CLGTIr32
    537002307U,	// CLGTIv4i32
    536871242U,	// CLGTr32
    536871242U,	// CLGTv4i32
    538968400U,	// CLZr32
    538968400U,	// CLZv4i32
    538968405U,	// CNTBv16i8
    538968405U,	// CNTBv4i32
    538968405U,	// CNTBv8i16
    537919835U,	// CSiFf32
    537919835U,	// CSiFv4f32
    537919842U,	// CUiFf32
    537919842U,	// CUiFv4f32
    541065577U,	// CWD
    541065577U,	// CWDf32
    545259886U,	// CWX
    545259886U,	// CWXf32
    536871283U,	// CellSDKa
    536871286U,	// CellSDKaddx
    536871292U,	// CellSDKah
    549847424U,	// CellSDKahi
    549847429U,	// CellSDKai
    536871305U,	// CellSDKand
    537133455U,	// CellSDKandbi
    536871319U,	// CellSDKandc
    537002398U,	// CellSDKandhi
    537002406U,	// CellSDKandi
    536871341U,	// CellSDKbg
    536871345U,	// CellSDKbgx
    536871350U,	// CellSDKceq
    536871356U,	// CellSDKceqb
    537133507U,	// CellSDKceqbi
    536871371U,	// CellSDKceqh
    537002450U,	// CellSDKceqhi
    537002458U,	// CellSDKceqi
    536871393U,	// CellSDKcg
    536871397U,	// CellSDKcgt
    536871403U,	// CellSDKcgtb
    537133554U,	// CellSDKcgtbi
    536871418U,	// CellSDKcgth
    537002497U,	// CellSDKcgthi
    537002505U,	// CellSDKcgti
    536871440U,	// CellSDKcgx
    536871445U,	// CellSDKclgt
    536871452U,	// CellSDKclgtb
    537133604U,	// CellSDKclgtbi
    536871469U,	// CellSDKclgth
    537002549U,	// CellSDKclgthi
    537002558U,	// CellSDKclgti
    536871494U,	// CellSDKdfa
    536871500U,	// CellSDKdfm
    536871506U,	// CellSDKdfma
    536871513U,	// CellSDKdfms
    536871520U,	// CellSDKdfnma
    536871528U,	// CellSDKdfnms
    536871536U,	// CellSDKdfs
    536871542U,	// CellSDKfa
    536871547U,	// CellSDKfceq
    536871554U,	// CellSDKfcgt
    536871561U,	// CellSDKfcmeq
    536871569U,	// CellSDKfcmgt
    536871577U,	// CellSDKfm
    536937118U,	// CellSDKfma
    536937124U,	// CellSDKfms
    536937130U,	// CellSDKfnms
    536871601U,	// CellSDKfs
    536871606U,	// CellSDKmpy
    536937147U,	// CellSDKmpya
    536871617U,	// CellSDKmpyh
    536871623U,	// CellSDKmpyhh
    536871630U,	// CellSDKmpyhha
    536871638U,	// CellSDKmpyhhau
    536871647U,	// CellSDKmpyhhu
    537002727U,	// CellSDKmpyi
    536871661U,	// CellSDKmpys
    536871667U,	// CellSDKmpyu
    537002745U,	// CellSDKmpyui
    536871680U,	// CellSDKnand
    536871687U,	// CellSDKnor
    536871693U,	// CellSDKor
    537133842U,	// CellSDKorbi
    536871705U,	// CellSDKorc
    537002784U,	// CellSDKorhi
    537002791U,	// CellSDKori
    536871725U,	// CellSDKsf
    536871729U,	// CellSDKsfh
    549847862U,	// CellSDKsfhi
    549847868U,	// CellSDKsfi
    536871745U,	// CellSDKsfx
    536871750U,	// CellSDKxor
    537133900U,	// CellSDKxorbi
    537002836U,	// CellSDKxorhi
    537002844U,	// CellSDKxori
    536871779U,	// DFNMSf64
    536871779U,	// DFNMSv2f64
    874U,	// ENOP
    536871791U,	// EQVr128
    536871791U,	// EQVr128_1
    536871791U,	// EQVr128_2
    536871791U,	// EQVr128_3
    536871791U,	// EQVr16
    536871791U,	// EQVr16_1
    536871791U,	// EQVr16_2
    536871791U,	// EQVr16_3
    536871791U,	// EQVr32
    536871791U,	// EQVr32_1
    536871791U,	// EQVr32_2
    536871791U,	// EQVr32_3
    536871791U,	// EQVr64
    536871791U,	// EQVr64_1
    536871791U,	// EQVr64_2
    536871791U,	// EQVr64_3
    536871791U,	// EQVr8
    536871791U,	// EQVr8_1
    536871791U,	// EQVr8_2
    536871791U,	// EQVr8_3
    536871791U,	// EQVv16i8
    536871791U,	// EQVv16i8_1
    536871791U,	// EQVv16i8_2
    536871791U,	// EQVv16i8_3
    536871791U,	// EQVv2i64
    536871791U,	// EQVv2i64_1
    536871791U,	// EQVv2i64_2
    536871791U,	// EQVv2i64_3
    536871791U,	// EQVv4i32
    536871791U,	// EQVv4i32_1
    536871791U,	// EQVv4i32_2
    536871791U,	// EQVv4i32_3
    536871791U,	// EQVv8i16
    536871791U,	// EQVv8i16_1
    536871791U,	// EQVv8i16_2
    536871791U,	// EQVv8i16_3
    536871796U,	// FAf32
    536871800U,	// FAf64
    536871800U,	// FAv2f64
    536871796U,	// FAv4f32
    536871805U,	// FCEQf32
    536871811U,	// FCGTf32
    536871817U,	// FCMEQf32
    536871824U,	// FCMGTf32
    538968983U,	// FESDf32
    538968983U,	// FESDvec
    536871837U,	// FIf32
    536871837U,	// FIv4f32
    536937377U,	// FMAf32
    536871846U,	// FMAf64
    536871846U,	// FMAv2f64
    536937377U,	// FMAv4f32
    536937388U,	// FMSf32
    536871857U,	// FMSf64
    536871857U,	// FMSv2f64
    536937388U,	// FMSv4f32
    536871863U,	// FMf32
    536871867U,	// FMf64
    536871867U,	// FMv2f64
    536871863U,	// FMv4f32
    536871872U,	// FNMAf64
    536871872U,	// FNMAv2f64
    536937415U,	// FNMSf32
    536937415U,	// FNMSv4f32
    538969037U,	// FRDSf64
    538969043U,	// FRESTf32
    538969043U,	// FRESTv4f32
    738198490U,	// FSCRRf32
    2684355554U,	// FSCRWf32
    538969066U,	// FSM64r16
    538969066U,	// FSM64r32
    553649135U,	// FSMBIv16i8
    553649135U,	// FSMBIv2i64
    553649135U,	// FSMBIv4i32
    553649135U,	// FSMBIv8i16
    538969078U,	// FSMBv16i8
    538969078U,	// FSMBv16i8_r16
    538969084U,	// FSMHv8i16
    538969084U,	// FSMHv8i16_r16
    538969066U,	// FSMr16
    538969066U,	// FSMr32
    538969066U,	// FSMv4i32
    536871938U,	// FSf32
    536871942U,	// FSf64
    536871942U,	// FSv2f64
    536871938U,	// FSv4f32
    538969099U,	// GBBv16i8
    538969099U,	// GBBv16i8_r16
    538969099U,	// GBBv16i8_r32
    538969104U,	// GBHv8i16
    538969104U,	// GBHv8i16_r16
    538969104U,	// GBHv8i16_r32
    538969109U,	// GBv4i32
    538969109U,	// GBv4i32_r16
    538969109U,	// GBv4i32_r32
    557843481U,	// HEQIr32
    538969119U,	// HEQr32
    557843492U,	// HGTIr32
    538969130U,	// HGTr32
    557843503U,	// HLGTIr32
    538969142U,	// HLGTr32
    562037820U,	// ILAf32
    562037820U,	// ILAf64
    566232124U,	// ILAhi
    570426428U,	// ILAlo
    574620732U,	// ILAlsa
    562037820U,	// ILAr32
    562037820U,	// ILAr64
    562037820U,	// ILAv2i64
    562037820U,	// ILAv4i32
    553649217U,	// ILHUf32
    566232129U,	// ILHUhi
    553649217U,	// ILHUr32
    553649217U,	// ILHUr64
    553649217U,	// ILHUv2i64
    553649217U,	// ILHUv4i32
    578815047U,	// ILHr16
    578815047U,	// ILHr8
    578815047U,	// ILHv8i16
    578815052U,	// ILf32
    578815052U,	// ILf64
    578815052U,	// ILr32
    578815052U,	// ILr64
    578815052U,	// ILv2i64
    578815052U,	// ILv4i32
    551552080U,	// IOHLf32
    583009360U,	// IOHLlo
    551552080U,	// IOHLr32
    587203664U,	// IOHLv2i64
    587203664U,	// IOHLv4i32
    1110U,	// LNOP
    591397979U,	// LQAf32
    591397979U,	// LQAf64
    591397979U,	// LQAr128
    591397979U,	// LQAr16
    591397979U,	// LQAr32
    591397979U,	// LQAr64
    591397979U,	// LQAr8
    591397979U,	// LQAv16i8
    591397979U,	// LQAv2f64
    591397979U,	// LQAv2i64
    591397979U,	// LQAv4f32
    591397979U,	// LQAv4i32
    591397979U,	// LQAv8i16
    595592288U,	// LQDf32
    595592288U,	// LQDf64
    595592288U,	// LQDr128
    595592288U,	// LQDr16
    595592288U,	// LQDr32
    595592288U,	// LQDr64
    595592288U,	// LQDr8
    595592288U,	// LQDv16i8
    595592288U,	// LQDv2f64
    595592288U,	// LQDv2i64
    595592288U,	// LQDv4f32
    595592288U,	// LQDv4i32
    595592288U,	// LQDv8i16
    545260645U,	// LQXf32
    545260645U,	// LQXf64
    545260645U,	// LQXr128
    545260645U,	// LQXr16
    545260645U,	// LQXr32
    545260645U,	// LQXr64
    545260645U,	// LQXr8
    545260645U,	// LQXv16i8
    545260645U,	// LQXv2f64
    545260645U,	// LQXv2i64
    545260645U,	// LQXv4f32
    545260645U,	// LQXv4i32
    545260645U,	// LQXv8i16
    538969194U,	// LRf32
    538969194U,	// LRf64
    538969194U,	// LRr128
    538969194U,	// LRr16
    538969194U,	// LRr32
    538969194U,	// LRr64
    538969194U,	// LRr8
    538969194U,	// LRv16i8
    538969194U,	// LRv2f64
    538969194U,	// LRv2i64
    538969194U,	// LRv4f32
    538969194U,	// LRv4i32
    538969194U,	// LRv8i16
    536937582U,	// MPYAr32
    536937582U,	// MPYAr32_sext
    536937582U,	// MPYAr32_sextinreg
    536937582U,	// MPYAv4i32
    536872052U,	// MPYHHAUr32
    536872052U,	// MPYHHAUvec
    536872061U,	// MPYHHAr32
    536872061U,	// MPYHHAvec
    536872069U,	// MPYHHUr32
    536872069U,	// MPYHHUv4i32
    536872077U,	// MPYHHr32
    536872077U,	// MPYHHv8i16
    536872084U,	// MPYHr32
    536872084U,	// MPYHv4i32
    537003162U,	// MPYIr16
    537003162U,	// MPYIvec
    536872096U,	// MPYSr16
    536872096U,	// MPYSv4i32
    537003174U,	// MPYUIr16
    537003174U,	// MPYUIvec
    536872109U,	// MPYUr16
    536872109U,	// MPYUr32
    536872109U,	// MPYUv4i32
    536872115U,	// MPYr16
    536872115U,	// MPYv8i16
    536872120U,	// NANDr128
    536872120U,	// NANDr16
    536872120U,	// NANDr32
    536872120U,	// NANDr64
    536872120U,	// NANDr8
    536872120U,	// NANDv16i8
    536872120U,	// NANDv2i64
    536872120U,	// NANDv4i32
    536872120U,	// NANDv8i16
    536872126U,	// NORr128
    536872126U,	// NORr16
    536872126U,	// NORr32
    536872126U,	// NORr64
    536872126U,	// NORr8
    536872126U,	// NORv16i8
    536872126U,	// NORv2i64
    536872126U,	// NORv4i32
    536872126U,	// NORv8i16
    537134275U,	// ORBIr8
    537134275U,	// ORBIv16i8
    536872137U,	// ORCr128
    536872137U,	// ORCr16
    536872137U,	// ORCr32
    536872137U,	// ORCr64
    536872137U,	// ORCr8
    536872137U,	// ORCv16i8
    536872137U,	// ORCv2i64
    536872137U,	// ORCv4i32
    536872137U,	// ORCv8i16
    537003214U,	// ORHIi8i16
    537134286U,	// ORHIr16
    537134286U,	// ORHIv8i16
    537003220U,	// ORIi16i32
    537003220U,	// ORIi8i32
    537134292U,	// ORIr32
    537134292U,	// ORIv4i32
    536872153U,	// ORXv4i32
    536872158U,	// ORf32
    537396446U,	// ORf32_r32
    537396446U,	// ORf32_v4f32
    536872158U,	// ORf64
    537396446U,	// ORf64_r64
    537396446U,	// ORf64_v2f64
    537396446U,	// ORi128_vec
    537396446U,	// ORi16_v8i16
    537396446U,	// ORi32_v4i32
    537396446U,	// ORi64_v2i64
    537396446U,	// ORi8_v16i8
    536872158U,	// ORr128
    536872158U,	// ORr16
    536872158U,	// ORr32
    537396446U,	// ORr32_f32
    537396446U,	// ORr32_r64
    536872158U,	// ORr64
    537396446U,	// ORr64_f64
    537396446U,	// ORr64_r32
    536872158U,	// ORr8
    536872158U,	// ORv16i8
    537396446U,	// ORv16i8_i8
    536872158U,	// ORv2f64
    537396446U,	// ORv2f64_f64
    536872158U,	// ORv2i64
    537396446U,	// ORv2i64_i64
    536872158U,	// ORv4f32
    537396446U,	// ORv4f32_f32
    536872158U,	// ORv4i32
    537396446U,	// ORv4i32_i32
    536872158U,	// ORv8i16
    537396446U,	// ORv8i16_i16
    537396446U,	// ORvec_i128
    1250U,	// RET
    537527529U,	// ROTHIr16
    537527529U,	// ROTHIr16_r32
    537527529U,	// ROTHIv8i16
    537658608U,	// ROTHMIr16
    537658608U,	// ROTHMIv8i16
    536872184U,	// ROTHMr16
    536872184U,	// ROTHMv8i16
    536872191U,	// ROTHr16
    536872191U,	// ROTHr16_r32
    536872191U,	// ROTHv8i16
    537527557U,	// ROTIr32
    537527557U,	// ROTIr32_i16
    537527557U,	// ROTIr32_i8
    537527557U,	// ROTIv4i32
    537527557U,	// ROTIv4i32_i16
    537527557U,	// ROTIv4i32_i8
    537658635U,	// ROTMAHIr16
    537658635U,	// ROTMAHIv8i16
    536872212U,	// ROTMAHr16
    536872212U,	// ROTMAHv8i16
    537789724U,	// ROTMAIr32_i32
    537789724U,	// ROTMAIr64_i32
    537789724U,	// ROTMAIv2i64_i32
    537789724U,	// ROTMAIv4i32_i32
    536872228U,	// ROTMAr32
    536872228U,	// ROTMAv4i32
    537789739U,	// ROTMIr32
    537789739U,	// ROTMIv4i32
    536872242U,	// ROTMr32
    536872242U,	// ROTMv4i32
    537527608U,	// ROTQBIIr128
    537527608U,	// ROTQBIIr64
    537527608U,	// ROTQBIIv16i8
    537527608U,	// ROTQBIIv2i64
    537527608U,	// ROTQBIIv4i32
    537527608U,	// ROTQBIIv8i16
    536872257U,	// ROTQBIr128
    536872257U,	// ROTQBIr64
    536872257U,	// ROTQBIv16i8
    536872257U,	// ROTQBIv2i64
    536872257U,	// ROTQBIv4i32
    536872257U,	// ROTQBIv8i16
    536872265U,	// ROTQBYBIv16i8_r32
    536872265U,	// ROTQBYBIv2i64_r32
    536872265U,	// ROTQBYBIv4i32_r32
    536872265U,	// ROTQBYBIv8i16_r32
    537527635U,	// ROTQBYIv16i8
    537527635U,	// ROTQBYIv2i64
    537527635U,	// ROTQBYIv4f32
    537527635U,	// ROTQBYIv4i32
    537527635U,	// ROTQBYIv8i16
    537527635U,	// ROTQBYIvfi64
    536872284U,	// ROTQBYv16i8
    536872284U,	// ROTQBYv2f64
    536872284U,	// ROTQBYv2i64
    536872284U,	// ROTQBYv4f32
    536872284U,	// ROTQBYv4i32
    536872284U,	// ROTQBYv8i16
    537789796U,	// ROTQMBIIr128
    537789796U,	// ROTQMBIIr64
    537789796U,	// ROTQMBIIv16i8
    537789796U,	// ROTQMBIIv2i64
    537789796U,	// ROTQMBIIv4i32
    537789796U,	// ROTQMBIIv8i16
    536872302U,	// ROTQMBIr128
    536872302U,	// ROTQMBIr64
    536872302U,	// ROTQMBIv16i8
    536872302U,	// ROTQMBIv2i64
    536872302U,	// ROTQMBIv4i32
    536872302U,	// ROTQMBIv8i16
    536872311U,	// ROTQMBYBIv16i8
    536872311U,	// ROTQMBYBIv2i64
    536872311U,	// ROTQMBYBIv4i32
    536872311U,	// ROTQMBYBIv8i16
    537789826U,	// ROTQMBYIr128
    537789826U,	// ROTQMBYIr128_zext_r16
    537789826U,	// ROTQMBYIr128_zext_r32
    537789826U,	// ROTQMBYIr128_zext_r64
    537789826U,	// ROTQMBYIr128_zext_r8
    537789826U,	// ROTQMBYIr64
    537789826U,	// ROTQMBYIv16i8
    537789826U,	// ROTQMBYIv2i64
    537789826U,	// ROTQMBYIv4i32
    537789826U,	// ROTQMBYIv8i16
    536872332U,	// ROTQMBYr128
    536872332U,	// ROTQMBYr64
    536872332U,	// ROTQMBYv16i8
    536872332U,	// ROTQMBYv2i64
    536872332U,	// ROTQMBYv4i32
    536872332U,	// ROTQMBYv8i16
    536872341U,	// ROTr32
    536872341U,	// ROTr32_r16_anyext
    536872341U,	// ROTr32_r8_anyext
    536872341U,	// ROTv4i32
    536937882U,	// SELBf32_cond
    536937882U,	// SELBf64_cond
    536937882U,	// SELBr128
    536937882U,	// SELBr16
    536937882U,	// SELBr16_cond
    536937882U,	// SELBr32
    536937882U,	// SELBr32_cond
    536937882U,	// SELBr64
    536937882U,	// SELBr64_cond
    536937882U,	// SELBr8
    536937882U,	// SELBr8_cond
    536937882U,	// SELBv16i8
    536937882U,	// SELBv16i8_cond
    536937882U,	// SELBv16i8_vcond
    536937882U,	// SELBv2i64
    536937882U,	// SELBv2i64_cond
    536937882U,	// SELBv2i64_vcond
    536937882U,	// SELBv4f32_cond
    536937882U,	// SELBv4i32
    536937882U,	// SELBv4i32_cond
    536937882U,	// SELBv4i32_vcond
    536937882U,	// SELBv8i16
    536937882U,	// SELBv8i16_cond
    536937882U,	// SELBv8i16_vcond
    537003424U,	// SFHIr16
    537003424U,	// SFHIvec
    536872358U,	// SFHr16
    536872358U,	// SFHvec
    537003435U,	// SFIr32
    537003435U,	// SFIvec
    536872368U,	// SFXr32
    536872368U,	// SFXr64
    536872368U,	// SFXv2i64
    536872368U,	// SFXv4i32
    536872373U,	// SFr32
    536872373U,	// SFvec
    537527737U,	// SHLHIr16
    537527737U,	// SHLHIv8i16
    536872384U,	// SHLHr16
    536872384U,	// SHLHr16_r32
    536872384U,	// SHLHv8i16
    537527750U,	// SHLIr32
    537527750U,	// SHLIv4i32
    537527756U,	// SHLQBIIv16i8
    537527756U,	// SHLQBIIv2f64
    537527756U,	// SHLQBIIv2i64
    537527756U,	// SHLQBIIv4f32
    537527756U,	// SHLQBIIv4i32
    537527756U,	// SHLQBIIv8i16
    536872405U,	// SHLQBIr128
    536872405U,	// SHLQBIv16i8
    536872405U,	// SHLQBIv2f64
    536872405U,	// SHLQBIv2i64
    536872405U,	// SHLQBIv4f32
    536872405U,	// SHLQBIv4i32
    536872405U,	// SHLQBIv8i16
    536872413U,	// SHLQBYBIr128
    536872413U,	// SHLQBYBIv16i8
    536872413U,	// SHLQBYBIv2f64
    536872413U,	// SHLQBYBIv2i64
    536872413U,	// SHLQBYBIv4f32
    536872413U,	// SHLQBYBIv4i32
    536872413U,	// SHLQBYBIv8i16
    537527783U,	// SHLQBYIr128
    537527783U,	// SHLQBYIv16i8
    537527783U,	// SHLQBYIv2f64
    537527783U,	// SHLQBYIv2i64
    537527783U,	// SHLQBYIv4f32
    537527783U,	// SHLQBYIv4i32
    537527783U,	// SHLQBYIv8i16
    536872432U,	// SHLQBYr128
    536872432U,	// SHLQBYv16i8
    536872432U,	// SHLQBYv2f64
    536872432U,	// SHLQBYv2i64
    536872432U,	// SHLQBYv4f32
    536872432U,	// SHLQBYv4i32
    536872432U,	// SHLQBYv8i16
    536872440U,	// SHLr32
    536872440U,	// SHLv4i32
    536937981U,	// SHUFBgprc
    536937981U,	// SHUFBv16i8
    536937981U,	// SHUFBv16i8_m32
    536937981U,	// SHUFBv2f64
    536937981U,	// SHUFBv2f64_m32
    536937981U,	// SHUFBv2i64
    536937981U,	// SHUFBv2i64_m32
    536937981U,	// SHUFBv4f32
    536937981U,	// SHUFBv4f32_m32
    536937981U,	// SHUFBv4i32
    536937981U,	// SHUFBv4i32_m32
    536937981U,	// SHUFBv8i16
    536937981U,	// SHUFBv8i16_m32
    591398404U,	// STQAf32
    591398404U,	// STQAf64
    591398404U,	// STQAr128
    591398404U,	// STQAr16
    591398404U,	// STQAr32
    591398404U,	// STQAr64
    591398404U,	// STQAr8
    591398404U,	// STQAv16i8
    591398404U,	// STQAv2f64
    591398404U,	// STQAv2i64
    591398404U,	// STQAv4f32
    591398404U,	// STQAv4i32
    591398404U,	// STQAv8i16
    595592714U,	// STQDf32
    595592714U,	// STQDf64
    595592714U,	// STQDr128
    595592714U,	// STQDr16
    595592714U,	// STQDr32
    595592714U,	// STQDr64
    595592714U,	// STQDr8
    595592714U,	// STQDv16i8
    595592714U,	// STQDv2f64
    595592714U,	// STQDv2i64
    595592714U,	// STQDv4f32
    595592714U,	// STQDv4i32
    595592714U,	// STQDv8i16
    545261072U,	// STQXf32
    545261072U,	// STQXf64
    545261072U,	// STQXr128
    545261072U,	// STQXr16
    545261072U,	// STQXr32
    545261072U,	// STQXr64
    545261072U,	// STQXr8
    545261072U,	// STQXv16i8
    545261072U,	// STQXv2f64
    545261072U,	// STQXv2i64
    545261072U,	// STQXv4f32
    545261072U,	// STQXv4i32
    545261072U,	// STQXv8i16
    536872470U,	// SUMB
    537134620U,	// XORBIr8
    537134620U,	// XORBIv16i8
    537003555U,	// XORHIr16
    537134627U,	// XORHIv8i16
    537003562U,	// XORIr32
    537003562U,	// XORIv4i32
    536872496U,	// XORfneg32
    536872496U,	// XORfneg64
    536872496U,	// XORfnegvec
    536872496U,	// XORr128
    536872496U,	// XORr16
    536872496U,	// XORr32
    536872496U,	// XORr64
    536872496U,	// XORr8
    536872496U,	// XORv16i8
    536872496U,	// XORv2i64
    536872496U,	// XORv4i32
    536872496U,	// XORv8i16
    538969653U,	// XSBHr16
    538969653U,	// XSBHr32
    538969653U,	// XSBHr64
    538969653U,	// XSBHr8
    538969653U,	// XSBHv16i8
    538969659U,	// XSHWr16
    538969659U,	// XSHWr32
    538969659U,	// XSHWr64
    538969659U,	// XSHWv4i32
    538969665U,	// XSWDr64
    538969665U,	// XSWDr64_inreg
    538969665U,	// XSWDv2i64
    0U
  };

  const char *AsmStrs = 
    "DBG_VALUE\000absdb\t\000addx\t\000\000ahi\t\000ah\t\000ai\t\000andbi\t\000"
    "andc\t\000andhi\t\000andi\t\000and\t\000avgb\t\000a\t\000bgx\t\000bg\t\000"
    "bi\t\000bisl\t$lr, \000bisled\t$lr, \000br\t\000bra\t\000brasl\t$lr, \000"
    "brhnz\t\000brhz\t\000brnz\t\000brsl\t$lr, \000brz\t\000cbd\t\000cbx\t\000"
    "cdd\t\000cdx\t\000ceqbi\t\000ceqb\t\000ceqhi\t\000ceqh\t\000ceqi\t\000c"
    "eq\t\000cflts\t\000cfltu\t\000cgtbi\t\000cgtb\t\000cgthi\t\000cgth\t\000"
    "cgti\t\000cgt\t\000cg\t\000chd\t\000chx\t\000clgtbi\t\000clgtb\t\000clg"
    "thi\t\000clgth\t\000clgti\t\000clgt\t\000clz\t\000cntb\t\000csflt\t\000"
    "cuflt\t\000cwd\t\000cwx\t\000a \000addx \000ah \000ahi \000ai \000and\t"
    " \000andbi\t \000andc\t \000andhi\t \000andi\t \000bg \000bgx \000ceq\t"
    " \000ceqb\t \000ceqbi\t \000ceqh\t \000ceqhi\t \000ceqi\t \000cg \000cg"
    "t\t \000cgtb\t \000cgtbi\t \000cgth\t \000cgthi\t \000cgti\t \000cgx \000"
    "clgt\t \000clgtb\t \000clgtbi\t \000clgth\t \000clgthi\t \000clgti\t \000"
    "dfa\t \000dfm\t \000dfma\t \000dfms\t \000dfnma\t \000dfnms\t \000dfs\t"
    " \000fa\t \000fceq\t \000fcgt\t \000fcmeq\t \000fcmgt\t \000fm\t \000fm"
    "a\t \000fms\t \000fnms\t \000fs\t \000mpy \000mpya \000mpyh \000mpyhh \000"
    "mpyhha \000mpyhhau \000mpyhhu \000mpyi \000mpys \000mpyu \000mpyui \000"
    "nand\t \000nor\t \000or\t \000orbi\t \000addc\t \000orhi\t \000ori\t \000"
    "sf \000sfh \000sfhi \000sfi \000sfx \000xor\t \000xorbi\t \000xorhi\t \000"
    "xori\t \000dfnms\t\000enop\000eqv\t\000fa\t\000dfa\t\000fceq\t\000fcgt\t"
    "\000fcmeq\t\000fcmgt\t\000fesd\t\000fi\t\000fma\t\000dfma\t\000fms\t\000"
    "dfms\t\000fm\t\000dfm\t\000dfnma\t\000fnms\t\000frds\t\000frest\t\000fs"
    "crrd\t\000fscrwr\t\000fsm\t\000fsmbi\t\000fsmb\t\000fsmh\t\000fs\t\000d"
    "fs\t\000gbb\t\000gbh\t\000gb\t\000heqi\t\000heq\t\000hgti\t\000hgt\t\000"
    "hlgti\t\000hlgt\t\000ila\t\000ilhu\t\000ilh\t\000il\t\000iohl\t\000lnop"
    "\000lqa\t\000lqd\t\000lqx\t\000lr\t\000mpya\t\000mpyhhau\t\000mpyhha\t\000"
    "mpyhhu\t\000mpyhh\t\000mpyh\t\000mpyi\t\000mpys\t\000mpyui\t\000mpyu\t\000"
    "mpy\t\000nand\t\000nor\t\000orbi\t\000orc\t\000orhi\t\000ori\t\000orx\t"
    "\000or\t\000bi\t$lr\000rothi\t\000rothmi\t\000rothm\t\000roth\t\000roti"
    "\t\000rotmahi\t\000rotmah\t\000rotmai\t\000rotma\t\000rotmi\t\000rotm\t"
    "\000rotqbii\t\000rotqbi\t\000rotqbybi\t\000rotqbyi\t\000rotqby\t\000rot"
    "qmbii\t\000rotqmbi\t\000rotqmbybi\t\000rotqmbyi\t\000rotqmby\t\000rot\t"
    "\000selb\t\000sfhi\t\000sfh\t\000sfi\t\000sfx\t\000sf\t\000shlhi\t\000s"
    "hlh\t\000shli\t\000shlqbii\t\000shlqbi\t\000shlqbybi\t\000shlqbyi\t\000"
    "shlqby\t\000shl\t\000shufb\t\000stqa\t\000stqd\t\000stqx\t\000sumb\t\000"
    "xorbi\t\000xorhi\t\000xori\t\000xor\t\000xsbh\t\000xshw\t\000xswd\t\000";

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 2047)-1;


  // Fragment 0 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 29) & 7) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, ENOP, LNOP, RET
    return;
    break;
  case 1:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP
    PrintSpecial(MI, O, "comment"); 
    break;
  case 3:
    // BISLED_00, BISLED_0D, BISLED_E0, BISLED_ED, BRASL
    printCallOperand(MI, 0, O); 
    return;
    break;
  case 4:
    // BR, BRA, BRSL
    printPCRelativeOperand(MI, 0, O); 
    return;
    break;
  case 5:
    // FSCRWf32
    printOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 1 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 26) & 7) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    O << ", "; 
    break;
  case 1:
    // ADJCALLSTACKDOWN
    O << " ADJCALLSTACKDOWN"; 
    return;
    break;
  case 2:
    // ADJCALLSTACKUP
    O << " ADJCALLSTACKUP"; 
    return;
    break;
  case 3:
    // BI, BISL, FSCRRf32
    return;
    break;
  case 4:
    // BRHNZr16, BRHNZv8i16, BRHZr16, BRHZv8i16, BRNZr32, BRNZv4i32, BRZr32, ...
    O << ','; 
    printPCRelativeOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 22) & 15) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // CBD, CDD, CDDf64, CHD, CWD, CWDf32
    printShufAddr(MI, 1, O); 
    return;
    break;
  case 2:
    // CBX, CDX, CDXf64, CHX, CWX, CWXf32, LQXf32, LQXf64, LQXr128, LQXr16, L...
    printMemRegReg(MI, 1, O); 
    return;
    break;
  case 3:
    // CellSDKahi, CellSDKai, CellSDKsfhi, CellSDKsfi, IOHLf32, IOHLr32
    printOperand(MI, 2, O); 
    break;
  case 4:
    // FSMBIv16i8, FSMBIv2i64, FSMBIv4i32, FSMBIv8i16, ILHUf32, ILHUr32, ILHU...
    printU16ImmOperand(MI, 1, O); 
    return;
    break;
  case 5:
    // HEQIr32, HGTIr32, HLGTIr32
    printS10ImmOperand(MI, 1, O); 
    return;
    break;
  case 6:
    // ILAf32, ILAf64, ILAr32, ILAr64, ILAv2i64, ILAv4i32
    printU18ImmOperand(MI, 1, O); 
    return;
    break;
  case 7:
    // ILAhi, ILHUhi
    printSymbolHi(MI, 1, O); 
    return;
    break;
  case 8:
    // ILAlo
    printSymbolLo(MI, 1, O); 
    return;
    break;
  case 9:
    // ILAlsa
    printSymbolLSA(MI, 1, O); 
    return;
    break;
  case 10:
    // ILHr16, ILHr8, ILHv8i16, ILf32, ILf64, ILr32, ILr64, ILv2i64, ILv4i32
    printS16ImmOperand(MI, 1, O); 
    return;
    break;
  case 11:
    // IOHLlo
    printSymbolLo(MI, 2, O); 
    return;
    break;
  case 12:
    // IOHLv2i64, IOHLv4i32
    printU16ImmOperand(MI, 2, O); 
    return;
    break;
  case 13:
    // LQAf32, LQAf64, LQAr128, LQAr16, LQAr32, LQAr64, LQAr8, LQAv16i8, LQAv...
    printAddr256K(MI, 1, O); 
    return;
    break;
  case 14:
    // LQDf32, LQDf64, LQDr128, LQDr16, LQDr32, LQDr64, LQDr8, LQDv16i8, LQDv...
    printDFormAddr(MI, 1, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 20) & 3) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    O << ", "; 
    break;
  case 1:
    // CFSif32, CFSiv4f32, CFUif32, CFUiv4f32, CSiFf32, CSiFv4f32, CUiFf32, C...
    O << ", 0"; 
    return;
    break;
  case 2:
    // CLZr32, CLZv4i32, CNTBv16i8, CNTBv4i32, CNTBv8i16, FESDf32, FESDvec, F...
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 17) & 7) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHr16, AHv8i16, ANDCr12...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // AHIr16, AHIvec, AIf32, AIr32, AIv4f32, AIv4i32, ANDHIv8i16, ANDIi16i32...
    printS10ImmOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // ANDBIr8, ANDBIv16i8, ANDHIi8i16, ANDHIr16, CellSDKandbi, CellSDKceqbi,...
    printU10ImmOperand(MI, 2, O); 
    return;
    break;
  case 3:
    // CellSDKahi, CellSDKai, CellSDKsfhi, CellSDKsfi
    printS10ImmOperand(MI, 1, O); 
    return;
    break;
  case 4:
    // ORf32_r32, ORf32_v4f32, ORf64_r64, ORf64_v2f64, ORi128_vec, ORi16_v8i1...
    printOperand(MI, 1, O); 
    return;
    break;
  case 5:
    // ROTHIr16, ROTHIr16_r32, ROTHIv8i16, ROTIr32, ROTIr32_i16, ROTIr32_i8, ...
    printU7ImmOperand(MI, 2, O); 
    return;
    break;
  case 6:
    // ROTHMIr16, ROTHMIv8i16, ROTMAHIr16, ROTMAHIv8i16
    printROTHNeg7Imm(MI, 2, O); 
    return;
    break;
  case 7:
    // ROTMAIr32_i32, ROTMAIr64_i32, ROTMAIv2i64_i32, ROTMAIv4i32_i32, ROTMIr...
    printROTNeg7Imm(MI, 2, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 16) & 1) {
    // CellSDKfma, CellSDKfms, CellSDKfnms, CellSDKmpya, FMAf32, FMAv4f32, FM...
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
  } else {
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHr16, AHv8i16, ANDCr12...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *SPUAsmPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 129 && "Invalid register number!");

  static const unsigned RegAsmOffset[] = {
    0, 4, 8, 11, 14, 17, 20, 23, 26, 29, 32, 36, 40, 44, 
    48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 
    104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152, 156, 
    160, 164, 168, 172, 176, 180, 184, 188, 192, 196, 200, 204, 208, 212, 
    216, 220, 224, 228, 232, 236, 240, 244, 248, 252, 256, 260, 264, 268, 
    272, 276, 280, 284, 288, 292, 296, 300, 304, 308, 312, 316, 320, 324, 
    328, 332, 336, 340, 344, 348, 352, 356, 360, 364, 368, 372, 376, 380, 
    384, 388, 392, 397, 402, 407, 412, 417, 422, 427, 432, 437, 442, 447, 
    452, 457, 462, 467, 472, 477, 482, 487, 492, 497, 502, 507, 512, 517, 
    522, 527, 0
  };

  const char *AsmStrs =
    "$lr\000$sp\000$2\000$3\000$4\000$5\000$6\000$7\000$8\000$9\000$10\000$1"
    "1\000$12\000$13\000$14\000$15\000$16\000$17\000$18\000$19\000$20\000$21"
    "\000$22\000$23\000$24\000$25\000$26\000$27\000$28\000$29\000$30\000$31\000"
    "$32\000$33\000$34\000$35\000$36\000$37\000$38\000$39\000$40\000$41\000$"
    "42\000$43\000$44\000$45\000$46\000$47\000$48\000$49\000$50\000$51\000$5"
    "2\000$53\000$54\000$55\000$56\000$57\000$58\000$59\000$60\000$61\000$62"
    "\000$63\000$64\000$65\000$66\000$67\000$68\000$69\000$70\000$71\000$72\000"
    "$73\000$74\000$75\000$76\000$77\000$78\000$79\000$80\000$81\000$82\000$"
    "83\000$84\000$85\000$86\000$87\000$88\000$89\000$90\000$91\000$92\000$9"
    "3\000$94\000$95\000$96\000$97\000$98\000$99\000$100\000$101\000$102\000"
    "$103\000$104\000$105\000$106\000$107\000$108\000$109\000$110\000$111\000"
    "$112\000$113\000$114\000$115\000$116\000$117\000$118\000$119\000$120\000"
    "$121\000$122\000$123\000$124\000$125\000$126\000$127\000";
  return AsmStrs+RegAsmOffset[RegNo-1];
}


#ifdef GET_INSTRUCTION_NAME
#undef GET_INSTRUCTION_NAME

/// getInstructionName: This method is automatically generated by tblgen
/// from the instruction set description.  This returns the enum name of the
/// specified instruction.
const char *SPUAsmPrinter::getInstructionName(unsigned Opcode) {
  assert(Opcode < 769 && "Invalid instruction number!");

  static const unsigned InstAsmOffset[] = {
    0, 4, 14, 27, 36, 45, 50, 65, 79, 92, 106, 123, 133, 146, 
    151, 157, 165, 173, 183, 193, 210, 225, 232, 239, 245, 253, 259, 265, 
    273, 281, 289, 300, 309, 317, 325, 333, 340, 350, 365, 375, 385, 395, 
    406, 415, 426, 437, 447, 455, 465, 475, 485, 496, 506, 514, 521, 528, 
    535, 541, 550, 559, 568, 577, 582, 587, 594, 601, 608, 614, 620, 628, 
    636, 639, 644, 654, 664, 674, 684, 687, 691, 697, 706, 717, 725, 735, 
    743, 753, 758, 765, 774, 778, 782, 786, 793, 797, 804, 812, 823, 830, 
    840, 849, 860, 868, 878, 886, 896, 903, 912, 920, 930, 938, 948, 956, 
    967, 974, 984, 993, 1004, 1012, 1022, 1030, 1038, 1048, 1058, 1065, 1074, 1080, 
    1086, 1094, 1102, 1106, 1110, 1119, 1131, 1139, 1150, 1160, 1172, 1181, 1192, 1201, 
    1212, 1220, 1230, 1237, 1246, 1256, 1266, 1276, 1284, 1294, 1302, 1312, 1316, 1323, 
    1327, 1334, 1343, 1355, 1365, 1376, 1386, 1397, 1410, 1422, 1435, 1447, 1457, 1468, 
    1479, 1491, 1504, 1516, 1529, 1541, 1551, 1562, 1574, 1587, 1599, 1612, 1624, 1635, 
    1647, 1660, 1674, 1687, 1701, 1714, 1725, 1736, 1748, 1760, 1773, 1786, 1797, 1807, 
    1819, 1831, 1844, 1857, 1867, 1878, 1889, 1901, 1911, 1922, 1934, 1946, 1959, 1973, 
    1988, 2002, 2014, 2026, 2038, 2051, 2063, 2074, 2084, 2096, 2107, 2119, 2130, 2140, 
    2151, 2163, 2174, 2185, 2196, 2209, 2222, 2234, 2243, 2254, 2259, 2267, 2277, 2287, 
    2297, 2304, 2313, 2322, 2331, 2338, 2347, 2356, 2365, 2372, 2381, 2390, 2399, 2405, 
    2413, 2421, 2429, 2438, 2449, 2460, 2471, 2480, 2491, 2502, 2513, 2522, 2533, 2544, 
    2555, 2564, 2575, 2586, 2597, 2603, 2609, 2617, 2625, 2633, 2641, 2650, 2659, 2667, 
    2675, 2681, 2689, 2696, 2703, 2712, 2721, 2728, 2735, 2744, 2753, 2759, 2765, 2773, 
    2781, 2789, 2799, 2807, 2817, 2825, 2834, 2845, 2854, 2863, 2872, 2881, 2892, 2903, 
    2914, 2925, 2935, 2949, 2959, 2973, 2980, 2987, 2996, 3002, 3008, 3016, 3024, 3033, 
    3046, 3059, 3068, 3081, 3094, 3102, 3114, 3126, 3134, 3141, 3149, 3156, 3165, 3173, 
    3180, 3187, 3193, 3199, 3206, 3213, 3220, 3229, 3238, 3246, 3253, 3261, 3269, 3279, 
    3289, 3296, 3302, 3311, 3317, 3323, 3329, 3335, 3343, 3351, 3359, 3366, 3374, 3384, 
    3394, 3399, 3406, 3413, 3421, 3428, 3435, 3442, 3448, 3457, 3466, 3475, 3484, 3493, 
    3502, 3509, 3516, 3524, 3531, 3538, 3545, 3551, 3560, 3569, 3578, 3587, 3596, 3605, 
    3612, 3619, 3627, 3634, 3641, 3648, 3654, 3663, 3672, 3681, 3690, 3699, 3708, 3714, 
    3720, 3727, 3733, 3739, 3745, 3750, 3758, 3766, 3774, 3782, 3790, 3798, 3806, 3819, 
    3837, 3847, 3858, 3869, 3879, 3889, 3899, 3911, 3920, 3931, 3939, 3949, 3957, 3965, 
    3973, 3983, 3992, 4001, 4009, 4017, 4027, 4034, 4043, 4052, 4060, 4068, 4076, 4083, 
    4093, 4103, 4113, 4123, 4131, 4138, 4145, 4152, 4158, 4167, 4176, 4185, 4194, 4201, 
    4211, 4219, 4226, 4233, 4240, 4246, 4255, 4264, 4273, 4282, 4292, 4300, 4310, 4320, 
    4329, 4336, 4345, 4354, 4360, 4370, 4382, 4388, 4398, 4410, 4421, 4433, 4445, 4457, 
    4468, 4475, 4481, 4487, 4497, 4507, 4513, 4523, 4533, 4538, 4546, 4557, 4565, 4577, 
    4585, 4597, 4605, 4617, 4625, 4637, 4645, 4657, 4668, 4672, 4681, 4694, 4705, 4715, 
    4727, 4736, 4747, 4755, 4767, 4777, 4785, 4797, 4808, 4818, 4832, 4845, 4856, 4869, 
    4879, 4891, 4905, 4919, 4935, 4951, 4960, 4971, 4980, 4991, 4999, 5009, 5021, 5032, 
    5045, 5058, 5071, 5084, 5095, 5105, 5117, 5129, 5141, 5153, 5171, 5189, 5207, 5225, 
    5238, 5251, 5264, 5277, 5290, 5303, 5315, 5327, 5339, 5351, 5363, 5375, 5388, 5400, 
    5414, 5428, 5442, 5456, 5468, 5479, 5492, 5505, 5518, 5531, 5546, 5561, 5576, 5591, 
    5604, 5626, 5648, 5670, 5691, 5703, 5717, 5731, 5745, 5759, 5771, 5782, 5795, 5808, 
    5821, 5834, 5841, 5859, 5876, 5885, 5898, 5911, 5920, 5928, 5941, 5949, 5962, 5970, 
    5983, 5990, 6002, 6012, 6027, 6043, 6053, 6068, 6084, 6099, 6109, 6124, 6140, 6150, 
    6165, 6181, 6189, 6197, 6204, 6211, 6218, 6225, 6232, 6239, 6248, 6257, 6263, 6269, 
    6278, 6289, 6297, 6309, 6319, 6327, 6337, 6350, 6363, 6376, 6389, 6402, 6415, 6426, 
    6438, 6450, 6462, 6474, 6486, 6498, 6511, 6525, 6539, 6553, 6567, 6581, 6595, 6607, 
    6620, 6633, 6646, 6659, 6672, 6685, 6696, 6708, 6720, 6732, 6744, 6756, 6768, 6775, 
    6784, 6794, 6805, 6820, 6831, 6846, 6857, 6872, 6883, 6898, 6909, 6924, 6935, 6950, 
    6958, 6966, 6975, 6983, 6991, 6999, 7006, 7016, 7026, 7036, 7046, 7056, 7066, 7074, 
    7082, 7091, 7099, 7107, 7115, 7122, 7132, 7142, 7152, 7162, 7172, 7182, 7190, 7198, 
    7207, 7215, 7223, 7231, 7238, 7248, 7258, 7268, 7278, 7288, 7298, 7303, 7311, 7322, 
    7331, 7342, 7350, 7360, 7370, 7380, 7391, 7399, 7406, 7413, 7420, 7426, 7435, 7444, 
    7453, 7462, 7470, 7478, 7486, 7493, 7503, 7511, 7519, 7527, 7537, 7545, 7559, 0
  };

  const char *Strs =
    "PHI\000INLINEASM\000PROLOG_LABEL\000EH_LABEL\000GC_LABEL\000KILL\000EXT"
    "RACT_SUBREG\000INSERT_SUBREG\000IMPLICIT_DEF\000SUBREG_TO_REG\000COPY_T"
    "O_REGCLASS\000DBG_VALUE\000REG_SEQUENCE\000COPY\000ABSDB\000ADDXr32\000"
    "ADDXr64\000ADDXv2i64\000ADDXv4i32\000ADJCALLSTACKDOWN\000ADJCALLSTACKUP"
    "\000AHIr16\000AHIvec\000AHr16\000AHv8i16\000AIf32\000AIr32\000AIv4f32\000"
    "AIv4i32\000ANDBIr8\000ANDBIv16i8\000ANDCr128\000ANDCr16\000ANDCr32\000A"
    "NDCr64\000ANDCr8\000ANDCv16i8\000ANDCv16i8_conv\000ANDCv2i64\000ANDCv4i"
    "32\000ANDCv8i16\000ANDHIi8i16\000ANDHIr16\000ANDHIv8i16\000ANDIi16i32\000"
    "ANDIi8i32\000ANDIr32\000ANDIv4i32\000ANDfabs32\000ANDfabs64\000ANDfabsv"
    "ec\000ANDi16i32\000ANDr128\000ANDr16\000ANDr32\000ANDr64\000ANDr8\000AN"
    "Dv16i8\000ANDv2i64\000ANDv4i32\000ANDv8i16\000AVGB\000Ar32\000Av16i8\000"
    "Av4i32\000BGXvec\000BGr32\000BGr64\000BGv2i64\000BGv4i32\000BI\000BISL\000"
    "BISLED_00\000BISLED_0D\000BISLED_E0\000BISLED_ED\000BR\000BRA\000BRASL\000"
    "BRHNZr16\000BRHNZv8i16\000BRHZr16\000BRHZv8i16\000BRNZr32\000BRNZv4i32\000"
    "BRSL\000BRZr32\000BRZv4i32\000CBD\000CBX\000CDD\000CDDf64\000CDX\000CDX"
    "f64\000CEQBIr8\000CEQBIv16i8\000CEQBr8\000CEQBv16i8\000CEQHIr16\000CEQH"
    "Iv8i16\000CEQHr16\000CEQHv8i16\000CEQIr32\000CEQIv4i32\000CEQr32\000CEQ"
    "v4i32\000CFSif32\000CFSiv4f32\000CFUif32\000CFUiv4f32\000CGTBIr8\000CGT"
    "BIv16i8\000CGTBr8\000CGTBv16i8\000CGTHIr16\000CGTHIv8i16\000CGTHr16\000"
    "CGTHv8i16\000CGTIf32\000CGTIr32\000CGTIv4f32\000CGTIv4i32\000CGTr32\000"
    "CGTv4i32\000CGr32\000CGr64\000CGv2i64\000CGv4i32\000CHD\000CHX\000CLGTB"
    "Ir8\000CLGTBIv16i8\000CLGTBr8\000CLGTBv16i8\000CLGTHIr16\000CLGTHIv8i16"
    "\000CLGTHr16\000CLGTHv8i16\000CLGTIr32\000CLGTIv4i32\000CLGTr32\000CLGT"
    "v4i32\000CLZr32\000CLZv4i32\000CNTBv16i8\000CNTBv4i32\000CNTBv8i16\000C"
    "SiFf32\000CSiFv4f32\000CUiFf32\000CUiFv4f32\000CWD\000CWDf32\000CWX\000"
    "CWXf32\000CellSDKa\000CellSDKaddx\000CellSDKah\000CellSDKahi\000CellSDK"
    "ai\000CellSDKand\000CellSDKandbi\000CellSDKandc\000CellSDKandhi\000Cell"
    "SDKandi\000CellSDKbg\000CellSDKbgx\000CellSDKceq\000CellSDKceqb\000Cell"
    "SDKceqbi\000CellSDKceqh\000CellSDKceqhi\000CellSDKceqi\000CellSDKcg\000"
    "CellSDKcgt\000CellSDKcgtb\000CellSDKcgtbi\000CellSDKcgth\000CellSDKcgth"
    "i\000CellSDKcgti\000CellSDKcgx\000CellSDKclgt\000CellSDKclgtb\000CellSD"
    "Kclgtbi\000CellSDKclgth\000CellSDKclgthi\000CellSDKclgti\000CellSDKdfa\000"
    "CellSDKdfm\000CellSDKdfma\000CellSDKdfms\000CellSDKdfnma\000CellSDKdfnm"
    "s\000CellSDKdfs\000CellSDKfa\000CellSDKfceq\000CellSDKfcgt\000CellSDKfc"
    "meq\000CellSDKfcmgt\000CellSDKfm\000CellSDKfma\000CellSDKfms\000CellSDK"
    "fnms\000CellSDKfs\000CellSDKmpy\000CellSDKmpya\000CellSDKmpyh\000CellSD"
    "Kmpyhh\000CellSDKmpyhha\000CellSDKmpyhhau\000CellSDKmpyhhu\000CellSDKmp"
    "yi\000CellSDKmpys\000CellSDKmpyu\000CellSDKmpyui\000CellSDKnand\000Cell"
    "SDKnor\000CellSDKor\000CellSDKorbi\000CellSDKorc\000CellSDKorhi\000Cell"
    "SDKori\000CellSDKsf\000CellSDKsfh\000CellSDKsfhi\000CellSDKsfi\000CellS"
    "DKsfx\000CellSDKxor\000CellSDKxorbi\000CellSDKxorhi\000CellSDKxori\000D"
    "FNMSf64\000DFNMSv2f64\000ENOP\000EQVr128\000EQVr128_1\000EQVr128_2\000E"
    "QVr128_3\000EQVr16\000EQVr16_1\000EQVr16_2\000EQVr16_3\000EQVr32\000EQV"
    "r32_1\000EQVr32_2\000EQVr32_3\000EQVr64\000EQVr64_1\000EQVr64_2\000EQVr"
    "64_3\000EQVr8\000EQVr8_1\000EQVr8_2\000EQVr8_3\000EQVv16i8\000EQVv16i8_"
    "1\000EQVv16i8_2\000EQVv16i8_3\000EQVv2i64\000EQVv2i64_1\000EQVv2i64_2\000"
    "EQVv2i64_3\000EQVv4i32\000EQVv4i32_1\000EQVv4i32_2\000EQVv4i32_3\000EQV"
    "v8i16\000EQVv8i16_1\000EQVv8i16_2\000EQVv8i16_3\000FAf32\000FAf64\000FA"
    "v2f64\000FAv4f32\000FCEQf32\000FCGTf32\000FCMEQf32\000FCMGTf32\000FESDf"
    "32\000FESDvec\000FIf32\000FIv4f32\000FMAf32\000FMAf64\000FMAv2f64\000FM"
    "Av4f32\000FMSf32\000FMSf64\000FMSv2f64\000FMSv4f32\000FMf32\000FMf64\000"
    "FMv2f64\000FMv4f32\000FNMAf64\000FNMAv2f64\000FNMSf32\000FNMSv4f32\000F"
    "RDSf64\000FRESTf32\000FRESTv4f32\000FSCRRf32\000FSCRWf32\000FSM64r16\000"
    "FSM64r32\000FSMBIv16i8\000FSMBIv2i64\000FSMBIv4i32\000FSMBIv8i16\000FSM"
    "Bv16i8\000FSMBv16i8_r16\000FSMHv8i16\000FSMHv8i16_r16\000FSMr16\000FSMr"
    "32\000FSMv4i32\000FSf32\000FSf64\000FSv2f64\000FSv4f32\000GBBv16i8\000G"
    "BBv16i8_r16\000GBBv16i8_r32\000GBHv8i16\000GBHv8i16_r16\000GBHv8i16_r32"
    "\000GBv4i32\000GBv4i32_r16\000GBv4i32_r32\000HEQIr32\000HEQr32\000HGTIr"
    "32\000HGTr32\000HLGTIr32\000HLGTr32\000ILAf32\000ILAf64\000ILAhi\000ILA"
    "lo\000ILAlsa\000ILAr32\000ILAr64\000ILAv2i64\000ILAv4i32\000ILHUf32\000"
    "ILHUhi\000ILHUr32\000ILHUr64\000ILHUv2i64\000ILHUv4i32\000ILHr16\000ILH"
    "r8\000ILHv8i16\000ILf32\000ILf64\000ILr32\000ILr64\000ILv2i64\000ILv4i3"
    "2\000IOHLf32\000IOHLlo\000IOHLr32\000IOHLv2i64\000IOHLv4i32\000LNOP\000"
    "LQAf32\000LQAf64\000LQAr128\000LQAr16\000LQAr32\000LQAr64\000LQAr8\000L"
    "QAv16i8\000LQAv2f64\000LQAv2i64\000LQAv4f32\000LQAv4i32\000LQAv8i16\000"
    "LQDf32\000LQDf64\000LQDr128\000LQDr16\000LQDr32\000LQDr64\000LQDr8\000L"
    "QDv16i8\000LQDv2f64\000LQDv2i64\000LQDv4f32\000LQDv4i32\000LQDv8i16\000"
    "LQXf32\000LQXf64\000LQXr128\000LQXr16\000LQXr32\000LQXr64\000LQXr8\000L"
    "QXv16i8\000LQXv2f64\000LQXv2i64\000LQXv4f32\000LQXv4i32\000LQXv8i16\000"
    "LRf32\000LRf64\000LRr128\000LRr16\000LRr32\000LRr64\000LRr8\000LRv16i8\000"
    "LRv2f64\000LRv2i64\000LRv4f32\000LRv4i32\000LRv8i16\000MPYAr32\000MPYAr"
    "32_sext\000MPYAr32_sextinreg\000MPYAv4i32\000MPYHHAUr32\000MPYHHAUvec\000"
    "MPYHHAr32\000MPYHHAvec\000MPYHHUr32\000MPYHHUv4i32\000MPYHHr32\000MPYHH"
    "v8i16\000MPYHr32\000MPYHv4i32\000MPYIr16\000MPYIvec\000MPYSr16\000MPYSv"
    "4i32\000MPYUIr16\000MPYUIvec\000MPYUr16\000MPYUr32\000MPYUv4i32\000MPYr"
    "16\000MPYv8i16\000NANDr128\000NANDr16\000NANDr32\000NANDr64\000NANDr8\000"
    "NANDv16i8\000NANDv2i64\000NANDv4i32\000NANDv8i16\000NORr128\000NORr16\000"
    "NORr32\000NORr64\000NORr8\000NORv16i8\000NORv2i64\000NORv4i32\000NORv8i"
    "16\000ORBIr8\000ORBIv16i8\000ORCr128\000ORCr16\000ORCr32\000ORCr64\000O"
    "RCr8\000ORCv16i8\000ORCv2i64\000ORCv4i32\000ORCv8i16\000ORHIi8i16\000OR"
    "HIr16\000ORHIv8i16\000ORIi16i32\000ORIi8i32\000ORIr32\000ORIv4i32\000OR"
    "Xv4i32\000ORf32\000ORf32_r32\000ORf32_v4f32\000ORf64\000ORf64_r64\000OR"
    "f64_v2f64\000ORi128_vec\000ORi16_v8i16\000ORi32_v4i32\000ORi64_v2i64\000"
    "ORi8_v16i8\000ORr128\000ORr16\000ORr32\000ORr32_f32\000ORr32_r64\000ORr"
    "64\000ORr64_f64\000ORr64_r32\000ORr8\000ORv16i8\000ORv16i8_i8\000ORv2f6"
    "4\000ORv2f64_f64\000ORv2i64\000ORv2i64_i64\000ORv4f32\000ORv4f32_f32\000"
    "ORv4i32\000ORv4i32_i32\000ORv8i16\000ORv8i16_i16\000ORvec_i128\000RET\000"
    "ROTHIr16\000ROTHIr16_r32\000ROTHIv8i16\000ROTHMIr16\000ROTHMIv8i16\000R"
    "OTHMr16\000ROTHMv8i16\000ROTHr16\000ROTHr16_r32\000ROTHv8i16\000ROTIr32"
    "\000ROTIr32_i16\000ROTIr32_i8\000ROTIv4i32\000ROTIv4i32_i16\000ROTIv4i3"
    "2_i8\000ROTMAHIr16\000ROTMAHIv8i16\000ROTMAHr16\000ROTMAHv8i16\000ROTMA"
    "Ir32_i32\000ROTMAIr64_i32\000ROTMAIv2i64_i32\000ROTMAIv4i32_i32\000ROTM"
    "Ar32\000ROTMAv4i32\000ROTMIr32\000ROTMIv4i32\000ROTMr32\000ROTMv4i32\000"
    "ROTQBIIr128\000ROTQBIIr64\000ROTQBIIv16i8\000ROTQBIIv2i64\000ROTQBIIv4i"
    "32\000ROTQBIIv8i16\000ROTQBIr128\000ROTQBIr64\000ROTQBIv16i8\000ROTQBIv"
    "2i64\000ROTQBIv4i32\000ROTQBIv8i16\000ROTQBYBIv16i8_r32\000ROTQBYBIv2i6"
    "4_r32\000ROTQBYBIv4i32_r32\000ROTQBYBIv8i16_r32\000ROTQBYIv16i8\000ROTQ"
    "BYIv2i64\000ROTQBYIv4f32\000ROTQBYIv4i32\000ROTQBYIv8i16\000ROTQBYIvfi6"
    "4\000ROTQBYv16i8\000ROTQBYv2f64\000ROTQBYv2i64\000ROTQBYv4f32\000ROTQBY"
    "v4i32\000ROTQBYv8i16\000ROTQMBIIr128\000ROTQMBIIr64\000ROTQMBIIv16i8\000"
    "ROTQMBIIv2i64\000ROTQMBIIv4i32\000ROTQMBIIv8i16\000ROTQMBIr128\000ROTQM"
    "BIr64\000ROTQMBIv16i8\000ROTQMBIv2i64\000ROTQMBIv4i32\000ROTQMBIv8i16\000"
    "ROTQMBYBIv16i8\000ROTQMBYBIv2i64\000ROTQMBYBIv4i32\000ROTQMBYBIv8i16\000"
    "ROTQMBYIr128\000ROTQMBYIr128_zext_r16\000ROTQMBYIr128_zext_r32\000ROTQM"
    "BYIr128_zext_r64\000ROTQMBYIr128_zext_r8\000ROTQMBYIr64\000ROTQMBYIv16i"
    "8\000ROTQMBYIv2i64\000ROTQMBYIv4i32\000ROTQMBYIv8i16\000ROTQMBYr128\000"
    "ROTQMBYr64\000ROTQMBYv16i8\000ROTQMBYv2i64\000ROTQMBYv4i32\000ROTQMBYv8"
    "i16\000ROTr32\000ROTr32_r16_anyext\000ROTr32_r8_anyext\000ROTv4i32\000S"
    "ELBf32_cond\000SELBf64_cond\000SELBr128\000SELBr16\000SELBr16_cond\000S"
    "ELBr32\000SELBr32_cond\000SELBr64\000SELBr64_cond\000SELBr8\000SELBr8_c"
    "ond\000SELBv16i8\000SELBv16i8_cond\000SELBv16i8_vcond\000SELBv2i64\000S"
    "ELBv2i64_cond\000SELBv2i64_vcond\000SELBv4f32_cond\000SELBv4i32\000SELB"
    "v4i32_cond\000SELBv4i32_vcond\000SELBv8i16\000SELBv8i16_cond\000SELBv8i"
    "16_vcond\000SFHIr16\000SFHIvec\000SFHr16\000SFHvec\000SFIr32\000SFIvec\000"
    "SFXr32\000SFXr64\000SFXv2i64\000SFXv4i32\000SFr32\000SFvec\000SHLHIr16\000"
    "SHLHIv8i16\000SHLHr16\000SHLHr16_r32\000SHLHv8i16\000SHLIr32\000SHLIv4i"
    "32\000SHLQBIIv16i8\000SHLQBIIv2f64\000SHLQBIIv2i64\000SHLQBIIv4f32\000S"
    "HLQBIIv4i32\000SHLQBIIv8i16\000SHLQBIr128\000SHLQBIv16i8\000SHLQBIv2f64"
    "\000SHLQBIv2i64\000SHLQBIv4f32\000SHLQBIv4i32\000SHLQBIv8i16\000SHLQBYB"
    "Ir128\000SHLQBYBIv16i8\000SHLQBYBIv2f64\000SHLQBYBIv2i64\000SHLQBYBIv4f"
    "32\000SHLQBYBIv4i32\000SHLQBYBIv8i16\000SHLQBYIr128\000SHLQBYIv16i8\000"
    "SHLQBYIv2f64\000SHLQBYIv2i64\000SHLQBYIv4f32\000SHLQBYIv4i32\000SHLQBYI"
    "v8i16\000SHLQBYr128\000SHLQBYv16i8\000SHLQBYv2f64\000SHLQBYv2i64\000SHL"
    "QBYv4f32\000SHLQBYv4i32\000SHLQBYv8i16\000SHLr32\000SHLv4i32\000SHUFBgp"
    "rc\000SHUFBv16i8\000SHUFBv16i8_m32\000SHUFBv2f64\000SHUFBv2f64_m32\000S"
    "HUFBv2i64\000SHUFBv2i64_m32\000SHUFBv4f32\000SHUFBv4f32_m32\000SHUFBv4i"
    "32\000SHUFBv4i32_m32\000SHUFBv8i16\000SHUFBv8i16_m32\000STQAf32\000STQA"
    "f64\000STQAr128\000STQAr16\000STQAr32\000STQAr64\000STQAr8\000STQAv16i8"
    "\000STQAv2f64\000STQAv2i64\000STQAv4f32\000STQAv4i32\000STQAv8i16\000ST"
    "QDf32\000STQDf64\000STQDr128\000STQDr16\000STQDr32\000STQDr64\000STQDr8"
    "\000STQDv16i8\000STQDv2f64\000STQDv2i64\000STQDv4f32\000STQDv4i32\000ST"
    "QDv8i16\000STQXf32\000STQXf64\000STQXr128\000STQXr16\000STQXr32\000STQX"
    "r64\000STQXr8\000STQXv16i8\000STQXv2f64\000STQXv2i64\000STQXv4f32\000ST"
    "QXv4i32\000STQXv8i16\000SUMB\000XORBIr8\000XORBIv16i8\000XORHIr16\000XO"
    "RHIv8i16\000XORIr32\000XORIv4i32\000XORfneg32\000XORfneg64\000XORfnegve"
    "c\000XORr128\000XORr16\000XORr32\000XORr64\000XORr8\000XORv16i8\000XORv"
    "2i64\000XORv4i32\000XORv8i16\000XSBHr16\000XSBHr32\000XSBHr64\000XSBHr8"
    "\000XSBHv16i8\000XSHWr16\000XSHWr32\000XSHWr64\000XSHWv4i32\000XSWDr64\000"
    "XSWDr64_inreg\000XSWDv2i64\000";
  return Strs+InstAsmOffset[Opcode];
}

#endif
