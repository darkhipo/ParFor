//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Register Information Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

namespace llvm {

namespace {     // Register classes...
  // GPRC Register Class...
  static const unsigned GPRC[] = {
    SPU::R3, SPU::R4, SPU::R5, SPU::R6, SPU::R7, SPU::R8, SPU::R9, SPU::R10, SPU::R11, SPU::R12, SPU::R13, SPU::R14, SPU::R15, SPU::R16, SPU::R17, SPU::R18, SPU::R19, SPU::R20, SPU::R21, SPU::R22, SPU::R23, SPU::R24, SPU::R25, SPU::R26, SPU::R27, SPU::R28, SPU::R29, SPU::R30, SPU::R31, SPU::R32, SPU::R33, SPU::R34, SPU::R35, SPU::R36, SPU::R37, SPU::R38, SPU::R39, SPU::R40, SPU::R41, SPU::R42, SPU::R43, SPU::R44, SPU::R45, SPU::R46, SPU::R47, SPU::R48, SPU::R49, SPU::R50, SPU::R51, SPU::R52, SPU::R53, SPU::R54, SPU::R55, SPU::R56, SPU::R57, SPU::R58, SPU::R59, SPU::R60, SPU::R61, SPU::R62, SPU::R63, SPU::R64, SPU::R65, SPU::R66, SPU::R67, SPU::R68, SPU::R69, SPU::R70, SPU::R71, SPU::R72, SPU::R73, SPU::R74, SPU::R75, SPU::R76, SPU::R77, SPU::R78, SPU::R79, SPU::R127, SPU::R126, SPU::R125, SPU::R124, SPU::R123, SPU::R122, SPU::R121, SPU::R120, SPU::R119, SPU::R118, SPU::R117, SPU::R116, SPU::R115, SPU::R114, SPU::R113, SPU::R112, SPU::R111, SPU::R110, SPU::R109, SPU::R108, SPU::R107, SPU::R106, SPU::R105, SPU::R104, SPU::R103, SPU::R102, SPU::R101, SPU::R100, SPU::R99, SPU::R98, SPU::R97, SPU::R96, SPU::R95, SPU::R94, SPU::R93, SPU::R92, SPU::R91, SPU::R90, SPU::R89, SPU::R88, SPU::R87, SPU::R86, SPU::R85, SPU::R84, SPU::R83, SPU::R82, SPU::R81, SPU::R80, SPU::R2, SPU::R1, SPU::R0, 
  };

  // R16C Register Class...
  static const unsigned R16C[] = {
    SPU::R3, SPU::R4, SPU::R5, SPU::R6, SPU::R7, SPU::R8, SPU::R9, SPU::R10, SPU::R11, SPU::R12, SPU::R13, SPU::R14, SPU::R15, SPU::R16, SPU::R17, SPU::R18, SPU::R19, SPU::R20, SPU::R21, SPU::R22, SPU::R23, SPU::R24, SPU::R25, SPU::R26, SPU::R27, SPU::R28, SPU::R29, SPU::R30, SPU::R31, SPU::R32, SPU::R33, SPU::R34, SPU::R35, SPU::R36, SPU::R37, SPU::R38, SPU::R39, SPU::R40, SPU::R41, SPU::R42, SPU::R43, SPU::R44, SPU::R45, SPU::R46, SPU::R47, SPU::R48, SPU::R49, SPU::R50, SPU::R51, SPU::R52, SPU::R53, SPU::R54, SPU::R55, SPU::R56, SPU::R57, SPU::R58, SPU::R59, SPU::R60, SPU::R61, SPU::R62, SPU::R63, SPU::R64, SPU::R65, SPU::R66, SPU::R67, SPU::R68, SPU::R69, SPU::R70, SPU::R71, SPU::R72, SPU::R73, SPU::R74, SPU::R75, SPU::R76, SPU::R77, SPU::R78, SPU::R79, SPU::R127, SPU::R126, SPU::R125, SPU::R124, SPU::R123, SPU::R122, SPU::R121, SPU::R120, SPU::R119, SPU::R118, SPU::R117, SPU::R116, SPU::R115, SPU::R114, SPU::R113, SPU::R112, SPU::R111, SPU::R110, SPU::R109, SPU::R108, SPU::R107, SPU::R106, SPU::R105, SPU::R104, SPU::R103, SPU::R102, SPU::R101, SPU::R100, SPU::R99, SPU::R98, SPU::R97, SPU::R96, SPU::R95, SPU::R94, SPU::R93, SPU::R92, SPU::R91, SPU::R90, SPU::R89, SPU::R88, SPU::R87, SPU::R86, SPU::R85, SPU::R84, SPU::R83, SPU::R82, SPU::R81, SPU::R80, SPU::R2, SPU::R1, SPU::R0, 
  };

  // R32C Register Class...
  static const unsigned R32C[] = {
    SPU::R3, SPU::R4, SPU::R5, SPU::R6, SPU::R7, SPU::R8, SPU::R9, SPU::R10, SPU::R11, SPU::R12, SPU::R13, SPU::R14, SPU::R15, SPU::R16, SPU::R17, SPU::R18, SPU::R19, SPU::R20, SPU::R21, SPU::R22, SPU::R23, SPU::R24, SPU::R25, SPU::R26, SPU::R27, SPU::R28, SPU::R29, SPU::R30, SPU::R31, SPU::R32, SPU::R33, SPU::R34, SPU::R35, SPU::R36, SPU::R37, SPU::R38, SPU::R39, SPU::R40, SPU::R41, SPU::R42, SPU::R43, SPU::R44, SPU::R45, SPU::R46, SPU::R47, SPU::R48, SPU::R49, SPU::R50, SPU::R51, SPU::R52, SPU::R53, SPU::R54, SPU::R55, SPU::R56, SPU::R57, SPU::R58, SPU::R59, SPU::R60, SPU::R61, SPU::R62, SPU::R63, SPU::R64, SPU::R65, SPU::R66, SPU::R67, SPU::R68, SPU::R69, SPU::R70, SPU::R71, SPU::R72, SPU::R73, SPU::R74, SPU::R75, SPU::R76, SPU::R77, SPU::R78, SPU::R79, SPU::R127, SPU::R126, SPU::R125, SPU::R124, SPU::R123, SPU::R122, SPU::R121, SPU::R120, SPU::R119, SPU::R118, SPU::R117, SPU::R116, SPU::R115, SPU::R114, SPU::R113, SPU::R112, SPU::R111, SPU::R110, SPU::R109, SPU::R108, SPU::R107, SPU::R106, SPU::R105, SPU::R104, SPU::R103, SPU::R102, SPU::R101, SPU::R100, SPU::R99, SPU::R98, SPU::R97, SPU::R96, SPU::R95, SPU::R94, SPU::R93, SPU::R92, SPU::R91, SPU::R90, SPU::R89, SPU::R88, SPU::R87, SPU::R86, SPU::R85, SPU::R84, SPU::R83, SPU::R82, SPU::R81, SPU::R80, SPU::R2, SPU::R1, SPU::R0, 
  };

  // R32FP Register Class...
  static const unsigned R32FP[] = {
    SPU::R3, SPU::R4, SPU::R5, SPU::R6, SPU::R7, SPU::R8, SPU::R9, SPU::R10, SPU::R11, SPU::R12, SPU::R13, SPU::R14, SPU::R15, SPU::R16, SPU::R17, SPU::R18, SPU::R19, SPU::R20, SPU::R21, SPU::R22, SPU::R23, SPU::R24, SPU::R25, SPU::R26, SPU::R27, SPU::R28, SPU::R29, SPU::R30, SPU::R31, SPU::R32, SPU::R33, SPU::R34, SPU::R35, SPU::R36, SPU::R37, SPU::R38, SPU::R39, SPU::R40, SPU::R41, SPU::R42, SPU::R43, SPU::R44, SPU::R45, SPU::R46, SPU::R47, SPU::R48, SPU::R49, SPU::R50, SPU::R51, SPU::R52, SPU::R53, SPU::R54, SPU::R55, SPU::R56, SPU::R57, SPU::R58, SPU::R59, SPU::R60, SPU::R61, SPU::R62, SPU::R63, SPU::R64, SPU::R65, SPU::R66, SPU::R67, SPU::R68, SPU::R69, SPU::R70, SPU::R71, SPU::R72, SPU::R73, SPU::R74, SPU::R75, SPU::R76, SPU::R77, SPU::R78, SPU::R79, SPU::R127, SPU::R126, SPU::R125, SPU::R124, SPU::R123, SPU::R122, SPU::R121, SPU::R120, SPU::R119, SPU::R118, SPU::R117, SPU::R116, SPU::R115, SPU::R114, SPU::R113, SPU::R112, SPU::R111, SPU::R110, SPU::R109, SPU::R108, SPU::R107, SPU::R106, SPU::R105, SPU::R104, SPU::R103, SPU::R102, SPU::R101, SPU::R100, SPU::R99, SPU::R98, SPU::R97, SPU::R96, SPU::R95, SPU::R94, SPU::R93, SPU::R92, SPU::R91, SPU::R90, SPU::R89, SPU::R88, SPU::R87, SPU::R86, SPU::R85, SPU::R84, SPU::R83, SPU::R82, SPU::R81, SPU::R80, SPU::R2, SPU::R1, SPU::R0, 
  };

  // R64C Register Class...
  static const unsigned R64C[] = {
    SPU::R3, SPU::R4, SPU::R5, SPU::R6, SPU::R7, SPU::R8, SPU::R9, SPU::R10, SPU::R11, SPU::R12, SPU::R13, SPU::R14, SPU::R15, SPU::R16, SPU::R17, SPU::R18, SPU::R19, SPU::R20, SPU::R21, SPU::R22, SPU::R23, SPU::R24, SPU::R25, SPU::R26, SPU::R27, SPU::R28, SPU::R29, SPU::R30, SPU::R31, SPU::R32, SPU::R33, SPU::R34, SPU::R35, SPU::R36, SPU::R37, SPU::R38, SPU::R39, SPU::R40, SPU::R41, SPU::R42, SPU::R43, SPU::R44, SPU::R45, SPU::R46, SPU::R47, SPU::R48, SPU::R49, SPU::R50, SPU::R51, SPU::R52, SPU::R53, SPU::R54, SPU::R55, SPU::R56, SPU::R57, SPU::R58, SPU::R59, SPU::R60, SPU::R61, SPU::R62, SPU::R63, SPU::R64, SPU::R65, SPU::R66, SPU::R67, SPU::R68, SPU::R69, SPU::R70, SPU::R71, SPU::R72, SPU::R73, SPU::R74, SPU::R75, SPU::R76, SPU::R77, SPU::R78, SPU::R79, SPU::R127, SPU::R126, SPU::R125, SPU::R124, SPU::R123, SPU::R122, SPU::R121, SPU::R120, SPU::R119, SPU::R118, SPU::R117, SPU::R116, SPU::R115, SPU::R114, SPU::R113, SPU::R112, SPU::R111, SPU::R110, SPU::R109, SPU::R108, SPU::R107, SPU::R106, SPU::R105, SPU::R104, SPU::R103, SPU::R102, SPU::R101, SPU::R100, SPU::R99, SPU::R98, SPU::R97, SPU::R96, SPU::R95, SPU::R94, SPU::R93, SPU::R92, SPU::R91, SPU::R90, SPU::R89, SPU::R88, SPU::R87, SPU::R86, SPU::R85, SPU::R84, SPU::R83, SPU::R82, SPU::R81, SPU::R80, SPU::R2, SPU::R1, SPU::R0, 
  };

  // R64FP Register Class...
  static const unsigned R64FP[] = {
    SPU::R3, SPU::R4, SPU::R5, SPU::R6, SPU::R7, SPU::R8, SPU::R9, SPU::R10, SPU::R11, SPU::R12, SPU::R13, SPU::R14, SPU::R15, SPU::R16, SPU::R17, SPU::R18, SPU::R19, SPU::R20, SPU::R21, SPU::R22, SPU::R23, SPU::R24, SPU::R25, SPU::R26, SPU::R27, SPU::R28, SPU::R29, SPU::R30, SPU::R31, SPU::R32, SPU::R33, SPU::R34, SPU::R35, SPU::R36, SPU::R37, SPU::R38, SPU::R39, SPU::R40, SPU::R41, SPU::R42, SPU::R43, SPU::R44, SPU::R45, SPU::R46, SPU::R47, SPU::R48, SPU::R49, SPU::R50, SPU::R51, SPU::R52, SPU::R53, SPU::R54, SPU::R55, SPU::R56, SPU::R57, SPU::R58, SPU::R59, SPU::R60, SPU::R61, SPU::R62, SPU::R63, SPU::R64, SPU::R65, SPU::R66, SPU::R67, SPU::R68, SPU::R69, SPU::R70, SPU::R71, SPU::R72, SPU::R73, SPU::R74, SPU::R75, SPU::R76, SPU::R77, SPU::R78, SPU::R79, SPU::R127, SPU::R126, SPU::R125, SPU::R124, SPU::R123, SPU::R122, SPU::R121, SPU::R120, SPU::R119, SPU::R118, SPU::R117, SPU::R116, SPU::R115, SPU::R114, SPU::R113, SPU::R112, SPU::R111, SPU::R110, SPU::R109, SPU::R108, SPU::R107, SPU::R106, SPU::R105, SPU::R104, SPU::R103, SPU::R102, SPU::R101, SPU::R100, SPU::R99, SPU::R98, SPU::R97, SPU::R96, SPU::R95, SPU::R94, SPU::R93, SPU::R92, SPU::R91, SPU::R90, SPU::R89, SPU::R88, SPU::R87, SPU::R86, SPU::R85, SPU::R84, SPU::R83, SPU::R82, SPU::R81, SPU::R80, SPU::R2, SPU::R1, SPU::R0, 
  };

  // R8C Register Class...
  static const unsigned R8C[] = {
    SPU::R3, SPU::R4, SPU::R5, SPU::R6, SPU::R7, SPU::R8, SPU::R9, SPU::R10, SPU::R11, SPU::R12, SPU::R13, SPU::R14, SPU::R15, SPU::R16, SPU::R17, SPU::R18, SPU::R19, SPU::R20, SPU::R21, SPU::R22, SPU::R23, SPU::R24, SPU::R25, SPU::R26, SPU::R27, SPU::R28, SPU::R29, SPU::R30, SPU::R31, SPU::R32, SPU::R33, SPU::R34, SPU::R35, SPU::R36, SPU::R37, SPU::R38, SPU::R39, SPU::R40, SPU::R41, SPU::R42, SPU::R43, SPU::R44, SPU::R45, SPU::R46, SPU::R47, SPU::R48, SPU::R49, SPU::R50, SPU::R51, SPU::R52, SPU::R53, SPU::R54, SPU::R55, SPU::R56, SPU::R57, SPU::R58, SPU::R59, SPU::R60, SPU::R61, SPU::R62, SPU::R63, SPU::R64, SPU::R65, SPU::R66, SPU::R67, SPU::R68, SPU::R69, SPU::R70, SPU::R71, SPU::R72, SPU::R73, SPU::R74, SPU::R75, SPU::R76, SPU::R77, SPU::R78, SPU::R79, SPU::R127, SPU::R126, SPU::R125, SPU::R124, SPU::R123, SPU::R122, SPU::R121, SPU::R120, SPU::R119, SPU::R118, SPU::R117, SPU::R116, SPU::R115, SPU::R114, SPU::R113, SPU::R112, SPU::R111, SPU::R110, SPU::R109, SPU::R108, SPU::R107, SPU::R106, SPU::R105, SPU::R104, SPU::R103, SPU::R102, SPU::R101, SPU::R100, SPU::R99, SPU::R98, SPU::R97, SPU::R96, SPU::R95, SPU::R94, SPU::R93, SPU::R92, SPU::R91, SPU::R90, SPU::R89, SPU::R88, SPU::R87, SPU::R86, SPU::R85, SPU::R84, SPU::R83, SPU::R82, SPU::R81, SPU::R80, SPU::R2, SPU::R1, SPU::R0, 
  };

  // VECREG Register Class...
  static const unsigned VECREG[] = {
    SPU::R3, SPU::R4, SPU::R5, SPU::R6, SPU::R7, SPU::R8, SPU::R9, SPU::R10, SPU::R11, SPU::R12, SPU::R13, SPU::R14, SPU::R15, SPU::R16, SPU::R17, SPU::R18, SPU::R19, SPU::R20, SPU::R21, SPU::R22, SPU::R23, SPU::R24, SPU::R25, SPU::R26, SPU::R27, SPU::R28, SPU::R29, SPU::R30, SPU::R31, SPU::R32, SPU::R33, SPU::R34, SPU::R35, SPU::R36, SPU::R37, SPU::R38, SPU::R39, SPU::R40, SPU::R41, SPU::R42, SPU::R43, SPU::R44, SPU::R45, SPU::R46, SPU::R47, SPU::R48, SPU::R49, SPU::R50, SPU::R51, SPU::R52, SPU::R53, SPU::R54, SPU::R55, SPU::R56, SPU::R57, SPU::R58, SPU::R59, SPU::R60, SPU::R61, SPU::R62, SPU::R63, SPU::R64, SPU::R65, SPU::R66, SPU::R67, SPU::R68, SPU::R69, SPU::R70, SPU::R71, SPU::R72, SPU::R73, SPU::R74, SPU::R75, SPU::R76, SPU::R77, SPU::R78, SPU::R79, SPU::R127, SPU::R126, SPU::R125, SPU::R124, SPU::R123, SPU::R122, SPU::R121, SPU::R120, SPU::R119, SPU::R118, SPU::R117, SPU::R116, SPU::R115, SPU::R114, SPU::R113, SPU::R112, SPU::R111, SPU::R110, SPU::R109, SPU::R108, SPU::R107, SPU::R106, SPU::R105, SPU::R104, SPU::R103, SPU::R102, SPU::R101, SPU::R100, SPU::R99, SPU::R98, SPU::R97, SPU::R96, SPU::R95, SPU::R94, SPU::R93, SPU::R92, SPU::R91, SPU::R90, SPU::R89, SPU::R88, SPU::R87, SPU::R86, SPU::R85, SPU::R84, SPU::R83, SPU::R82, SPU::R81, SPU::R80, SPU::R2, SPU::R1, SPU::R0, 
  };

  // GPRCVTs Register Class Value Types...
  static const EVT GPRCVTs[] = {
    MVT::i128, MVT::Other
  };

  // R16CVTs Register Class Value Types...
  static const EVT R16CVTs[] = {
    MVT::i16, MVT::Other
  };

  // R32CVTs Register Class Value Types...
  static const EVT R32CVTs[] = {
    MVT::i32, MVT::Other
  };

  // R32FPVTs Register Class Value Types...
  static const EVT R32FPVTs[] = {
    MVT::f32, MVT::Other
  };

  // R64CVTs Register Class Value Types...
  static const EVT R64CVTs[] = {
    MVT::i64, MVT::Other
  };

  // R64FPVTs Register Class Value Types...
  static const EVT R64FPVTs[] = {
    MVT::f64, MVT::Other
  };

  // R8CVTs Register Class Value Types...
  static const EVT R8CVTs[] = {
    MVT::i8, MVT::Other
  };

  // VECREGVTs Register Class Value Types...
  static const EVT VECREGVTs[] = {
    MVT::v16i8, MVT::v8i16, MVT::v4i32, MVT::v4f32, MVT::v2i64, MVT::v2f64, MVT::Other
  };

}  // end anonymous namespace

namespace SPU {   // Register class instances
  GPRCClass	GPRCRegClass;
  R16CClass	R16CRegClass;
  R32CClass	R32CRegClass;
  R32FPClass	R32FPRegClass;
  R64CClass	R64CRegClass;
  R64FPClass	R64FPRegClass;
  R8CClass	R8CRegClass;
  VECREGClass	VECREGRegClass;

  static const TargetRegisterClass* const NullRegClasses[] = { NULL };

  // GPRC Register Class sub-classes...
  static const TargetRegisterClass* const GPRCSubclasses[] = {
    &SPU::VECREGRegClass, NULL
  };

  // R16C Register Class sub-classes...
  static const TargetRegisterClass* const R16CSubclasses[] = {
    &SPU::GPRCRegClass, &SPU::R32CRegClass, &SPU::R32FPRegClass, &SPU::R64CRegClass, &SPU::R64FPRegClass, &SPU::VECREGRegClass, NULL
  };

  // R32C Register Class sub-classes...
  static const TargetRegisterClass* const R32CSubclasses[] = {
    &SPU::GPRCRegClass, &SPU::R32FPRegClass, &SPU::R64CRegClass, &SPU::R64FPRegClass, &SPU::VECREGRegClass, NULL
  };

  // R32FP Register Class sub-classes...
  static const TargetRegisterClass* const R32FPSubclasses[] = {
    &SPU::GPRCRegClass, &SPU::R32CRegClass, &SPU::R64CRegClass, &SPU::R64FPRegClass, &SPU::VECREGRegClass, NULL
  };

  // R64C Register Class sub-classes...
  static const TargetRegisterClass* const R64CSubclasses[] = {
    &SPU::GPRCRegClass, &SPU::R64FPRegClass, &SPU::VECREGRegClass, NULL
  };

  // R64FP Register Class sub-classes...
  static const TargetRegisterClass* const R64FPSubclasses[] = {
    &SPU::GPRCRegClass, &SPU::R64CRegClass, &SPU::VECREGRegClass, NULL
  };

  // R8C Register Class sub-classes...
  static const TargetRegisterClass* const R8CSubclasses[] = {
    &SPU::GPRCRegClass, &SPU::R16CRegClass, &SPU::R32CRegClass, &SPU::R32FPRegClass, &SPU::R64CRegClass, &SPU::R64FPRegClass, &SPU::VECREGRegClass, NULL
  };

  // VECREG Register Class sub-classes...
  static const TargetRegisterClass* const VECREGSubclasses[] = {
    &SPU::GPRCRegClass, NULL
  };

  // GPRC Register Class super-classes...
  static const TargetRegisterClass* const GPRCSuperclasses[] = {
    &SPU::R16CRegClass, &SPU::R32CRegClass, &SPU::R32FPRegClass, &SPU::R64CRegClass, &SPU::R64FPRegClass, &SPU::R8CRegClass, &SPU::VECREGRegClass, NULL
  };

  // R16C Register Class super-classes...
  static const TargetRegisterClass* const R16CSuperclasses[] = {
    &SPU::R8CRegClass, NULL
  };

  // R32C Register Class super-classes...
  static const TargetRegisterClass* const R32CSuperclasses[] = {
    &SPU::R16CRegClass, &SPU::R32FPRegClass, &SPU::R8CRegClass, NULL
  };

  // R32FP Register Class super-classes...
  static const TargetRegisterClass* const R32FPSuperclasses[] = {
    &SPU::R16CRegClass, &SPU::R32CRegClass, &SPU::R8CRegClass, NULL
  };

  // R64C Register Class super-classes...
  static const TargetRegisterClass* const R64CSuperclasses[] = {
    &SPU::R16CRegClass, &SPU::R32CRegClass, &SPU::R32FPRegClass, &SPU::R64FPRegClass, &SPU::R8CRegClass, NULL
  };

  // R64FP Register Class super-classes...
  static const TargetRegisterClass* const R64FPSuperclasses[] = {
    &SPU::R16CRegClass, &SPU::R32CRegClass, &SPU::R32FPRegClass, &SPU::R64CRegClass, &SPU::R8CRegClass, NULL
  };

  // R8C Register Class super-classes...
  static const TargetRegisterClass* const R8CSuperclasses[] = {
    NULL
  };

  // VECREG Register Class super-classes...
  static const TargetRegisterClass* const VECREGSuperclasses[] = {
    &SPU::GPRCRegClass, &SPU::R16CRegClass, &SPU::R32CRegClass, &SPU::R32FPRegClass, &SPU::R64CRegClass, &SPU::R64FPRegClass, &SPU::R8CRegClass, NULL
  };


    GPRCClass::iterator
    GPRCClass::allocation_order_begin(const MachineFunction &MF) const {
      return begin();
    }
    GPRCClass::iterator
    GPRCClass::allocation_order_end(const MachineFunction &MF) const {
      return end()-3;  // don't allocate R2, R1, or R0 (envp, sp, lr)
    }
  
GPRCClass::GPRCClass()  : TargetRegisterClass(GPRCRegClassID, "GPRC", GPRCVTs, GPRCSubclasses, GPRCSuperclasses, NullRegClasses, NullRegClasses, 16, 16, 1, GPRC, GPRC + 128) {}

    R16CClass::iterator
    R16CClass::allocation_order_begin(const MachineFunction &MF) const {
      return begin();
    }
    R16CClass::iterator
    R16CClass::allocation_order_end(const MachineFunction &MF) const {
      return end()-3;  // don't allocate R2, R1, or R0 (envp, sp, lr)
    }
  
R16CClass::R16CClass()  : TargetRegisterClass(R16CRegClassID, "R16C", R16CVTs, R16CSubclasses, R16CSuperclasses, NullRegClasses, NullRegClasses, 2, 16, 1, R16C, R16C + 128) {}

    R32CClass::iterator
    R32CClass::allocation_order_begin(const MachineFunction &MF) const {
      return begin();
    }
    R32CClass::iterator
    R32CClass::allocation_order_end(const MachineFunction &MF) const {
      return end()-3;  // don't allocate R2, R1, or R0 (envp, sp, lr)
    }
  
R32CClass::R32CClass()  : TargetRegisterClass(R32CRegClassID, "R32C", R32CVTs, R32CSubclasses, R32CSuperclasses, NullRegClasses, NullRegClasses, 4, 16, 1, R32C, R32C + 128) {}

    R32FPClass::iterator
    R32FPClass::allocation_order_begin(const MachineFunction &MF) const {
      return begin();
    }
    R32FPClass::iterator
    R32FPClass::allocation_order_end(const MachineFunction &MF) const {
      return end()-3;  // don't allocate R2, R1, or R0 (envp, sp, lr)
    }
  
R32FPClass::R32FPClass()  : TargetRegisterClass(R32FPRegClassID, "R32FP", R32FPVTs, R32FPSubclasses, R32FPSuperclasses, NullRegClasses, NullRegClasses, 4, 16, 1, R32FP, R32FP + 128) {}

    R64CClass::iterator
    R64CClass::allocation_order_begin(const MachineFunction &MF) const {
      return begin();
    }
    R64CClass::iterator
    R64CClass::allocation_order_end(const MachineFunction &MF) const {
      return end()-3;  // don't allocate R2, R1, or R0 (envp, sp, lr)
    }
  
R64CClass::R64CClass()  : TargetRegisterClass(R64CRegClassID, "R64C", R64CVTs, R64CSubclasses, R64CSuperclasses, NullRegClasses, NullRegClasses, 8, 16, 1, R64C, R64C + 128) {}

    R64FPClass::iterator
    R64FPClass::allocation_order_begin(const MachineFunction &MF) const {
      return begin();
    }
    R64FPClass::iterator
    R64FPClass::allocation_order_end(const MachineFunction &MF) const {
      return end()-3;  // don't allocate R2, R1, or R0 (envp, sp, lr)
    }
  
R64FPClass::R64FPClass()  : TargetRegisterClass(R64FPRegClassID, "R64FP", R64FPVTs, R64FPSubclasses, R64FPSuperclasses, NullRegClasses, NullRegClasses, 8, 16, 1, R64FP, R64FP + 128) {}

    R8CClass::iterator
    R8CClass::allocation_order_begin(const MachineFunction &MF) const {
      return begin();
    }
    R8CClass::iterator
    R8CClass::allocation_order_end(const MachineFunction &MF) const {
      return end()-3;  // don't allocate R2, R1, or R0 (envp, sp, lr)
    }
  
R8CClass::R8CClass()  : TargetRegisterClass(R8CRegClassID, "R8C", R8CVTs, R8CSubclasses, R8CSuperclasses, NullRegClasses, NullRegClasses, 1, 16, 1, R8C, R8C + 128) {}

    VECREGClass::iterator
    VECREGClass::allocation_order_begin(const MachineFunction &MF) const {
      return begin();
    }
    VECREGClass::iterator
    VECREGClass::allocation_order_end(const MachineFunction &MF) const {
      return end()-3;  // don't allocate R2, R1, or R0 (envp, sp, lr)
    }
  
VECREGClass::VECREGClass()  : TargetRegisterClass(VECREGRegClassID, "VECREG", VECREGVTs, VECREGSubclasses, VECREGSuperclasses, NullRegClasses, NullRegClasses, 16, 16, 1, VECREG, VECREG + 128) {}
}

namespace {
  const TargetRegisterClass* const RegisterClasses[] = {
    &SPU::GPRCRegClass,
    &SPU::R16CRegClass,
    &SPU::R32CRegClass,
    &SPU::R32FPRegClass,
    &SPU::R64CRegClass,
    &SPU::R64FPRegClass,
    &SPU::R8CRegClass,
    &SPU::VECREGRegClass,
  };


  // Number of hash collisions: 0
  const unsigned SubregHashTable[] = { SPU::NoRegister, SPU::NoRegister, 
SPU::NoRegister, SPU::NoRegister };
  const unsigned SubregHashTableSize = 2;


  // Number of hash collisions: 0
  const unsigned AliasesHashTable[] = { SPU::NoRegister, SPU::NoRegister, 
SPU::NoRegister, SPU::NoRegister };
  const unsigned AliasesHashTableSize = 2;


  // Register Alias Sets...
  const unsigned Empty_AliasSet[] = { 0 };


  // Register Sub-registers Sets...
  const unsigned Empty_SubRegsSet[] = { 0 };
  const unsigned Empty_SuperRegsSet[] = { 0 };

  const TargetRegisterDesc RegisterDescriptors[] = { // Descriptors
    { "NOREG",	0,	0,	0 },
    { "R0",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R1",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R2",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R3",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R4",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R5",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R6",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R7",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R8",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R9",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R10",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R11",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R12",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R13",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R14",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R15",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R16",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R17",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R18",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R19",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R20",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R21",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R22",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R23",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R24",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R25",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R26",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R27",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R28",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R29",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R30",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R31",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R32",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R33",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R34",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R35",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R36",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R37",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R38",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R39",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R40",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R41",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R42",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R43",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R44",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R45",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R46",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R47",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R48",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R49",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R50",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R51",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R52",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R53",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R54",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R55",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R56",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R57",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R58",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R59",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R60",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R61",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R62",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R63",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R64",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R65",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R66",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R67",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R68",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R69",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R70",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R71",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R72",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R73",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R74",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R75",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R76",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R77",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R78",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R79",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R80",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R81",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R82",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R83",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R84",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R85",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R86",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R87",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R88",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R89",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R90",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R91",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R92",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R93",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R94",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R95",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R96",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R97",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R98",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R99",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R100",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R101",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R102",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R103",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R104",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R105",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R106",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R107",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R108",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R109",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R110",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R111",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R112",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R113",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R114",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R115",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R116",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R117",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R118",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R119",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R120",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R121",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R122",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R123",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R124",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R125",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R126",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
    { "R127",	Empty_AliasSet,	Empty_SubRegsSet,	Empty_SuperRegsSet },
  };

  const char *const SubRegIndexTable[] = { "" };

}

unsigned SPUGenRegisterInfo::getSubReg(unsigned RegNo, unsigned Index) const {
  switch (RegNo) {
  default:
    return 0;
  };
  return 0;
}

unsigned SPUGenRegisterInfo::getSubRegIndex(unsigned RegNo, unsigned SubRegNo) const {
  switch (RegNo) {
  default:
    return 0;
  };
  return 0;
}

unsigned SPUGenRegisterInfo::composeSubRegIndices(unsigned IdxA, unsigned IdxB) const {
  switch (IdxA) {
  default:
    return IdxB;
  }
}

SPUGenRegisterInfo::SPUGenRegisterInfo(int CallFrameSetupOpcode, int CallFrameDestroyOpcode)
  : TargetRegisterInfo(RegisterDescriptors, 129, RegisterClasses, RegisterClasses+8,
                 SubRegIndexTable,
                 CallFrameSetupOpcode, CallFrameDestroyOpcode,
                 SubregHashTable, SubregHashTableSize,
                 AliasesHashTable, AliasesHashTableSize) {
}

int SPUGenRegisterInfo::getDwarfRegNumFull(unsigned RegNum, unsigned Flavour) const {
  switch (Flavour) {
  default:
    assert(0 && "Unknown DWARF flavour");
    return -1;
  case 0:
    switch (RegNum) {
    default:
      assert(0 && "Invalid RegNum");
      return -1;
    case SPU::R0:
      return 0;
    case SPU::R1:
      return 1;
    case SPU::R2:
      return 2;
    case SPU::R3:
      return 3;
    case SPU::R4:
      return 4;
    case SPU::R5:
      return 5;
    case SPU::R6:
      return 6;
    case SPU::R7:
      return 7;
    case SPU::R8:
      return 8;
    case SPU::R9:
      return 9;
    case SPU::R10:
      return 10;
    case SPU::R11:
      return 11;
    case SPU::R12:
      return 12;
    case SPU::R13:
      return 13;
    case SPU::R14:
      return 14;
    case SPU::R15:
      return 15;
    case SPU::R16:
      return 16;
    case SPU::R17:
      return 17;
    case SPU::R18:
      return 18;
    case SPU::R19:
      return 19;
    case SPU::R20:
      return 20;
    case SPU::R21:
      return 21;
    case SPU::R22:
      return 22;
    case SPU::R23:
      return 23;
    case SPU::R24:
      return 24;
    case SPU::R25:
      return 25;
    case SPU::R26:
      return 26;
    case SPU::R27:
      return 27;
    case SPU::R28:
      return 28;
    case SPU::R29:
      return 29;
    case SPU::R30:
      return 30;
    case SPU::R31:
      return 31;
    case SPU::R32:
      return 32;
    case SPU::R33:
      return 33;
    case SPU::R34:
      return 34;
    case SPU::R35:
      return 35;
    case SPU::R36:
      return 36;
    case SPU::R37:
      return 37;
    case SPU::R38:
      return 38;
    case SPU::R39:
      return 39;
    case SPU::R40:
      return 40;
    case SPU::R41:
      return 41;
    case SPU::R42:
      return 42;
    case SPU::R43:
      return 43;
    case SPU::R44:
      return 44;
    case SPU::R45:
      return 45;
    case SPU::R46:
      return 46;
    case SPU::R47:
      return 47;
    case SPU::R48:
      return 48;
    case SPU::R49:
      return 49;
    case SPU::R50:
      return 50;
    case SPU::R51:
      return 51;
    case SPU::R52:
      return 52;
    case SPU::R53:
      return 53;
    case SPU::R54:
      return 54;
    case SPU::R55:
      return 55;
    case SPU::R56:
      return 56;
    case SPU::R57:
      return 57;
    case SPU::R58:
      return 58;
    case SPU::R59:
      return 59;
    case SPU::R60:
      return 60;
    case SPU::R61:
      return 61;
    case SPU::R62:
      return 62;
    case SPU::R63:
      return 63;
    case SPU::R64:
      return 64;
    case SPU::R65:
      return 65;
    case SPU::R66:
      return 66;
    case SPU::R67:
      return 67;
    case SPU::R68:
      return 68;
    case SPU::R69:
      return 69;
    case SPU::R70:
      return 70;
    case SPU::R71:
      return 71;
    case SPU::R72:
      return 72;
    case SPU::R73:
      return 73;
    case SPU::R74:
      return 74;
    case SPU::R75:
      return 75;
    case SPU::R76:
      return 76;
    case SPU::R77:
      return 77;
    case SPU::R78:
      return 78;
    case SPU::R79:
      return 79;
    case SPU::R80:
      return 80;
    case SPU::R81:
      return 81;
    case SPU::R82:
      return 82;
    case SPU::R83:
      return 83;
    case SPU::R84:
      return 84;
    case SPU::R85:
      return 85;
    case SPU::R86:
      return 86;
    case SPU::R87:
      return 87;
    case SPU::R88:
      return 88;
    case SPU::R89:
      return 89;
    case SPU::R90:
      return 90;
    case SPU::R91:
      return 91;
    case SPU::R92:
      return 92;
    case SPU::R93:
      return 93;
    case SPU::R94:
      return 94;
    case SPU::R95:
      return 95;
    case SPU::R96:
      return 96;
    case SPU::R97:
      return 97;
    case SPU::R98:
      return 98;
    case SPU::R99:
      return 99;
    case SPU::R100:
      return 100;
    case SPU::R101:
      return 101;
    case SPU::R102:
      return 102;
    case SPU::R103:
      return 103;
    case SPU::R104:
      return 104;
    case SPU::R105:
      return 105;
    case SPU::R106:
      return 106;
    case SPU::R107:
      return 107;
    case SPU::R108:
      return 108;
    case SPU::R109:
      return 109;
    case SPU::R110:
      return 110;
    case SPU::R111:
      return 111;
    case SPU::R112:
      return 112;
    case SPU::R113:
      return 113;
    case SPU::R114:
      return 114;
    case SPU::R115:
      return 115;
    case SPU::R116:
      return 116;
    case SPU::R117:
      return 117;
    case SPU::R118:
      return 118;
    case SPU::R119:
      return 119;
    case SPU::R120:
      return 120;
    case SPU::R121:
      return 121;
    case SPU::R122:
      return 122;
    case SPU::R123:
      return 123;
    case SPU::R124:
      return 124;
    case SPU::R125:
      return 125;
    case SPU::R126:
      return 126;
    case SPU::R127:
      return 127;
    };
  };
}

} // End llvm namespace 
